/*
Payments Direct API

Use the Payments Direct API to get quotes, create and manage payments, and manage originator and beneficiary identities.  ## API environments  The Payments Direct API offers the following environments:  | <div style=\"width:90px\">Environment</div>  | Base URL                      | Description                               | | ------------------------------------------ | ----------------------------- | ----------------------------------------- | | Test                                       | `https://api.test.ripple.com` | Test environment with simulated currency. | | Production                                 | `https://api.ripple.com`      | Production environment                    |  ## API authentication  All {{process.env.VAR_RPD}} API operations require a Bearer access token specific to the environment you're using. Ripple provides a secure model for authentication and authorization by providing access tokens scoped for a set of credentials.  ### Generate client ID and client secret  You will need your _client ID_ and _client secret_ to obtain an access token.  If you do not already have your client ID and client secret, do the following:  1. Log into the Ripple Payments UI. 2. In the left navigation menu, click **Settings**. 3. Under **Administration**, click **API Credentials**. 4. In the dropdown list next to the page title, select the access environment. For example, to provision credentials for the test environment, select **Test** from the dropdown list. 5. In the upper right corner of the page, click **New Credential**. 6. Click **Save and Generate Key**.  **Caution:** The *client secret* is displayed only once when you are creating new credentials. You cannot retrieve the secret after exiting this page. Copy and store the client secret securely and share it with authorized individuals in accordance with your organization's security policy.  You can now use the client ID and client secret to generate access tokens using the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation.  ### Request an access token  To get an access token, use the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation with your `client_id` and `client_secret`. The response contains a token in the `access_token` field.  We recommend rotating your API credentials at regular intervals according to your organization's security policy.  **Note**: Authentication tokens are not a fixed length and can vary, avoid validating tokens based on character length. 

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paymentsdirect

import (
	"encoding/json"
	"fmt"
)

// QuoteStatus the model 'QuoteStatus'
type QuoteStatus string

// List of QuoteStatus
const (
	QUOTESTATUS_EXPIRED QuoteStatus = "EXPIRED"
	QUOTESTATUS_ACTIVE QuoteStatus = "ACTIVE"
)

// All allowed values of QuoteStatus enum
var AllowedQuoteStatusEnumValues = []QuoteStatus{
	"EXPIRED",
	"ACTIVE",
}

func (v *QuoteStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := QuoteStatus(value)
	for _, existing := range AllowedQuoteStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid QuoteStatus", value)
}

// NewQuoteStatusFromValue returns a pointer to a valid QuoteStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewQuoteStatusFromValue(v string) (*QuoteStatus, error) {
	ev := QuoteStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for QuoteStatus: valid values are %v", v, AllowedQuoteStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v QuoteStatus) IsValid() bool {
	for _, existing := range AllowedQuoteStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to QuoteStatus value
func (v QuoteStatus) Ptr() *QuoteStatus {
	return &v
}

type NullableQuoteStatus struct {
	value *QuoteStatus
	isSet bool
}

func (v NullableQuoteStatus) Get() *QuoteStatus {
	return v.value
}

func (v *NullableQuoteStatus) Set(val *QuoteStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableQuoteStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableQuoteStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuoteStatus(val *QuoteStatus) *NullableQuoteStatus {
	return &NullableQuoteStatus{value: val, isSet: true}
}

func (v NullableQuoteStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuoteStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

