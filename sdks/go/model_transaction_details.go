/*
Payments Direct API

Use the Payments Direct API to get quotes, create and manage payments, and manage originator and beneficiary identities.  ## API environments  The Payments Direct API offers the following environments:  | <div style=\"width:90px\">Environment</div>  | Base URL                      | Description                               | | ------------------------------------------ | ----------------------------- | ----------------------------------------- | | Test                                       | `https://api.test.ripple.com` | Test environment with simulated currency. | | Production                                 | `https://api.ripple.com`      | Production environment                    |  ## API authentication  All {{process.env.VAR_RPD}} API operations require a Bearer access token specific to the environment you're using. Ripple provides a secure model for authentication and authorization by providing access tokens scoped for a set of credentials.  ### Generate client ID and client secret  You will need your _client ID_ and _client secret_ to obtain an access token.  If you do not already have your client ID and client secret, do the following:  1. Log into the Ripple Payments UI. 2. In the left navigation menu, click **Settings**. 3. Under **Administration**, click **API Credentials**. 4. In the dropdown list next to the page title, select the access environment. For example, to provision credentials for the test environment, select **Test** from the dropdown list. 5. In the upper right corner of the page, click **New Credential**. 6. Click **Save and Generate Key**.  **Caution:** The *client secret* is displayed only once when you are creating new credentials. You cannot retrieve the secret after exiting this page. Copy and store the client secret securely and share it with authorized individuals in accordance with your organization's security policy.  You can now use the client ID and client secret to generate access tokens using the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation.  ### Request an access token  To get an access token, use the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation with your `client_id` and `client_secret`. The response contains a token in the `access_token` field.  We recommend rotating your API credentials at regular intervals according to your organization's security policy.  **Note**: Authentication tokens are not a fixed length and can vary, avoid validating tokens based on character length. 

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paymentsdirect

import (
	"encoding/json"
)

// checks if the TransactionDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionDetails{}

// TransactionDetails A summary of the payment category.
type TransactionDetails struct {
	// The Ripple payments product used to make this payment.
	PaymentProduct NullableString `json:"paymentProduct,omitempty"`
	// Specifies the type of payment you're making as categorized by the identity type of the payment originator and beneficiary.
	FlowType NullableString `json:"flowType,omitempty"`
	// Flag to indicate if this payment is initiated on behalf of a third-party originator.
	ThirdPartyPayment NullableBool `json:"thirdPartyPayment,omitempty"`
	// Indicates the type of payment you're making.
	BusinessUseCase NullableString `json:"businessUseCase,omitempty"`
}

// NewTransactionDetails instantiates a new TransactionDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionDetails() *TransactionDetails {
	this := TransactionDetails{}
	return &this
}

// NewTransactionDetailsWithDefaults instantiates a new TransactionDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionDetailsWithDefaults() *TransactionDetails {
	this := TransactionDetails{}
	return &this
}

// GetPaymentProduct returns the PaymentProduct field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionDetails) GetPaymentProduct() string {
	if o == nil || IsNil(o.PaymentProduct.Get()) {
		var ret string
		return ret
	}
	return *o.PaymentProduct.Get()
}

// GetPaymentProductOk returns a tuple with the PaymentProduct field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionDetails) GetPaymentProductOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PaymentProduct.Get(), o.PaymentProduct.IsSet()
}

// HasPaymentProduct returns a boolean if a field has been set.
func (o *TransactionDetails) HasPaymentProduct() bool {
	if o != nil && o.PaymentProduct.IsSet() {
		return true
	}

	return false
}

// SetPaymentProduct gets a reference to the given NullableString and assigns it to the PaymentProduct field.
func (o *TransactionDetails) SetPaymentProduct(v string) {
	o.PaymentProduct.Set(&v)
}
// SetPaymentProductNil sets the value for PaymentProduct to be an explicit nil
func (o *TransactionDetails) SetPaymentProductNil() {
	o.PaymentProduct.Set(nil)
}

// UnsetPaymentProduct ensures that no value is present for PaymentProduct, not even an explicit nil
func (o *TransactionDetails) UnsetPaymentProduct() {
	o.PaymentProduct.Unset()
}

// GetFlowType returns the FlowType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionDetails) GetFlowType() string {
	if o == nil || IsNil(o.FlowType.Get()) {
		var ret string
		return ret
	}
	return *o.FlowType.Get()
}

// GetFlowTypeOk returns a tuple with the FlowType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionDetails) GetFlowTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FlowType.Get(), o.FlowType.IsSet()
}

// HasFlowType returns a boolean if a field has been set.
func (o *TransactionDetails) HasFlowType() bool {
	if o != nil && o.FlowType.IsSet() {
		return true
	}

	return false
}

// SetFlowType gets a reference to the given NullableString and assigns it to the FlowType field.
func (o *TransactionDetails) SetFlowType(v string) {
	o.FlowType.Set(&v)
}
// SetFlowTypeNil sets the value for FlowType to be an explicit nil
func (o *TransactionDetails) SetFlowTypeNil() {
	o.FlowType.Set(nil)
}

// UnsetFlowType ensures that no value is present for FlowType, not even an explicit nil
func (o *TransactionDetails) UnsetFlowType() {
	o.FlowType.Unset()
}

// GetThirdPartyPayment returns the ThirdPartyPayment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionDetails) GetThirdPartyPayment() bool {
	if o == nil || IsNil(o.ThirdPartyPayment.Get()) {
		var ret bool
		return ret
	}
	return *o.ThirdPartyPayment.Get()
}

// GetThirdPartyPaymentOk returns a tuple with the ThirdPartyPayment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionDetails) GetThirdPartyPaymentOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ThirdPartyPayment.Get(), o.ThirdPartyPayment.IsSet()
}

// HasThirdPartyPayment returns a boolean if a field has been set.
func (o *TransactionDetails) HasThirdPartyPayment() bool {
	if o != nil && o.ThirdPartyPayment.IsSet() {
		return true
	}

	return false
}

// SetThirdPartyPayment gets a reference to the given NullableBool and assigns it to the ThirdPartyPayment field.
func (o *TransactionDetails) SetThirdPartyPayment(v bool) {
	o.ThirdPartyPayment.Set(&v)
}
// SetThirdPartyPaymentNil sets the value for ThirdPartyPayment to be an explicit nil
func (o *TransactionDetails) SetThirdPartyPaymentNil() {
	o.ThirdPartyPayment.Set(nil)
}

// UnsetThirdPartyPayment ensures that no value is present for ThirdPartyPayment, not even an explicit nil
func (o *TransactionDetails) UnsetThirdPartyPayment() {
	o.ThirdPartyPayment.Unset()
}

// GetBusinessUseCase returns the BusinessUseCase field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionDetails) GetBusinessUseCase() string {
	if o == nil || IsNil(o.BusinessUseCase.Get()) {
		var ret string
		return ret
	}
	return *o.BusinessUseCase.Get()
}

// GetBusinessUseCaseOk returns a tuple with the BusinessUseCase field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionDetails) GetBusinessUseCaseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BusinessUseCase.Get(), o.BusinessUseCase.IsSet()
}

// HasBusinessUseCase returns a boolean if a field has been set.
func (o *TransactionDetails) HasBusinessUseCase() bool {
	if o != nil && o.BusinessUseCase.IsSet() {
		return true
	}

	return false
}

// SetBusinessUseCase gets a reference to the given NullableString and assigns it to the BusinessUseCase field.
func (o *TransactionDetails) SetBusinessUseCase(v string) {
	o.BusinessUseCase.Set(&v)
}
// SetBusinessUseCaseNil sets the value for BusinessUseCase to be an explicit nil
func (o *TransactionDetails) SetBusinessUseCaseNil() {
	o.BusinessUseCase.Set(nil)
}

// UnsetBusinessUseCase ensures that no value is present for BusinessUseCase, not even an explicit nil
func (o *TransactionDetails) UnsetBusinessUseCase() {
	o.BusinessUseCase.Unset()
}

func (o TransactionDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.PaymentProduct.IsSet() {
		toSerialize["paymentProduct"] = o.PaymentProduct.Get()
	}
	if o.FlowType.IsSet() {
		toSerialize["flowType"] = o.FlowType.Get()
	}
	if o.ThirdPartyPayment.IsSet() {
		toSerialize["thirdPartyPayment"] = o.ThirdPartyPayment.Get()
	}
	if o.BusinessUseCase.IsSet() {
		toSerialize["businessUseCase"] = o.BusinessUseCase.Get()
	}
	return toSerialize, nil
}

type NullableTransactionDetails struct {
	value *TransactionDetails
	isSet bool
}

func (v NullableTransactionDetails) Get() *TransactionDetails {
	return v.value
}

func (v *NullableTransactionDetails) Set(val *TransactionDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionDetails(val *TransactionDetails) *NullableTransactionDetails {
	return &NullableTransactionDetails{value: val, isSet: true}
}

func (v NullableTransactionDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


