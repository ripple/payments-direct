/*
Payments Direct API

Use the Payments Direct API to get quotes, create and manage payments, and manage originator and beneficiary identities.  ## API environments  The Payments Direct API offers the following environments:  | <div style=\"width:90px\">Environment</div>  | Base URL                      | Description                               | | ------------------------------------------ | ----------------------------- | ----------------------------------------- | | Test                                       | `https://api.test.ripple.com` | Test environment with simulated currency. | | Production                                 | `https://api.ripple.com`      | Production environment                    |  ## API authentication  All {{process.env.VAR_RPD}} API operations require a Bearer access token specific to the environment you're using. Ripple provides a secure model for authentication and authorization by providing access tokens scoped for a set of credentials.  ### Generate client ID and client secret  You will need your _client ID_ and _client secret_ to obtain an access token.  If you do not already have your client ID and client secret, do the following:  1. Log into the Ripple Payments UI. 2. In the left navigation menu, click **Settings**. 3. Under **Administration**, click **API Credentials**. 4. In the dropdown list next to the page title, select the access environment. For example, to provision credentials for the test environment, select **Test** from the dropdown list. 5. In the upper right corner of the page, click **New Credential**. 6. Click **Save and Generate Key**.  **Caution:** The *client secret* is displayed only once when you are creating new credentials. You cannot retrieve the secret after exiting this page. Copy and store the client secret securely and share it with authorized individuals in accordance with your organization's security policy.  You can now use the client ID and client secret to generate access tokens using the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation.  ### Request an access token  To get an access token, use the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation with your `client_id` and `client_secret`. The response contains a token in the `access_token` field.  We recommend rotating your API credentials at regular intervals according to your organization's security policy.  **Note**: Authentication tokens are not a fixed length and can vary, avoid validating tokens based on character length. 

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paymentsdirect

import (
	"encoding/json"
)

// checks if the TotalFeeBreakdown type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TotalFeeBreakdown{}

// TotalFeeBreakdown A breakdown of the total fees included in this quote.
type TotalFeeBreakdown struct {
	// Value of the fee when the configured fee unit is applied against the `value`.
	CalculatedFee *float64 `json:"calculatedFee,omitempty"`
	// The name of the fee.
	FeeName *string `json:"feeName,omitempty"`
	// Description of the fee.
	FeeDescription *string `json:"feeDescription,omitempty"`
}

// NewTotalFeeBreakdown instantiates a new TotalFeeBreakdown object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTotalFeeBreakdown() *TotalFeeBreakdown {
	this := TotalFeeBreakdown{}
	return &this
}

// NewTotalFeeBreakdownWithDefaults instantiates a new TotalFeeBreakdown object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTotalFeeBreakdownWithDefaults() *TotalFeeBreakdown {
	this := TotalFeeBreakdown{}
	return &this
}

// GetCalculatedFee returns the CalculatedFee field value if set, zero value otherwise.
func (o *TotalFeeBreakdown) GetCalculatedFee() float64 {
	if o == nil || IsNil(o.CalculatedFee) {
		var ret float64
		return ret
	}
	return *o.CalculatedFee
}

// GetCalculatedFeeOk returns a tuple with the CalculatedFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TotalFeeBreakdown) GetCalculatedFeeOk() (*float64, bool) {
	if o == nil || IsNil(o.CalculatedFee) {
		return nil, false
	}
	return o.CalculatedFee, true
}

// HasCalculatedFee returns a boolean if a field has been set.
func (o *TotalFeeBreakdown) HasCalculatedFee() bool {
	if o != nil && !IsNil(o.CalculatedFee) {
		return true
	}

	return false
}

// SetCalculatedFee gets a reference to the given float64 and assigns it to the CalculatedFee field.
func (o *TotalFeeBreakdown) SetCalculatedFee(v float64) {
	o.CalculatedFee = &v
}

// GetFeeName returns the FeeName field value if set, zero value otherwise.
func (o *TotalFeeBreakdown) GetFeeName() string {
	if o == nil || IsNil(o.FeeName) {
		var ret string
		return ret
	}
	return *o.FeeName
}

// GetFeeNameOk returns a tuple with the FeeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TotalFeeBreakdown) GetFeeNameOk() (*string, bool) {
	if o == nil || IsNil(o.FeeName) {
		return nil, false
	}
	return o.FeeName, true
}

// HasFeeName returns a boolean if a field has been set.
func (o *TotalFeeBreakdown) HasFeeName() bool {
	if o != nil && !IsNil(o.FeeName) {
		return true
	}

	return false
}

// SetFeeName gets a reference to the given string and assigns it to the FeeName field.
func (o *TotalFeeBreakdown) SetFeeName(v string) {
	o.FeeName = &v
}

// GetFeeDescription returns the FeeDescription field value if set, zero value otherwise.
func (o *TotalFeeBreakdown) GetFeeDescription() string {
	if o == nil || IsNil(o.FeeDescription) {
		var ret string
		return ret
	}
	return *o.FeeDescription
}

// GetFeeDescriptionOk returns a tuple with the FeeDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TotalFeeBreakdown) GetFeeDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.FeeDescription) {
		return nil, false
	}
	return o.FeeDescription, true
}

// HasFeeDescription returns a boolean if a field has been set.
func (o *TotalFeeBreakdown) HasFeeDescription() bool {
	if o != nil && !IsNil(o.FeeDescription) {
		return true
	}

	return false
}

// SetFeeDescription gets a reference to the given string and assigns it to the FeeDescription field.
func (o *TotalFeeBreakdown) SetFeeDescription(v string) {
	o.FeeDescription = &v
}

func (o TotalFeeBreakdown) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TotalFeeBreakdown) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CalculatedFee) {
		toSerialize["calculatedFee"] = o.CalculatedFee
	}
	if !IsNil(o.FeeName) {
		toSerialize["feeName"] = o.FeeName
	}
	if !IsNil(o.FeeDescription) {
		toSerialize["feeDescription"] = o.FeeDescription
	}
	return toSerialize, nil
}

type NullableTotalFeeBreakdown struct {
	value *TotalFeeBreakdown
	isSet bool
}

func (v NullableTotalFeeBreakdown) Get() *TotalFeeBreakdown {
	return v.value
}

func (v *NullableTotalFeeBreakdown) Set(val *TotalFeeBreakdown) {
	v.value = val
	v.isSet = true
}

func (v NullableTotalFeeBreakdown) IsSet() bool {
	return v.isSet
}

func (v *NullableTotalFeeBreakdown) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTotalFeeBreakdown(val *TotalFeeBreakdown) *NullableTotalFeeBreakdown {
	return &NullableTotalFeeBreakdown{value: val, isSet: true}
}

func (v NullableTotalFeeBreakdown) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTotalFeeBreakdown) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


