/*
Payments Direct API

Use the Payments Direct API to get quotes, create and manage payments, and manage originator and beneficiary identities.  ## API environments  The Payments Direct API offers the following environments:  | <div style=\"width:90px\">Environment</div>  | Base URL                      | Description                               | | ------------------------------------------ | ----------------------------- | ----------------------------------------- | | Test                                       | `https://api.test.ripple.com` | Test environment with simulated currency. | | Production                                 | `https://api.ripple.com`      | Production environment                    |  ## API authentication  All {{process.env.VAR_RPD}} API operations require a Bearer access token specific to the environment you're using. Ripple provides a secure model for authentication and authorization by providing access tokens scoped for a set of credentials.  ### Generate client ID and client secret  You will need your _client ID_ and _client secret_ to obtain an access token.  If you do not already have your client ID and client secret, do the following:  1. Log into the Ripple Payments UI. 2. In the left navigation menu, click **Settings**. 3. Under **Administration**, click **API Credentials**. 4. In the dropdown list next to the page title, select the access environment. For example, to provision credentials for the test environment, select **Test** from the dropdown list. 5. In the upper right corner of the page, click **New Credential**. 6. Click **Save and Generate Key**.  **Caution:** The *client secret* is displayed only once when you are creating new credentials. You cannot retrieve the secret after exiting this page. Copy and store the client secret securely and share it with authorized individuals in accordance with your organization's security policy.  You can now use the client ID and client secret to generate access tokens using the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation.  ### Request an access token  To get an access token, use the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation with your `client_id` and `client_secret`. The response contains a token in the `access_token` field.  We recommend rotating your API credentials at regular intervals according to your organization's security policy.  **Note**: Authentication tokens are not a fixed length and can vary, avoid validating tokens based on character length. 

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paymentsdirect

import (
	"encoding/json"
	"time"
)

// checks if the PaymentFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentFilter{}

// PaymentFilter Filter criteria to return desired payment search results.
type PaymentFilter struct {
	// Specify a list of uuids to search for payment with payment ids equals one from the list
	PaymentIds []string `json:"paymentIds,omitempty"`
	// Array of payment states like `EXECUTING` or `COMPLETED`.
	PaymentStates []PaymentState `json:"paymentStates,omitempty"`
	FilterRangeType *PaymentFilterRangeType `json:"filterRangeType,omitempty"`
	// Depending on the value of the `filterRangeType` field, this timestamp returns a list of payments that were created/modified/expired at or before the specified time.
	BeforeTimestamp *time.Time `json:"beforeTimestamp,omitempty"`
	// Depending on the value of the `filterRangeType` field, this timestamp returns a list of payments that were created/modified/expired at or after the specified time.
	AfterTimestamp *time.Time `json:"afterTimestamp,omitempty"`
	// To get all payments made to one or more beneficiaries, specify the identity ID(s) of those beneficiaries in this field. You can find the identity ID using the `GET /identities` operation.
	BeneficiaryIdentityIds []string `json:"beneficiaryIdentityIds,omitempty"`
	// Specify an `internalId` to get payments associated with them. A prefix match will be executed.
	InternalId *string `json:"internalId,omitempty"`
	// To get all payments made to a beneficiary, specify the nickname of that beneficiary in this field. You can find the nickname using the `GET /identities` operation.
	BeneficiaryIdentityNickname *string `json:"beneficiaryIdentityNickname,omitempty"`
	// Specify one or more currency codes to get payments where the beneficiary received funds in these currencies.
	DestinationCurrencies []string `json:"destinationCurrencies,omitempty"`
	// List of labels associated with the payment. A label typically contains a UUID of your choice, designated as the batchId.
	PaymentLabels []string `json:"paymentLabels,omitempty"`
}

// NewPaymentFilter instantiates a new PaymentFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentFilter() *PaymentFilter {
	this := PaymentFilter{}
	return &this
}

// NewPaymentFilterWithDefaults instantiates a new PaymentFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentFilterWithDefaults() *PaymentFilter {
	this := PaymentFilter{}
	return &this
}

// GetPaymentIds returns the PaymentIds field value if set, zero value otherwise.
func (o *PaymentFilter) GetPaymentIds() []string {
	if o == nil || IsNil(o.PaymentIds) {
		var ret []string
		return ret
	}
	return o.PaymentIds
}

// GetPaymentIdsOk returns a tuple with the PaymentIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentFilter) GetPaymentIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.PaymentIds) {
		return nil, false
	}
	return o.PaymentIds, true
}

// HasPaymentIds returns a boolean if a field has been set.
func (o *PaymentFilter) HasPaymentIds() bool {
	if o != nil && !IsNil(o.PaymentIds) {
		return true
	}

	return false
}

// SetPaymentIds gets a reference to the given []string and assigns it to the PaymentIds field.
func (o *PaymentFilter) SetPaymentIds(v []string) {
	o.PaymentIds = v
}

// GetPaymentStates returns the PaymentStates field value if set, zero value otherwise.
func (o *PaymentFilter) GetPaymentStates() []PaymentState {
	if o == nil || IsNil(o.PaymentStates) {
		var ret []PaymentState
		return ret
	}
	return o.PaymentStates
}

// GetPaymentStatesOk returns a tuple with the PaymentStates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentFilter) GetPaymentStatesOk() ([]PaymentState, bool) {
	if o == nil || IsNil(o.PaymentStates) {
		return nil, false
	}
	return o.PaymentStates, true
}

// HasPaymentStates returns a boolean if a field has been set.
func (o *PaymentFilter) HasPaymentStates() bool {
	if o != nil && !IsNil(o.PaymentStates) {
		return true
	}

	return false
}

// SetPaymentStates gets a reference to the given []PaymentState and assigns it to the PaymentStates field.
func (o *PaymentFilter) SetPaymentStates(v []PaymentState) {
	o.PaymentStates = v
}

// GetFilterRangeType returns the FilterRangeType field value if set, zero value otherwise.
func (o *PaymentFilter) GetFilterRangeType() PaymentFilterRangeType {
	if o == nil || IsNil(o.FilterRangeType) {
		var ret PaymentFilterRangeType
		return ret
	}
	return *o.FilterRangeType
}

// GetFilterRangeTypeOk returns a tuple with the FilterRangeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentFilter) GetFilterRangeTypeOk() (*PaymentFilterRangeType, bool) {
	if o == nil || IsNil(o.FilterRangeType) {
		return nil, false
	}
	return o.FilterRangeType, true
}

// HasFilterRangeType returns a boolean if a field has been set.
func (o *PaymentFilter) HasFilterRangeType() bool {
	if o != nil && !IsNil(o.FilterRangeType) {
		return true
	}

	return false
}

// SetFilterRangeType gets a reference to the given PaymentFilterRangeType and assigns it to the FilterRangeType field.
func (o *PaymentFilter) SetFilterRangeType(v PaymentFilterRangeType) {
	o.FilterRangeType = &v
}

// GetBeforeTimestamp returns the BeforeTimestamp field value if set, zero value otherwise.
func (o *PaymentFilter) GetBeforeTimestamp() time.Time {
	if o == nil || IsNil(o.BeforeTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.BeforeTimestamp
}

// GetBeforeTimestampOk returns a tuple with the BeforeTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentFilter) GetBeforeTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.BeforeTimestamp) {
		return nil, false
	}
	return o.BeforeTimestamp, true
}

// HasBeforeTimestamp returns a boolean if a field has been set.
func (o *PaymentFilter) HasBeforeTimestamp() bool {
	if o != nil && !IsNil(o.BeforeTimestamp) {
		return true
	}

	return false
}

// SetBeforeTimestamp gets a reference to the given time.Time and assigns it to the BeforeTimestamp field.
func (o *PaymentFilter) SetBeforeTimestamp(v time.Time) {
	o.BeforeTimestamp = &v
}

// GetAfterTimestamp returns the AfterTimestamp field value if set, zero value otherwise.
func (o *PaymentFilter) GetAfterTimestamp() time.Time {
	if o == nil || IsNil(o.AfterTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.AfterTimestamp
}

// GetAfterTimestampOk returns a tuple with the AfterTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentFilter) GetAfterTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.AfterTimestamp) {
		return nil, false
	}
	return o.AfterTimestamp, true
}

// HasAfterTimestamp returns a boolean if a field has been set.
func (o *PaymentFilter) HasAfterTimestamp() bool {
	if o != nil && !IsNil(o.AfterTimestamp) {
		return true
	}

	return false
}

// SetAfterTimestamp gets a reference to the given time.Time and assigns it to the AfterTimestamp field.
func (o *PaymentFilter) SetAfterTimestamp(v time.Time) {
	o.AfterTimestamp = &v
}

// GetBeneficiaryIdentityIds returns the BeneficiaryIdentityIds field value if set, zero value otherwise.
func (o *PaymentFilter) GetBeneficiaryIdentityIds() []string {
	if o == nil || IsNil(o.BeneficiaryIdentityIds) {
		var ret []string
		return ret
	}
	return o.BeneficiaryIdentityIds
}

// GetBeneficiaryIdentityIdsOk returns a tuple with the BeneficiaryIdentityIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentFilter) GetBeneficiaryIdentityIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.BeneficiaryIdentityIds) {
		return nil, false
	}
	return o.BeneficiaryIdentityIds, true
}

// HasBeneficiaryIdentityIds returns a boolean if a field has been set.
func (o *PaymentFilter) HasBeneficiaryIdentityIds() bool {
	if o != nil && !IsNil(o.BeneficiaryIdentityIds) {
		return true
	}

	return false
}

// SetBeneficiaryIdentityIds gets a reference to the given []string and assigns it to the BeneficiaryIdentityIds field.
func (o *PaymentFilter) SetBeneficiaryIdentityIds(v []string) {
	o.BeneficiaryIdentityIds = v
}

// GetInternalId returns the InternalId field value if set, zero value otherwise.
func (o *PaymentFilter) GetInternalId() string {
	if o == nil || IsNil(o.InternalId) {
		var ret string
		return ret
	}
	return *o.InternalId
}

// GetInternalIdOk returns a tuple with the InternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentFilter) GetInternalIdOk() (*string, bool) {
	if o == nil || IsNil(o.InternalId) {
		return nil, false
	}
	return o.InternalId, true
}

// HasInternalId returns a boolean if a field has been set.
func (o *PaymentFilter) HasInternalId() bool {
	if o != nil && !IsNil(o.InternalId) {
		return true
	}

	return false
}

// SetInternalId gets a reference to the given string and assigns it to the InternalId field.
func (o *PaymentFilter) SetInternalId(v string) {
	o.InternalId = &v
}

// GetBeneficiaryIdentityNickname returns the BeneficiaryIdentityNickname field value if set, zero value otherwise.
func (o *PaymentFilter) GetBeneficiaryIdentityNickname() string {
	if o == nil || IsNil(o.BeneficiaryIdentityNickname) {
		var ret string
		return ret
	}
	return *o.BeneficiaryIdentityNickname
}

// GetBeneficiaryIdentityNicknameOk returns a tuple with the BeneficiaryIdentityNickname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentFilter) GetBeneficiaryIdentityNicknameOk() (*string, bool) {
	if o == nil || IsNil(o.BeneficiaryIdentityNickname) {
		return nil, false
	}
	return o.BeneficiaryIdentityNickname, true
}

// HasBeneficiaryIdentityNickname returns a boolean if a field has been set.
func (o *PaymentFilter) HasBeneficiaryIdentityNickname() bool {
	if o != nil && !IsNil(o.BeneficiaryIdentityNickname) {
		return true
	}

	return false
}

// SetBeneficiaryIdentityNickname gets a reference to the given string and assigns it to the BeneficiaryIdentityNickname field.
func (o *PaymentFilter) SetBeneficiaryIdentityNickname(v string) {
	o.BeneficiaryIdentityNickname = &v
}

// GetDestinationCurrencies returns the DestinationCurrencies field value if set, zero value otherwise.
func (o *PaymentFilter) GetDestinationCurrencies() []string {
	if o == nil || IsNil(o.DestinationCurrencies) {
		var ret []string
		return ret
	}
	return o.DestinationCurrencies
}

// GetDestinationCurrenciesOk returns a tuple with the DestinationCurrencies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentFilter) GetDestinationCurrenciesOk() ([]string, bool) {
	if o == nil || IsNil(o.DestinationCurrencies) {
		return nil, false
	}
	return o.DestinationCurrencies, true
}

// HasDestinationCurrencies returns a boolean if a field has been set.
func (o *PaymentFilter) HasDestinationCurrencies() bool {
	if o != nil && !IsNil(o.DestinationCurrencies) {
		return true
	}

	return false
}

// SetDestinationCurrencies gets a reference to the given []string and assigns it to the DestinationCurrencies field.
func (o *PaymentFilter) SetDestinationCurrencies(v []string) {
	o.DestinationCurrencies = v
}

// GetPaymentLabels returns the PaymentLabels field value if set, zero value otherwise.
func (o *PaymentFilter) GetPaymentLabels() []string {
	if o == nil || IsNil(o.PaymentLabels) {
		var ret []string
		return ret
	}
	return o.PaymentLabels
}

// GetPaymentLabelsOk returns a tuple with the PaymentLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentFilter) GetPaymentLabelsOk() ([]string, bool) {
	if o == nil || IsNil(o.PaymentLabels) {
		return nil, false
	}
	return o.PaymentLabels, true
}

// HasPaymentLabels returns a boolean if a field has been set.
func (o *PaymentFilter) HasPaymentLabels() bool {
	if o != nil && !IsNil(o.PaymentLabels) {
		return true
	}

	return false
}

// SetPaymentLabels gets a reference to the given []string and assigns it to the PaymentLabels field.
func (o *PaymentFilter) SetPaymentLabels(v []string) {
	o.PaymentLabels = v
}

func (o PaymentFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PaymentIds) {
		toSerialize["paymentIds"] = o.PaymentIds
	}
	if !IsNil(o.PaymentStates) {
		toSerialize["paymentStates"] = o.PaymentStates
	}
	if !IsNil(o.FilterRangeType) {
		toSerialize["filterRangeType"] = o.FilterRangeType
	}
	if !IsNil(o.BeforeTimestamp) {
		toSerialize["beforeTimestamp"] = o.BeforeTimestamp
	}
	if !IsNil(o.AfterTimestamp) {
		toSerialize["afterTimestamp"] = o.AfterTimestamp
	}
	if !IsNil(o.BeneficiaryIdentityIds) {
		toSerialize["beneficiaryIdentityIds"] = o.BeneficiaryIdentityIds
	}
	if !IsNil(o.InternalId) {
		toSerialize["internalId"] = o.InternalId
	}
	if !IsNil(o.BeneficiaryIdentityNickname) {
		toSerialize["beneficiaryIdentityNickname"] = o.BeneficiaryIdentityNickname
	}
	if !IsNil(o.DestinationCurrencies) {
		toSerialize["destinationCurrencies"] = o.DestinationCurrencies
	}
	if !IsNil(o.PaymentLabels) {
		toSerialize["paymentLabels"] = o.PaymentLabels
	}
	return toSerialize, nil
}

type NullablePaymentFilter struct {
	value *PaymentFilter
	isSet bool
}

func (v NullablePaymentFilter) Get() *PaymentFilter {
	return v.value
}

func (v *NullablePaymentFilter) Set(val *PaymentFilter) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentFilter) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentFilter(val *PaymentFilter) *NullablePaymentFilter {
	return &NullablePaymentFilter{value: val, isSet: true}
}

func (v NullablePaymentFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


