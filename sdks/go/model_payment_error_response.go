/*
Payments Direct API

Use the Payments Direct API to get quotes, create and manage payments, and manage originator and beneficiary identities.  ## API environments  The Payments Direct API offers the following environments:  | <div style=\"width:90px\">Environment</div>  | Base URL                      | Description                               | | ------------------------------------------ | ----------------------------- | ----------------------------------------- | | Test                                       | `https://api.test.ripple.com` | Test environment with simulated currency. | | Production                                 | `https://api.ripple.com`      | Production environment                    |  ## API authentication  All {{process.env.VAR_RPD}} API operations require a Bearer access token specific to the environment you're using. Ripple provides a secure model for authentication and authorization by providing access tokens scoped for a set of credentials.  ### Generate client ID and client secret  You will need your _client ID_ and _client secret_ to obtain an access token.  If you do not already have your client ID and client secret, do the following:  1. Log into the Ripple Payments UI. 2. In the left navigation menu, click **Settings**. 3. Under **Administration**, click **API Credentials**. 4. In the dropdown list next to the page title, select the access environment. For example, to provision credentials for the test environment, select **Test** from the dropdown list. 5. In the upper right corner of the page, click **New Credential**. 6. Click **Save and Generate Key**.  **Caution:** The *client secret* is displayed only once when you are creating new credentials. You cannot retrieve the secret after exiting this page. Copy and store the client secret securely and share it with authorized individuals in accordance with your organization's security policy.  You can now use the client ID and client secret to generate access tokens using the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation.  ### Request an access token  To get an access token, use the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation with your `client_id` and `client_secret`. The response contains a token in the `access_token` field.  We recommend rotating your API credentials at regular intervals according to your organization's security policy.  **Note**: Authentication tokens are not a fixed length and can vary, avoid validating tokens based on character length. 

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paymentsdirect

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PaymentErrorResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentErrorResponse{}

// PaymentErrorResponse struct for PaymentErrorResponse
type PaymentErrorResponse struct {
	Errors PaymentError `json:"errors"`
	// Error Response Status
	Status string `json:"status"`
}

type _PaymentErrorResponse PaymentErrorResponse

// NewPaymentErrorResponse instantiates a new PaymentErrorResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentErrorResponse(errors PaymentError, status string) *PaymentErrorResponse {
	this := PaymentErrorResponse{}
	this.Errors = errors
	this.Status = status
	return &this
}

// NewPaymentErrorResponseWithDefaults instantiates a new PaymentErrorResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentErrorResponseWithDefaults() *PaymentErrorResponse {
	this := PaymentErrorResponse{}
	return &this
}

// GetErrors returns the Errors field value
func (o *PaymentErrorResponse) GetErrors() PaymentError {
	if o == nil {
		var ret PaymentError
		return ret
	}

	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value
// and a boolean to check if the value has been set.
func (o *PaymentErrorResponse) GetErrorsOk() (*PaymentError, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Errors, true
}

// SetErrors sets field value
func (o *PaymentErrorResponse) SetErrors(v PaymentError) {
	o.Errors = v
}

// GetStatus returns the Status field value
func (o *PaymentErrorResponse) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *PaymentErrorResponse) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *PaymentErrorResponse) SetStatus(v string) {
	o.Status = v
}

func (o PaymentErrorResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentErrorResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["errors"] = o.Errors
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *PaymentErrorResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"errors",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPaymentErrorResponse := _PaymentErrorResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPaymentErrorResponse)

	if err != nil {
		return err
	}

	*o = PaymentErrorResponse(varPaymentErrorResponse)

	return err
}

type NullablePaymentErrorResponse struct {
	value *PaymentErrorResponse
	isSet bool
}

func (v NullablePaymentErrorResponse) Get() *PaymentErrorResponse {
	return v.value
}

func (v *NullablePaymentErrorResponse) Set(val *PaymentErrorResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentErrorResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentErrorResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentErrorResponse(val *PaymentErrorResponse) *NullablePaymentErrorResponse {
	return &NullablePaymentErrorResponse{value: val, isSet: true}
}

func (v NullablePaymentErrorResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentErrorResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


