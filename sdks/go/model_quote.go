/*
Payments Direct API

Use the Payments Direct API to get quotes, create and manage payments, and manage originator and beneficiary identities.  ## API environments  The Payments Direct API offers the following environments:  | <div style=\"width:90px\">Environment</div>  | Base URL                      | Description                               | | ------------------------------------------ | ----------------------------- | ----------------------------------------- | | Test                                       | `https://api.test.ripple.com` | Test environment with simulated currency. | | Production                                 | `https://api.ripple.com`      | Production environment                    |  ## API authentication  All {{process.env.VAR_RPD}} API operations require a Bearer access token specific to the environment you're using. Ripple provides a secure model for authentication and authorization by providing access tokens scoped for a set of credentials.  ### Generate client ID and client secret  You will need your _client ID_ and _client secret_ to obtain an access token.  If you do not already have your client ID and client secret, do the following:  1. Log into the Ripple Payments UI. 2. In the left navigation menu, click **Settings**. 3. Under **Administration**, click **API Credentials**. 4. In the dropdown list next to the page title, select the access environment. For example, to provision credentials for the test environment, select **Test** from the dropdown list. 5. In the upper right corner of the page, click **New Credential**. 6. Click **Save and Generate Key**.  **Caution:** The *client secret* is displayed only once when you are creating new credentials. You cannot retrieve the secret after exiting this page. Copy and store the client secret securely and share it with authorized individuals in accordance with your organization's security policy.  You can now use the client ID and client secret to generate access tokens using the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation.  ### Request an access token  To get an access token, use the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation with your `client_id` and `client_secret`. The response contains a token in the `access_token` field.  We recommend rotating your API credentials at regular intervals according to your organization's security policy.  **Note**: Authentication tokens are not a fixed length and can vary, avoid validating tokens based on character length. 

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paymentsdirect

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Quote type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Quote{}

// Quote struct for Quote
type Quote struct {
	// Unique ID that represents this quote.
	QuoteId string `json:"quoteId"`
	QuoteStatus QuoteStatus `json:"quoteStatus"`
	QuoteAmountType *QuoteAmountType `json:"quoteAmountType,omitempty"`
	// Amount to be sent by the originator.
	SourceAmount *float64 `json:"sourceAmount,omitempty"`
	// Amount to be received by destination
	DestinationAmount *float64 `json:"destinationAmount,omitempty"`
	// The currency code of the currency that you are sending.
	SourceCurrency string `json:"sourceCurrency" validate:"regexp=^[a-zA-Z]{3,5}$"`
	// The currency code of the currency in which your beneficiary will receive this payment.
	DestinationCurrency string `json:"destinationCurrency" validate:"regexp=^[a-zA-Z]{3,5}$"`
	// The country where the payment originator is located or incorporated, specified in Alpha-2 Code format as defined in the ISO CountryCode ISO 3166-1 list.
	SourceCountry *string `json:"sourceCountry,omitempty" validate:"regexp=^[a-zA-Z]{2}$"`
	// The country code to which you wish to send the funds. It follows ISO 3166-1 alpha-2 code
	DestinationCountry *string `json:"destinationCountry,omitempty" validate:"regexp=^[a-zA-Z]{2}$"`
	// Name of the payout category specified in the quote request.
	PayoutCategory string `json:"payoutCategory"`
	// The name of payin category specified in the quote request.
	PayinCategory string `json:"payinCategory"`
	AdjustedExchangeRate *AdjustedExchangeRate `json:"adjustedExchangeRate,omitempty"`
	// A summary of fees included in this quote.
	Fees []FeeSummary `json:"fees,omitempty"`
	// The time when this quote was created, specified in UTC.
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// The time when this quote expires, specified in UTC.
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`
	// The name of the blockchain network on which the beneficiary will receive this payment.
	DestinationBlockchainNetwork *string `json:"destinationBlockchainNetwork,omitempty"`
}

type _Quote Quote

// NewQuote instantiates a new Quote object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuote(quoteId string, quoteStatus QuoteStatus, sourceCurrency string, destinationCurrency string, payoutCategory string, payinCategory string) *Quote {
	this := Quote{}
	this.QuoteId = quoteId
	this.QuoteStatus = quoteStatus
	var quoteAmountType QuoteAmountType = QUOTEAMOUNTTYPE_SOURCE_AMOUNT
	this.QuoteAmountType = &quoteAmountType
	this.SourceCurrency = sourceCurrency
	this.DestinationCurrency = destinationCurrency
	this.PayoutCategory = payoutCategory
	this.PayinCategory = payinCategory
	return &this
}

// NewQuoteWithDefaults instantiates a new Quote object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuoteWithDefaults() *Quote {
	this := Quote{}
	var quoteAmountType QuoteAmountType = QUOTEAMOUNTTYPE_SOURCE_AMOUNT
	this.QuoteAmountType = &quoteAmountType
	return &this
}

// GetQuoteId returns the QuoteId field value
func (o *Quote) GetQuoteId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QuoteId
}

// GetQuoteIdOk returns a tuple with the QuoteId field value
// and a boolean to check if the value has been set.
func (o *Quote) GetQuoteIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QuoteId, true
}

// SetQuoteId sets field value
func (o *Quote) SetQuoteId(v string) {
	o.QuoteId = v
}

// GetQuoteStatus returns the QuoteStatus field value
func (o *Quote) GetQuoteStatus() QuoteStatus {
	if o == nil {
		var ret QuoteStatus
		return ret
	}

	return o.QuoteStatus
}

// GetQuoteStatusOk returns a tuple with the QuoteStatus field value
// and a boolean to check if the value has been set.
func (o *Quote) GetQuoteStatusOk() (*QuoteStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QuoteStatus, true
}

// SetQuoteStatus sets field value
func (o *Quote) SetQuoteStatus(v QuoteStatus) {
	o.QuoteStatus = v
}

// GetQuoteAmountType returns the QuoteAmountType field value if set, zero value otherwise.
func (o *Quote) GetQuoteAmountType() QuoteAmountType {
	if o == nil || IsNil(o.QuoteAmountType) {
		var ret QuoteAmountType
		return ret
	}
	return *o.QuoteAmountType
}

// GetQuoteAmountTypeOk returns a tuple with the QuoteAmountType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetQuoteAmountTypeOk() (*QuoteAmountType, bool) {
	if o == nil || IsNil(o.QuoteAmountType) {
		return nil, false
	}
	return o.QuoteAmountType, true
}

// HasQuoteAmountType returns a boolean if a field has been set.
func (o *Quote) HasQuoteAmountType() bool {
	if o != nil && !IsNil(o.QuoteAmountType) {
		return true
	}

	return false
}

// SetQuoteAmountType gets a reference to the given QuoteAmountType and assigns it to the QuoteAmountType field.
func (o *Quote) SetQuoteAmountType(v QuoteAmountType) {
	o.QuoteAmountType = &v
}

// GetSourceAmount returns the SourceAmount field value if set, zero value otherwise.
func (o *Quote) GetSourceAmount() float64 {
	if o == nil || IsNil(o.SourceAmount) {
		var ret float64
		return ret
	}
	return *o.SourceAmount
}

// GetSourceAmountOk returns a tuple with the SourceAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetSourceAmountOk() (*float64, bool) {
	if o == nil || IsNil(o.SourceAmount) {
		return nil, false
	}
	return o.SourceAmount, true
}

// HasSourceAmount returns a boolean if a field has been set.
func (o *Quote) HasSourceAmount() bool {
	if o != nil && !IsNil(o.SourceAmount) {
		return true
	}

	return false
}

// SetSourceAmount gets a reference to the given float64 and assigns it to the SourceAmount field.
func (o *Quote) SetSourceAmount(v float64) {
	o.SourceAmount = &v
}

// GetDestinationAmount returns the DestinationAmount field value if set, zero value otherwise.
func (o *Quote) GetDestinationAmount() float64 {
	if o == nil || IsNil(o.DestinationAmount) {
		var ret float64
		return ret
	}
	return *o.DestinationAmount
}

// GetDestinationAmountOk returns a tuple with the DestinationAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetDestinationAmountOk() (*float64, bool) {
	if o == nil || IsNil(o.DestinationAmount) {
		return nil, false
	}
	return o.DestinationAmount, true
}

// HasDestinationAmount returns a boolean if a field has been set.
func (o *Quote) HasDestinationAmount() bool {
	if o != nil && !IsNil(o.DestinationAmount) {
		return true
	}

	return false
}

// SetDestinationAmount gets a reference to the given float64 and assigns it to the DestinationAmount field.
func (o *Quote) SetDestinationAmount(v float64) {
	o.DestinationAmount = &v
}

// GetSourceCurrency returns the SourceCurrency field value
func (o *Quote) GetSourceCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceCurrency
}

// GetSourceCurrencyOk returns a tuple with the SourceCurrency field value
// and a boolean to check if the value has been set.
func (o *Quote) GetSourceCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceCurrency, true
}

// SetSourceCurrency sets field value
func (o *Quote) SetSourceCurrency(v string) {
	o.SourceCurrency = v
}

// GetDestinationCurrency returns the DestinationCurrency field value
func (o *Quote) GetDestinationCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DestinationCurrency
}

// GetDestinationCurrencyOk returns a tuple with the DestinationCurrency field value
// and a boolean to check if the value has been set.
func (o *Quote) GetDestinationCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DestinationCurrency, true
}

// SetDestinationCurrency sets field value
func (o *Quote) SetDestinationCurrency(v string) {
	o.DestinationCurrency = v
}

// GetSourceCountry returns the SourceCountry field value if set, zero value otherwise.
func (o *Quote) GetSourceCountry() string {
	if o == nil || IsNil(o.SourceCountry) {
		var ret string
		return ret
	}
	return *o.SourceCountry
}

// GetSourceCountryOk returns a tuple with the SourceCountry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetSourceCountryOk() (*string, bool) {
	if o == nil || IsNil(o.SourceCountry) {
		return nil, false
	}
	return o.SourceCountry, true
}

// HasSourceCountry returns a boolean if a field has been set.
func (o *Quote) HasSourceCountry() bool {
	if o != nil && !IsNil(o.SourceCountry) {
		return true
	}

	return false
}

// SetSourceCountry gets a reference to the given string and assigns it to the SourceCountry field.
func (o *Quote) SetSourceCountry(v string) {
	o.SourceCountry = &v
}

// GetDestinationCountry returns the DestinationCountry field value if set, zero value otherwise.
func (o *Quote) GetDestinationCountry() string {
	if o == nil || IsNil(o.DestinationCountry) {
		var ret string
		return ret
	}
	return *o.DestinationCountry
}

// GetDestinationCountryOk returns a tuple with the DestinationCountry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetDestinationCountryOk() (*string, bool) {
	if o == nil || IsNil(o.DestinationCountry) {
		return nil, false
	}
	return o.DestinationCountry, true
}

// HasDestinationCountry returns a boolean if a field has been set.
func (o *Quote) HasDestinationCountry() bool {
	if o != nil && !IsNil(o.DestinationCountry) {
		return true
	}

	return false
}

// SetDestinationCountry gets a reference to the given string and assigns it to the DestinationCountry field.
func (o *Quote) SetDestinationCountry(v string) {
	o.DestinationCountry = &v
}

// GetPayoutCategory returns the PayoutCategory field value
func (o *Quote) GetPayoutCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PayoutCategory
}

// GetPayoutCategoryOk returns a tuple with the PayoutCategory field value
// and a boolean to check if the value has been set.
func (o *Quote) GetPayoutCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PayoutCategory, true
}

// SetPayoutCategory sets field value
func (o *Quote) SetPayoutCategory(v string) {
	o.PayoutCategory = v
}

// GetPayinCategory returns the PayinCategory field value
func (o *Quote) GetPayinCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PayinCategory
}

// GetPayinCategoryOk returns a tuple with the PayinCategory field value
// and a boolean to check if the value has been set.
func (o *Quote) GetPayinCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PayinCategory, true
}

// SetPayinCategory sets field value
func (o *Quote) SetPayinCategory(v string) {
	o.PayinCategory = v
}

// GetAdjustedExchangeRate returns the AdjustedExchangeRate field value if set, zero value otherwise.
func (o *Quote) GetAdjustedExchangeRate() AdjustedExchangeRate {
	if o == nil || IsNil(o.AdjustedExchangeRate) {
		var ret AdjustedExchangeRate
		return ret
	}
	return *o.AdjustedExchangeRate
}

// GetAdjustedExchangeRateOk returns a tuple with the AdjustedExchangeRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetAdjustedExchangeRateOk() (*AdjustedExchangeRate, bool) {
	if o == nil || IsNil(o.AdjustedExchangeRate) {
		return nil, false
	}
	return o.AdjustedExchangeRate, true
}

// HasAdjustedExchangeRate returns a boolean if a field has been set.
func (o *Quote) HasAdjustedExchangeRate() bool {
	if o != nil && !IsNil(o.AdjustedExchangeRate) {
		return true
	}

	return false
}

// SetAdjustedExchangeRate gets a reference to the given AdjustedExchangeRate and assigns it to the AdjustedExchangeRate field.
func (o *Quote) SetAdjustedExchangeRate(v AdjustedExchangeRate) {
	o.AdjustedExchangeRate = &v
}

// GetFees returns the Fees field value if set, zero value otherwise.
func (o *Quote) GetFees() []FeeSummary {
	if o == nil || IsNil(o.Fees) {
		var ret []FeeSummary
		return ret
	}
	return o.Fees
}

// GetFeesOk returns a tuple with the Fees field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetFeesOk() ([]FeeSummary, bool) {
	if o == nil || IsNil(o.Fees) {
		return nil, false
	}
	return o.Fees, true
}

// HasFees returns a boolean if a field has been set.
func (o *Quote) HasFees() bool {
	if o != nil && !IsNil(o.Fees) {
		return true
	}

	return false
}

// SetFees gets a reference to the given []FeeSummary and assigns it to the Fees field.
func (o *Quote) SetFees(v []FeeSummary) {
	o.Fees = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Quote) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Quote) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Quote) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *Quote) GetExpiresAt() time.Time {
	if o == nil || IsNil(o.ExpiresAt) {
		var ret time.Time
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpiresAt) {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *Quote) HasExpiresAt() bool {
	if o != nil && !IsNil(o.ExpiresAt) {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given time.Time and assigns it to the ExpiresAt field.
func (o *Quote) SetExpiresAt(v time.Time) {
	o.ExpiresAt = &v
}

// GetDestinationBlockchainNetwork returns the DestinationBlockchainNetwork field value if set, zero value otherwise.
func (o *Quote) GetDestinationBlockchainNetwork() string {
	if o == nil || IsNil(o.DestinationBlockchainNetwork) {
		var ret string
		return ret
	}
	return *o.DestinationBlockchainNetwork
}

// GetDestinationBlockchainNetworkOk returns a tuple with the DestinationBlockchainNetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetDestinationBlockchainNetworkOk() (*string, bool) {
	if o == nil || IsNil(o.DestinationBlockchainNetwork) {
		return nil, false
	}
	return o.DestinationBlockchainNetwork, true
}

// HasDestinationBlockchainNetwork returns a boolean if a field has been set.
func (o *Quote) HasDestinationBlockchainNetwork() bool {
	if o != nil && !IsNil(o.DestinationBlockchainNetwork) {
		return true
	}

	return false
}

// SetDestinationBlockchainNetwork gets a reference to the given string and assigns it to the DestinationBlockchainNetwork field.
func (o *Quote) SetDestinationBlockchainNetwork(v string) {
	o.DestinationBlockchainNetwork = &v
}

func (o Quote) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Quote) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["quoteId"] = o.QuoteId
	toSerialize["quoteStatus"] = o.QuoteStatus
	if !IsNil(o.QuoteAmountType) {
		toSerialize["quoteAmountType"] = o.QuoteAmountType
	}
	if !IsNil(o.SourceAmount) {
		toSerialize["sourceAmount"] = o.SourceAmount
	}
	if !IsNil(o.DestinationAmount) {
		toSerialize["destinationAmount"] = o.DestinationAmount
	}
	toSerialize["sourceCurrency"] = o.SourceCurrency
	toSerialize["destinationCurrency"] = o.DestinationCurrency
	if !IsNil(o.SourceCountry) {
		toSerialize["sourceCountry"] = o.SourceCountry
	}
	if !IsNil(o.DestinationCountry) {
		toSerialize["destinationCountry"] = o.DestinationCountry
	}
	toSerialize["payoutCategory"] = o.PayoutCategory
	toSerialize["payinCategory"] = o.PayinCategory
	if !IsNil(o.AdjustedExchangeRate) {
		toSerialize["adjustedExchangeRate"] = o.AdjustedExchangeRate
	}
	if !IsNil(o.Fees) {
		toSerialize["fees"] = o.Fees
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.ExpiresAt) {
		toSerialize["expiresAt"] = o.ExpiresAt
	}
	if !IsNil(o.DestinationBlockchainNetwork) {
		toSerialize["destinationBlockchainNetwork"] = o.DestinationBlockchainNetwork
	}
	return toSerialize, nil
}

func (o *Quote) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"quoteId",
		"quoteStatus",
		"sourceCurrency",
		"destinationCurrency",
		"payoutCategory",
		"payinCategory",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQuote := _Quote{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQuote)

	if err != nil {
		return err
	}

	*o = Quote(varQuote)

	return err
}

type NullableQuote struct {
	value *Quote
	isSet bool
}

func (v NullableQuote) Get() *Quote {
	return v.value
}

func (v *NullableQuote) Set(val *Quote) {
	v.value = val
	v.isSet = true
}

func (v NullableQuote) IsSet() bool {
	return v.isSet
}

func (v *NullableQuote) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuote(val *Quote) *NullableQuote {
	return &NullableQuote{value: val, isSet: true}
}

func (v NullableQuote) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuote) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


