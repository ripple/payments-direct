/*
Payments Direct API

Use the Payments Direct API to get quotes, create and manage payments, and manage originator and beneficiary identities.  ## API environments  The Payments Direct API offers the following environments:  | <div style=\"width:90px\">Environment</div>  | Base URL                      | Description                               | | ------------------------------------------ | ----------------------------- | ----------------------------------------- | | Test                                       | `https://api.test.ripple.com` | Test environment with simulated currency. | | Production                                 | `https://api.ripple.com`      | Production environment                    |  ## API authentication  All {{process.env.VAR_RPD}} API operations require a Bearer access token specific to the environment you're using. Ripple provides a secure model for authentication and authorization by providing access tokens scoped for a set of credentials.  ### Generate client ID and client secret  You will need your _client ID_ and _client secret_ to obtain an access token.  If you do not already have your client ID and client secret, do the following:  1. Log into the Ripple Payments UI. 2. In the left navigation menu, click **Settings**. 3. Under **Administration**, click **API Credentials**. 4. In the dropdown list next to the page title, select the access environment. For example, to provision credentials for the test environment, select **Test** from the dropdown list. 5. In the upper right corner of the page, click **New Credential**. 6. Click **Save and Generate Key**.  **Caution:** The *client secret* is displayed only once when you are creating new credentials. You cannot retrieve the secret after exiting this page. Copy and store the client secret securely and share it with authorized individuals in accordance with your organization's security policy.  You can now use the client ID and client secret to generate access tokens using the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation.  ### Request an access token  To get an access token, use the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation with your `client_id` and `client_secret`. The response contains a token in the `access_token` field.  We recommend rotating your API credentials at regular intervals according to your organization's security policy.  **Note**: Authentication tokens are not a fixed length and can vary, avoid validating tokens based on character length. 

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paymentsdirect

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the IdentityV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdentityV2{}

// IdentityV2 struct for IdentityV2
type IdentityV2 struct {
	// The unique ID of the identity
	IdentityId string `json:"identityId"`
	// The nickname of the identity provided at the time of identity creation.
	NickName string `json:"nickName"`
	// The time at which the identity was created
	CreatedAt time.Time `json:"createdAt"`
	IdentityType IdentityTypeV2 `json:"identityType"`
	UseCaseType UseCaseType `json:"useCaseType"`
}

type _IdentityV2 IdentityV2

// NewIdentityV2 instantiates a new IdentityV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityV2(identityId string, nickName string, createdAt time.Time, identityType IdentityTypeV2, useCaseType UseCaseType) *IdentityV2 {
	this := IdentityV2{}
	this.IdentityId = identityId
	this.NickName = nickName
	this.CreatedAt = createdAt
	this.IdentityType = identityType
	this.UseCaseType = useCaseType
	return &this
}

// NewIdentityV2WithDefaults instantiates a new IdentityV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityV2WithDefaults() *IdentityV2 {
	this := IdentityV2{}
	return &this
}

// GetIdentityId returns the IdentityId field value
func (o *IdentityV2) GetIdentityId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IdentityId
}

// GetIdentityIdOk returns a tuple with the IdentityId field value
// and a boolean to check if the value has been set.
func (o *IdentityV2) GetIdentityIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IdentityId, true
}

// SetIdentityId sets field value
func (o *IdentityV2) SetIdentityId(v string) {
	o.IdentityId = v
}

// GetNickName returns the NickName field value
func (o *IdentityV2) GetNickName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NickName
}

// GetNickNameOk returns a tuple with the NickName field value
// and a boolean to check if the value has been set.
func (o *IdentityV2) GetNickNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NickName, true
}

// SetNickName sets field value
func (o *IdentityV2) SetNickName(v string) {
	o.NickName = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *IdentityV2) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *IdentityV2) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *IdentityV2) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetIdentityType returns the IdentityType field value
func (o *IdentityV2) GetIdentityType() IdentityTypeV2 {
	if o == nil {
		var ret IdentityTypeV2
		return ret
	}

	return o.IdentityType
}

// GetIdentityTypeOk returns a tuple with the IdentityType field value
// and a boolean to check if the value has been set.
func (o *IdentityV2) GetIdentityTypeOk() (*IdentityTypeV2, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IdentityType, true
}

// SetIdentityType sets field value
func (o *IdentityV2) SetIdentityType(v IdentityTypeV2) {
	o.IdentityType = v
}

// GetUseCaseType returns the UseCaseType field value
func (o *IdentityV2) GetUseCaseType() UseCaseType {
	if o == nil {
		var ret UseCaseType
		return ret
	}

	return o.UseCaseType
}

// GetUseCaseTypeOk returns a tuple with the UseCaseType field value
// and a boolean to check if the value has been set.
func (o *IdentityV2) GetUseCaseTypeOk() (*UseCaseType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UseCaseType, true
}

// SetUseCaseType sets field value
func (o *IdentityV2) SetUseCaseType(v UseCaseType) {
	o.UseCaseType = v
}

func (o IdentityV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdentityV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["identityId"] = o.IdentityId
	toSerialize["nickName"] = o.NickName
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["identityType"] = o.IdentityType
	toSerialize["useCaseType"] = o.UseCaseType
	return toSerialize, nil
}

func (o *IdentityV2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"identityId",
		"nickName",
		"createdAt",
		"identityType",
		"useCaseType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIdentityV2 := _IdentityV2{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIdentityV2)

	if err != nil {
		return err
	}

	*o = IdentityV2(varIdentityV2)

	return err
}

type NullableIdentityV2 struct {
	value *IdentityV2
	isSet bool
}

func (v NullableIdentityV2) Get() *IdentityV2 {
	return v.value
}

func (v *NullableIdentityV2) Set(val *IdentityV2) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityV2) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityV2(val *IdentityV2) *NullableIdentityV2 {
	return &NullableIdentityV2{value: val, isSet: true}
}

func (v NullableIdentityV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


