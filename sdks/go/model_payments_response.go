/*
Payments Direct API

Use the Payments Direct API to get quotes, create and manage payments, and manage originator and beneficiary identities.  ## API environments  The Payments Direct API offers the following environments:  | <div style=\"width:90px\">Environment</div>  | Base URL                      | Description                               | | ------------------------------------------ | ----------------------------- | ----------------------------------------- | | Test                                       | `https://api.test.ripple.com` | Test environment with simulated currency. | | Production                                 | `https://api.ripple.com`      | Production environment                    |  ## API authentication  All {{process.env.VAR_RPD}} API operations require a Bearer access token specific to the environment you're using. Ripple provides a secure model for authentication and authorization by providing access tokens scoped for a set of credentials.  ### Generate client ID and client secret  You will need your _client ID_ and _client secret_ to obtain an access token.  If you do not already have your client ID and client secret, do the following:  1. Log into the Ripple Payments UI. 2. In the left navigation menu, click **Settings**. 3. Under **Administration**, click **API Credentials**. 4. In the dropdown list next to the page title, select the access environment. For example, to provision credentials for the test environment, select **Test** from the dropdown list. 5. In the upper right corner of the page, click **New Credential**. 6. Click **Save and Generate Key**.  **Caution:** The *client secret* is displayed only once when you are creating new credentials. You cannot retrieve the secret after exiting this page. Copy and store the client secret securely and share it with authorized individuals in accordance with your organization's security policy.  You can now use the client ID and client secret to generate access tokens using the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation.  ### Request an access token  To get an access token, use the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation with your `client_id` and `client_secret`. The response contains a token in the `access_token` field.  We recommend rotating your API credentials at regular intervals according to your organization's security policy.  **Note**: Authentication tokens are not a fixed length and can vary, avoid validating tokens based on character length. 

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paymentsdirect

import (
	"encoding/json"
)

// checks if the PaymentsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentsResponse{}

// PaymentsResponse struct for PaymentsResponse
type PaymentsResponse struct {
	// Array of Payment objects
	Data []Payment `json:"data,omitempty"`
	Filter *PaymentFilter `json:"filter,omitempty"`
	Sort *Sort `json:"sort,omitempty"`
	Page *Page `json:"page,omitempty"`
}

// NewPaymentsResponse instantiates a new PaymentsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentsResponse() *PaymentsResponse {
	this := PaymentsResponse{}
	return &this
}

// NewPaymentsResponseWithDefaults instantiates a new PaymentsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentsResponseWithDefaults() *PaymentsResponse {
	this := PaymentsResponse{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *PaymentsResponse) GetData() []Payment {
	if o == nil || IsNil(o.Data) {
		var ret []Payment
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentsResponse) GetDataOk() ([]Payment, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *PaymentsResponse) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []Payment and assigns it to the Data field.
func (o *PaymentsResponse) SetData(v []Payment) {
	o.Data = v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *PaymentsResponse) GetFilter() PaymentFilter {
	if o == nil || IsNil(o.Filter) {
		var ret PaymentFilter
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentsResponse) GetFilterOk() (*PaymentFilter, bool) {
	if o == nil || IsNil(o.Filter) {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *PaymentsResponse) HasFilter() bool {
	if o != nil && !IsNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given PaymentFilter and assigns it to the Filter field.
func (o *PaymentsResponse) SetFilter(v PaymentFilter) {
	o.Filter = &v
}

// GetSort returns the Sort field value if set, zero value otherwise.
func (o *PaymentsResponse) GetSort() Sort {
	if o == nil || IsNil(o.Sort) {
		var ret Sort
		return ret
	}
	return *o.Sort
}

// GetSortOk returns a tuple with the Sort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentsResponse) GetSortOk() (*Sort, bool) {
	if o == nil || IsNil(o.Sort) {
		return nil, false
	}
	return o.Sort, true
}

// HasSort returns a boolean if a field has been set.
func (o *PaymentsResponse) HasSort() bool {
	if o != nil && !IsNil(o.Sort) {
		return true
	}

	return false
}

// SetSort gets a reference to the given Sort and assigns it to the Sort field.
func (o *PaymentsResponse) SetSort(v Sort) {
	o.Sort = &v
}

// GetPage returns the Page field value if set, zero value otherwise.
func (o *PaymentsResponse) GetPage() Page {
	if o == nil || IsNil(o.Page) {
		var ret Page
		return ret
	}
	return *o.Page
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentsResponse) GetPageOk() (*Page, bool) {
	if o == nil || IsNil(o.Page) {
		return nil, false
	}
	return o.Page, true
}

// HasPage returns a boolean if a field has been set.
func (o *PaymentsResponse) HasPage() bool {
	if o != nil && !IsNil(o.Page) {
		return true
	}

	return false
}

// SetPage gets a reference to the given Page and assigns it to the Page field.
func (o *PaymentsResponse) SetPage(v Page) {
	o.Page = &v
}

func (o PaymentsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Filter) {
		toSerialize["filter"] = o.Filter
	}
	if !IsNil(o.Sort) {
		toSerialize["sort"] = o.Sort
	}
	if !IsNil(o.Page) {
		toSerialize["page"] = o.Page
	}
	return toSerialize, nil
}

type NullablePaymentsResponse struct {
	value *PaymentsResponse
	isSet bool
}

func (v NullablePaymentsResponse) Get() *PaymentsResponse {
	return v.value
}

func (v *NullablePaymentsResponse) Set(val *PaymentsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentsResponse(val *PaymentsResponse) *NullablePaymentsResponse {
	return &NullablePaymentsResponse{value: val, isSet: true}
}

func (v NullablePaymentsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


