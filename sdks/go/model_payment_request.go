/*
Payments Direct API

Use the Payments Direct API to get quotes, create and manage payments, and manage originator and beneficiary identities.  ## API environments  The Payments Direct API offers the following environments:  | <div style=\"width:90px\">Environment</div>  | Base URL                      | Description                               | | ------------------------------------------ | ----------------------------- | ----------------------------------------- | | Test                                       | `https://api.test.ripple.com` | Test environment with simulated currency. | | Production                                 | `https://api.ripple.com`      | Production environment                    |  ## API authentication  All {{process.env.VAR_RPD}} API operations require a Bearer access token specific to the environment you're using. Ripple provides a secure model for authentication and authorization by providing access tokens scoped for a set of credentials.  ### Generate client ID and client secret  You will need your _client ID_ and _client secret_ to obtain an access token.  If you do not already have your client ID and client secret, do the following:  1. Log into the Ripple Payments UI. 2. In the left navigation menu, click **Settings**. 3. Under **Administration**, click **API Credentials**. 4. In the dropdown list next to the page title, select the access environment. For example, to provision credentials for the test environment, select **Test** from the dropdown list. 5. In the upper right corner of the page, click **New Credential**. 6. Click **Save and Generate Key**.  **Caution:** The *client secret* is displayed only once when you are creating new credentials. You cannot retrieve the secret after exiting this page. Copy and store the client secret securely and share it with authorized individuals in accordance with your organization's security policy.  You can now use the client ID and client secret to generate access tokens using the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation.  ### Request an access token  To get an access token, use the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation with your `client_id` and `client_secret`. The response contains a token in the `access_token` field.  We recommend rotating your API credentials at regular intervals according to your organization's security policy.  **Note**: Authentication tokens are not a fixed length and can vary, avoid validating tokens based on character length. 

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paymentsdirect

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PaymentRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentRequest{}

// PaymentRequest Information required to initiate a payment.
type PaymentRequest struct {
	// ID of the quote you want to accept to initiate this payment. Must be in UUID format. This will be used as paymentId.
	QuoteId string `json:"quoteId"`
	// The identity ID of the payment originator in UUID format. You can find the identity ID using the `GET /identities` operation.
	OriginatorIdentityId *string `json:"originatorIdentityId,omitempty"`
	// The identity ID of the payment beneficiary in UUID format. You can find the identity ID using the `GET /identities` operation.
	BeneficiaryIdentityId string `json:"beneficiaryIdentityId"`
	// Customer defined value, such as an invoice number.
	InternalId *string `json:"internalId,omitempty"`
	// Indicates the purpose of the payment  For more information about the `purposeCode` options, see [purposeCode](../../building-payment-request-body/#purposecode). 
	PurposeCode *string `json:"purposeCode,omitempty"`
	// Source of cash for payout.
	SourceOfCash *string `json:"sourceOfCash,omitempty"`
	// List of labels associated with the payment. A label typically contains a UUID of your choice, designated as the batchId.
	PaymentLabels []string `json:"paymentLabels,omitempty"`
}

type _PaymentRequest PaymentRequest

// NewPaymentRequest instantiates a new PaymentRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentRequest(quoteId string, beneficiaryIdentityId string) *PaymentRequest {
	this := PaymentRequest{}
	this.QuoteId = quoteId
	this.BeneficiaryIdentityId = beneficiaryIdentityId
	return &this
}

// NewPaymentRequestWithDefaults instantiates a new PaymentRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentRequestWithDefaults() *PaymentRequest {
	this := PaymentRequest{}
	return &this
}

// GetQuoteId returns the QuoteId field value
func (o *PaymentRequest) GetQuoteId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QuoteId
}

// GetQuoteIdOk returns a tuple with the QuoteId field value
// and a boolean to check if the value has been set.
func (o *PaymentRequest) GetQuoteIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QuoteId, true
}

// SetQuoteId sets field value
func (o *PaymentRequest) SetQuoteId(v string) {
	o.QuoteId = v
}

// GetOriginatorIdentityId returns the OriginatorIdentityId field value if set, zero value otherwise.
func (o *PaymentRequest) GetOriginatorIdentityId() string {
	if o == nil || IsNil(o.OriginatorIdentityId) {
		var ret string
		return ret
	}
	return *o.OriginatorIdentityId
}

// GetOriginatorIdentityIdOk returns a tuple with the OriginatorIdentityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentRequest) GetOriginatorIdentityIdOk() (*string, bool) {
	if o == nil || IsNil(o.OriginatorIdentityId) {
		return nil, false
	}
	return o.OriginatorIdentityId, true
}

// HasOriginatorIdentityId returns a boolean if a field has been set.
func (o *PaymentRequest) HasOriginatorIdentityId() bool {
	if o != nil && !IsNil(o.OriginatorIdentityId) {
		return true
	}

	return false
}

// SetOriginatorIdentityId gets a reference to the given string and assigns it to the OriginatorIdentityId field.
func (o *PaymentRequest) SetOriginatorIdentityId(v string) {
	o.OriginatorIdentityId = &v
}

// GetBeneficiaryIdentityId returns the BeneficiaryIdentityId field value
func (o *PaymentRequest) GetBeneficiaryIdentityId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BeneficiaryIdentityId
}

// GetBeneficiaryIdentityIdOk returns a tuple with the BeneficiaryIdentityId field value
// and a boolean to check if the value has been set.
func (o *PaymentRequest) GetBeneficiaryIdentityIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BeneficiaryIdentityId, true
}

// SetBeneficiaryIdentityId sets field value
func (o *PaymentRequest) SetBeneficiaryIdentityId(v string) {
	o.BeneficiaryIdentityId = v
}

// GetInternalId returns the InternalId field value if set, zero value otherwise.
func (o *PaymentRequest) GetInternalId() string {
	if o == nil || IsNil(o.InternalId) {
		var ret string
		return ret
	}
	return *o.InternalId
}

// GetInternalIdOk returns a tuple with the InternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentRequest) GetInternalIdOk() (*string, bool) {
	if o == nil || IsNil(o.InternalId) {
		return nil, false
	}
	return o.InternalId, true
}

// HasInternalId returns a boolean if a field has been set.
func (o *PaymentRequest) HasInternalId() bool {
	if o != nil && !IsNil(o.InternalId) {
		return true
	}

	return false
}

// SetInternalId gets a reference to the given string and assigns it to the InternalId field.
func (o *PaymentRequest) SetInternalId(v string) {
	o.InternalId = &v
}

// GetPurposeCode returns the PurposeCode field value if set, zero value otherwise.
func (o *PaymentRequest) GetPurposeCode() string {
	if o == nil || IsNil(o.PurposeCode) {
		var ret string
		return ret
	}
	return *o.PurposeCode
}

// GetPurposeCodeOk returns a tuple with the PurposeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentRequest) GetPurposeCodeOk() (*string, bool) {
	if o == nil || IsNil(o.PurposeCode) {
		return nil, false
	}
	return o.PurposeCode, true
}

// HasPurposeCode returns a boolean if a field has been set.
func (o *PaymentRequest) HasPurposeCode() bool {
	if o != nil && !IsNil(o.PurposeCode) {
		return true
	}

	return false
}

// SetPurposeCode gets a reference to the given string and assigns it to the PurposeCode field.
func (o *PaymentRequest) SetPurposeCode(v string) {
	o.PurposeCode = &v
}

// GetSourceOfCash returns the SourceOfCash field value if set, zero value otherwise.
func (o *PaymentRequest) GetSourceOfCash() string {
	if o == nil || IsNil(o.SourceOfCash) {
		var ret string
		return ret
	}
	return *o.SourceOfCash
}

// GetSourceOfCashOk returns a tuple with the SourceOfCash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentRequest) GetSourceOfCashOk() (*string, bool) {
	if o == nil || IsNil(o.SourceOfCash) {
		return nil, false
	}
	return o.SourceOfCash, true
}

// HasSourceOfCash returns a boolean if a field has been set.
func (o *PaymentRequest) HasSourceOfCash() bool {
	if o != nil && !IsNil(o.SourceOfCash) {
		return true
	}

	return false
}

// SetSourceOfCash gets a reference to the given string and assigns it to the SourceOfCash field.
func (o *PaymentRequest) SetSourceOfCash(v string) {
	o.SourceOfCash = &v
}

// GetPaymentLabels returns the PaymentLabels field value if set, zero value otherwise.
func (o *PaymentRequest) GetPaymentLabels() []string {
	if o == nil || IsNil(o.PaymentLabels) {
		var ret []string
		return ret
	}
	return o.PaymentLabels
}

// GetPaymentLabelsOk returns a tuple with the PaymentLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentRequest) GetPaymentLabelsOk() ([]string, bool) {
	if o == nil || IsNil(o.PaymentLabels) {
		return nil, false
	}
	return o.PaymentLabels, true
}

// HasPaymentLabels returns a boolean if a field has been set.
func (o *PaymentRequest) HasPaymentLabels() bool {
	if o != nil && !IsNil(o.PaymentLabels) {
		return true
	}

	return false
}

// SetPaymentLabels gets a reference to the given []string and assigns it to the PaymentLabels field.
func (o *PaymentRequest) SetPaymentLabels(v []string) {
	o.PaymentLabels = v
}

func (o PaymentRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["quoteId"] = o.QuoteId
	if !IsNil(o.OriginatorIdentityId) {
		toSerialize["originatorIdentityId"] = o.OriginatorIdentityId
	}
	toSerialize["beneficiaryIdentityId"] = o.BeneficiaryIdentityId
	if !IsNil(o.InternalId) {
		toSerialize["internalId"] = o.InternalId
	}
	if !IsNil(o.PurposeCode) {
		toSerialize["purposeCode"] = o.PurposeCode
	}
	if !IsNil(o.SourceOfCash) {
		toSerialize["sourceOfCash"] = o.SourceOfCash
	}
	if !IsNil(o.PaymentLabels) {
		toSerialize["paymentLabels"] = o.PaymentLabels
	}
	return toSerialize, nil
}

func (o *PaymentRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"quoteId",
		"beneficiaryIdentityId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPaymentRequest := _PaymentRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPaymentRequest)

	if err != nil {
		return err
	}

	*o = PaymentRequest(varPaymentRequest)

	return err
}

type NullablePaymentRequest struct {
	value *PaymentRequest
	isSet bool
}

func (v NullablePaymentRequest) Get() *PaymentRequest {
	return v.value
}

func (v *NullablePaymentRequest) Set(val *PaymentRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentRequest(val *PaymentRequest) *NullablePaymentRequest {
	return &NullablePaymentRequest{value: val, isSet: true}
}

func (v NullablePaymentRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


