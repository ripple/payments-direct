/*
Payments Direct API

Use the Payments Direct API to get quotes, create and manage payments, and manage originator and beneficiary identities.  ## API environments  The Payments Direct API offers the following environments:  | <div style=\"width:90px\">Environment</div>  | Base URL                      | Description                               | | ------------------------------------------ | ----------------------------- | ----------------------------------------- | | Test                                       | `https://api.test.ripple.com` | Test environment with simulated currency. | | Production                                 | `https://api.ripple.com`      | Production environment                    |  ## API authentication  All {{process.env.VAR_RPD}} API operations require a Bearer access token specific to the environment you're using. Ripple provides a secure model for authentication and authorization by providing access tokens scoped for a set of credentials.  ### Generate client ID and client secret  You will need your _client ID_ and _client secret_ to obtain an access token.  If you do not already have your client ID and client secret, do the following:  1. Log into the Ripple Payments UI. 2. In the left navigation menu, click **Settings**. 3. Under **Administration**, click **API Credentials**. 4. In the dropdown list next to the page title, select the access environment. For example, to provision credentials for the test environment, select **Test** from the dropdown list. 5. In the upper right corner of the page, click **New Credential**. 6. Click **Save and Generate Key**.  **Caution:** The *client secret* is displayed only once when you are creating new credentials. You cannot retrieve the secret after exiting this page. Copy and store the client secret securely and share it with authorized individuals in accordance with your organization's security policy.  You can now use the client ID and client secret to generate access tokens using the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation.  ### Request an access token  To get an access token, use the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation with your `client_id` and `client_secret`. The response contains a token in the `access_token` field.  We recommend rotating your API credentials at regular intervals according to your organization's security policy.  **Note**: Authentication tokens are not a fixed length and can vary, avoid validating tokens based on character length. 

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paymentsdirect

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the PaymentWithDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentWithDetails{}

// PaymentWithDetails struct for PaymentWithDetails
type PaymentWithDetails struct {
	// The unique ID that identifies this payment. This value is the same as the quote ID.
	PaymentId string `json:"paymentId"`
	// Transaction hash of the crypto payment on the destination blockchain network
	CryptoTransactionHash *string `json:"cryptoTransactionHash,omitempty"`
	// The time at which the payment was initiated, specified in UTC.
	InitiatedAt *time.Time `json:"initiatedAt,omitempty"`
	// The time at which this payment expires, specified in UTC.
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`
	// The time at which the payment state was last updated for this payment, specified in UTC.
	LastStateUpdatedAt *time.Time `json:"lastStateUpdatedAt,omitempty"`
	PaymentState PaymentState `json:"paymentState"`
	Originator *Originator `json:"originator,omitempty"`
	Destination *Destination `json:"destination,omitempty"`
	AdjustedExchangeRate *AdjustedExchangeRate `json:"adjustedExchangeRate,omitempty"`
	// A summary of fees included in payment quote.
	Fees []FeeSummary `json:"fees,omitempty"`
	// Indicates the source of funds
	SourceOfCash *string `json:"sourceOfCash,omitempty"`
	// purposeCode for RPD payments
	PurposeCode *string `json:"purposeCode,omitempty"`
	TransactionDetails *TransactionDetails `json:"transactionDetails,omitempty"`
	Errors []PaymentError `json:"errors,omitempty"`
	// List of labels associated with the payment. A label typically contains a UUID of your choice, designated as the batchId.
	PaymentLabels []string `json:"paymentLabels,omitempty"`
}

type _PaymentWithDetails PaymentWithDetails

// NewPaymentWithDetails instantiates a new PaymentWithDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentWithDetails(paymentId string, paymentState PaymentState) *PaymentWithDetails {
	this := PaymentWithDetails{}
	this.PaymentId = paymentId
	this.PaymentState = paymentState
	return &this
}

// NewPaymentWithDetailsWithDefaults instantiates a new PaymentWithDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentWithDetailsWithDefaults() *PaymentWithDetails {
	this := PaymentWithDetails{}
	return &this
}

// GetPaymentId returns the PaymentId field value
func (o *PaymentWithDetails) GetPaymentId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PaymentId
}

// GetPaymentIdOk returns a tuple with the PaymentId field value
// and a boolean to check if the value has been set.
func (o *PaymentWithDetails) GetPaymentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PaymentId, true
}

// SetPaymentId sets field value
func (o *PaymentWithDetails) SetPaymentId(v string) {
	o.PaymentId = v
}

// GetCryptoTransactionHash returns the CryptoTransactionHash field value if set, zero value otherwise.
func (o *PaymentWithDetails) GetCryptoTransactionHash() string {
	if o == nil || IsNil(o.CryptoTransactionHash) {
		var ret string
		return ret
	}
	return *o.CryptoTransactionHash
}

// GetCryptoTransactionHashOk returns a tuple with the CryptoTransactionHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentWithDetails) GetCryptoTransactionHashOk() (*string, bool) {
	if o == nil || IsNil(o.CryptoTransactionHash) {
		return nil, false
	}
	return o.CryptoTransactionHash, true
}

// HasCryptoTransactionHash returns a boolean if a field has been set.
func (o *PaymentWithDetails) HasCryptoTransactionHash() bool {
	if o != nil && !IsNil(o.CryptoTransactionHash) {
		return true
	}

	return false
}

// SetCryptoTransactionHash gets a reference to the given string and assigns it to the CryptoTransactionHash field.
func (o *PaymentWithDetails) SetCryptoTransactionHash(v string) {
	o.CryptoTransactionHash = &v
}

// GetInitiatedAt returns the InitiatedAt field value if set, zero value otherwise.
func (o *PaymentWithDetails) GetInitiatedAt() time.Time {
	if o == nil || IsNil(o.InitiatedAt) {
		var ret time.Time
		return ret
	}
	return *o.InitiatedAt
}

// GetInitiatedAtOk returns a tuple with the InitiatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentWithDetails) GetInitiatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.InitiatedAt) {
		return nil, false
	}
	return o.InitiatedAt, true
}

// HasInitiatedAt returns a boolean if a field has been set.
func (o *PaymentWithDetails) HasInitiatedAt() bool {
	if o != nil && !IsNil(o.InitiatedAt) {
		return true
	}

	return false
}

// SetInitiatedAt gets a reference to the given time.Time and assigns it to the InitiatedAt field.
func (o *PaymentWithDetails) SetInitiatedAt(v time.Time) {
	o.InitiatedAt = &v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *PaymentWithDetails) GetExpiresAt() time.Time {
	if o == nil || IsNil(o.ExpiresAt) {
		var ret time.Time
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentWithDetails) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpiresAt) {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *PaymentWithDetails) HasExpiresAt() bool {
	if o != nil && !IsNil(o.ExpiresAt) {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given time.Time and assigns it to the ExpiresAt field.
func (o *PaymentWithDetails) SetExpiresAt(v time.Time) {
	o.ExpiresAt = &v
}

// GetLastStateUpdatedAt returns the LastStateUpdatedAt field value if set, zero value otherwise.
func (o *PaymentWithDetails) GetLastStateUpdatedAt() time.Time {
	if o == nil || IsNil(o.LastStateUpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.LastStateUpdatedAt
}

// GetLastStateUpdatedAtOk returns a tuple with the LastStateUpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentWithDetails) GetLastStateUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastStateUpdatedAt) {
		return nil, false
	}
	return o.LastStateUpdatedAt, true
}

// HasLastStateUpdatedAt returns a boolean if a field has been set.
func (o *PaymentWithDetails) HasLastStateUpdatedAt() bool {
	if o != nil && !IsNil(o.LastStateUpdatedAt) {
		return true
	}

	return false
}

// SetLastStateUpdatedAt gets a reference to the given time.Time and assigns it to the LastStateUpdatedAt field.
func (o *PaymentWithDetails) SetLastStateUpdatedAt(v time.Time) {
	o.LastStateUpdatedAt = &v
}

// GetPaymentState returns the PaymentState field value
func (o *PaymentWithDetails) GetPaymentState() PaymentState {
	if o == nil {
		var ret PaymentState
		return ret
	}

	return o.PaymentState
}

// GetPaymentStateOk returns a tuple with the PaymentState field value
// and a boolean to check if the value has been set.
func (o *PaymentWithDetails) GetPaymentStateOk() (*PaymentState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PaymentState, true
}

// SetPaymentState sets field value
func (o *PaymentWithDetails) SetPaymentState(v PaymentState) {
	o.PaymentState = v
}

// GetOriginator returns the Originator field value if set, zero value otherwise.
func (o *PaymentWithDetails) GetOriginator() Originator {
	if o == nil || IsNil(o.Originator) {
		var ret Originator
		return ret
	}
	return *o.Originator
}

// GetOriginatorOk returns a tuple with the Originator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentWithDetails) GetOriginatorOk() (*Originator, bool) {
	if o == nil || IsNil(o.Originator) {
		return nil, false
	}
	return o.Originator, true
}

// HasOriginator returns a boolean if a field has been set.
func (o *PaymentWithDetails) HasOriginator() bool {
	if o != nil && !IsNil(o.Originator) {
		return true
	}

	return false
}

// SetOriginator gets a reference to the given Originator and assigns it to the Originator field.
func (o *PaymentWithDetails) SetOriginator(v Originator) {
	o.Originator = &v
}

// GetDestination returns the Destination field value if set, zero value otherwise.
func (o *PaymentWithDetails) GetDestination() Destination {
	if o == nil || IsNil(o.Destination) {
		var ret Destination
		return ret
	}
	return *o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentWithDetails) GetDestinationOk() (*Destination, bool) {
	if o == nil || IsNil(o.Destination) {
		return nil, false
	}
	return o.Destination, true
}

// HasDestination returns a boolean if a field has been set.
func (o *PaymentWithDetails) HasDestination() bool {
	if o != nil && !IsNil(o.Destination) {
		return true
	}

	return false
}

// SetDestination gets a reference to the given Destination and assigns it to the Destination field.
func (o *PaymentWithDetails) SetDestination(v Destination) {
	o.Destination = &v
}

// GetAdjustedExchangeRate returns the AdjustedExchangeRate field value if set, zero value otherwise.
func (o *PaymentWithDetails) GetAdjustedExchangeRate() AdjustedExchangeRate {
	if o == nil || IsNil(o.AdjustedExchangeRate) {
		var ret AdjustedExchangeRate
		return ret
	}
	return *o.AdjustedExchangeRate
}

// GetAdjustedExchangeRateOk returns a tuple with the AdjustedExchangeRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentWithDetails) GetAdjustedExchangeRateOk() (*AdjustedExchangeRate, bool) {
	if o == nil || IsNil(o.AdjustedExchangeRate) {
		return nil, false
	}
	return o.AdjustedExchangeRate, true
}

// HasAdjustedExchangeRate returns a boolean if a field has been set.
func (o *PaymentWithDetails) HasAdjustedExchangeRate() bool {
	if o != nil && !IsNil(o.AdjustedExchangeRate) {
		return true
	}

	return false
}

// SetAdjustedExchangeRate gets a reference to the given AdjustedExchangeRate and assigns it to the AdjustedExchangeRate field.
func (o *PaymentWithDetails) SetAdjustedExchangeRate(v AdjustedExchangeRate) {
	o.AdjustedExchangeRate = &v
}

// GetFees returns the Fees field value if set, zero value otherwise.
func (o *PaymentWithDetails) GetFees() []FeeSummary {
	if o == nil || IsNil(o.Fees) {
		var ret []FeeSummary
		return ret
	}
	return o.Fees
}

// GetFeesOk returns a tuple with the Fees field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentWithDetails) GetFeesOk() ([]FeeSummary, bool) {
	if o == nil || IsNil(o.Fees) {
		return nil, false
	}
	return o.Fees, true
}

// HasFees returns a boolean if a field has been set.
func (o *PaymentWithDetails) HasFees() bool {
	if o != nil && !IsNil(o.Fees) {
		return true
	}

	return false
}

// SetFees gets a reference to the given []FeeSummary and assigns it to the Fees field.
func (o *PaymentWithDetails) SetFees(v []FeeSummary) {
	o.Fees = v
}

// GetSourceOfCash returns the SourceOfCash field value if set, zero value otherwise.
func (o *PaymentWithDetails) GetSourceOfCash() string {
	if o == nil || IsNil(o.SourceOfCash) {
		var ret string
		return ret
	}
	return *o.SourceOfCash
}

// GetSourceOfCashOk returns a tuple with the SourceOfCash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentWithDetails) GetSourceOfCashOk() (*string, bool) {
	if o == nil || IsNil(o.SourceOfCash) {
		return nil, false
	}
	return o.SourceOfCash, true
}

// HasSourceOfCash returns a boolean if a field has been set.
func (o *PaymentWithDetails) HasSourceOfCash() bool {
	if o != nil && !IsNil(o.SourceOfCash) {
		return true
	}

	return false
}

// SetSourceOfCash gets a reference to the given string and assigns it to the SourceOfCash field.
func (o *PaymentWithDetails) SetSourceOfCash(v string) {
	o.SourceOfCash = &v
}

// GetPurposeCode returns the PurposeCode field value if set, zero value otherwise.
func (o *PaymentWithDetails) GetPurposeCode() string {
	if o == nil || IsNil(o.PurposeCode) {
		var ret string
		return ret
	}
	return *o.PurposeCode
}

// GetPurposeCodeOk returns a tuple with the PurposeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentWithDetails) GetPurposeCodeOk() (*string, bool) {
	if o == nil || IsNil(o.PurposeCode) {
		return nil, false
	}
	return o.PurposeCode, true
}

// HasPurposeCode returns a boolean if a field has been set.
func (o *PaymentWithDetails) HasPurposeCode() bool {
	if o != nil && !IsNil(o.PurposeCode) {
		return true
	}

	return false
}

// SetPurposeCode gets a reference to the given string and assigns it to the PurposeCode field.
func (o *PaymentWithDetails) SetPurposeCode(v string) {
	o.PurposeCode = &v
}

// GetTransactionDetails returns the TransactionDetails field value if set, zero value otherwise.
func (o *PaymentWithDetails) GetTransactionDetails() TransactionDetails {
	if o == nil || IsNil(o.TransactionDetails) {
		var ret TransactionDetails
		return ret
	}
	return *o.TransactionDetails
}

// GetTransactionDetailsOk returns a tuple with the TransactionDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentWithDetails) GetTransactionDetailsOk() (*TransactionDetails, bool) {
	if o == nil || IsNil(o.TransactionDetails) {
		return nil, false
	}
	return o.TransactionDetails, true
}

// HasTransactionDetails returns a boolean if a field has been set.
func (o *PaymentWithDetails) HasTransactionDetails() bool {
	if o != nil && !IsNil(o.TransactionDetails) {
		return true
	}

	return false
}

// SetTransactionDetails gets a reference to the given TransactionDetails and assigns it to the TransactionDetails field.
func (o *PaymentWithDetails) SetTransactionDetails(v TransactionDetails) {
	o.TransactionDetails = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *PaymentWithDetails) GetErrors() []PaymentError {
	if o == nil || IsNil(o.Errors) {
		var ret []PaymentError
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentWithDetails) GetErrorsOk() ([]PaymentError, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *PaymentWithDetails) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []PaymentError and assigns it to the Errors field.
func (o *PaymentWithDetails) SetErrors(v []PaymentError) {
	o.Errors = v
}

// GetPaymentLabels returns the PaymentLabels field value if set, zero value otherwise.
func (o *PaymentWithDetails) GetPaymentLabels() []string {
	if o == nil || IsNil(o.PaymentLabels) {
		var ret []string
		return ret
	}
	return o.PaymentLabels
}

// GetPaymentLabelsOk returns a tuple with the PaymentLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentWithDetails) GetPaymentLabelsOk() ([]string, bool) {
	if o == nil || IsNil(o.PaymentLabels) {
		return nil, false
	}
	return o.PaymentLabels, true
}

// HasPaymentLabels returns a boolean if a field has been set.
func (o *PaymentWithDetails) HasPaymentLabels() bool {
	if o != nil && !IsNil(o.PaymentLabels) {
		return true
	}

	return false
}

// SetPaymentLabels gets a reference to the given []string and assigns it to the PaymentLabels field.
func (o *PaymentWithDetails) SetPaymentLabels(v []string) {
	o.PaymentLabels = v
}

func (o PaymentWithDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentWithDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["paymentId"] = o.PaymentId
	if !IsNil(o.CryptoTransactionHash) {
		toSerialize["cryptoTransactionHash"] = o.CryptoTransactionHash
	}
	if !IsNil(o.InitiatedAt) {
		toSerialize["initiatedAt"] = o.InitiatedAt
	}
	if !IsNil(o.ExpiresAt) {
		toSerialize["expiresAt"] = o.ExpiresAt
	}
	if !IsNil(o.LastStateUpdatedAt) {
		toSerialize["lastStateUpdatedAt"] = o.LastStateUpdatedAt
	}
	toSerialize["paymentState"] = o.PaymentState
	if !IsNil(o.Originator) {
		toSerialize["originator"] = o.Originator
	}
	if !IsNil(o.Destination) {
		toSerialize["destination"] = o.Destination
	}
	if !IsNil(o.AdjustedExchangeRate) {
		toSerialize["adjustedExchangeRate"] = o.AdjustedExchangeRate
	}
	if !IsNil(o.Fees) {
		toSerialize["fees"] = o.Fees
	}
	if !IsNil(o.SourceOfCash) {
		toSerialize["sourceOfCash"] = o.SourceOfCash
	}
	if !IsNil(o.PurposeCode) {
		toSerialize["purposeCode"] = o.PurposeCode
	}
	if !IsNil(o.TransactionDetails) {
		toSerialize["transactionDetails"] = o.TransactionDetails
	}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	if !IsNil(o.PaymentLabels) {
		toSerialize["paymentLabels"] = o.PaymentLabels
	}
	return toSerialize, nil
}

func (o *PaymentWithDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"paymentId",
		"paymentState",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPaymentWithDetails := _PaymentWithDetails{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPaymentWithDetails)

	if err != nil {
		return err
	}

	*o = PaymentWithDetails(varPaymentWithDetails)

	return err
}

type NullablePaymentWithDetails struct {
	value *PaymentWithDetails
	isSet bool
}

func (v NullablePaymentWithDetails) Get() *PaymentWithDetails {
	return v.value
}

func (v *NullablePaymentWithDetails) Set(val *PaymentWithDetails) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentWithDetails) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentWithDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentWithDetails(val *PaymentWithDetails) *NullablePaymentWithDetails {
	return &NullablePaymentWithDetails{value: val, isSet: true}
}

func (v NullablePaymentWithDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentWithDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


