/* tslint:disable */
/* eslint-disable */
/**
 * Payments Direct API
 * Use the Payments Direct API to get quotes, create and manage payments, and manage originator and beneficiary identities.  ## API environments  The Payments Direct API offers the following environments:  | <div style=\"width:90px\">Environment</div>  | Base URL                      | Description                               | | ------------------------------------------ | ----------------------------- | ----------------------------------------- | | Test                                       | `https://api.test.ripple.com` | Test environment with simulated currency. | | Production                                 | `https://api.ripple.com`      | Production environment                    |  ## API authentication  All {{process.env.VAR_RPD}} API operations require a Bearer access token specific to the environment you\'re using. Ripple provides a secure model for authentication and authorization by providing access tokens scoped for a set of credentials.  ### Generate client ID and client secret  You will need your _client ID_ and _client secret_ to obtain an access token.  If you do not already have your client ID and client secret, do the following:  1. Log into the Ripple Payments UI. 2. In the left navigation menu, click **Settings**. 3. Under **Administration**, click **API Credentials**. 4. In the dropdown list next to the page title, select the access environment. For example, to provision credentials for the test environment, select **Test** from the dropdown list. 5. In the upper right corner of the page, click **New Credential**. 6. Click **Save and Generate Key**.  **Caution:** The *client secret* is displayed only once when you are creating new credentials. You cannot retrieve the secret after exiting this page. Copy and store the client secret securely and share it with authorized individuals in accordance with your organization\'s security policy.  You can now use the client ID and client secret to generate access tokens using the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation.  ### Request an access token  To get an access token, use the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation with your `client_id` and `client_secret`. The response contains a token in the `access_token` field.  We recommend rotating your API credentials at regular intervals according to your organization\'s security policy.  **Note**: Authentication tokens are not a fixed length and can vary, avoid validating tokens based on character length. 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateIdentityRequestV2 } from '../models';
// @ts-ignore
import type { CreateIdentityResponse } from '../models';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { IdentityResponseV2 } from '../models';
// @ts-ignore
import type { IdentityTypeV2 } from '../models';
// @ts-ignore
import type { ListIdentitiesResponseV2 } from '../models';
/**
 * IdentitiesV2Api - axios parameter creator
 * @export
 */
export const IdentitiesV2ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new identity.  <!-- **Tutorials**  * Learn how to [Create an identity](../../tutorials/create-an-identity/). --> 
         * @summary Create a new identity
         * @param {CreateIdentityRequestV2} createIdentityRequestV2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIdentityV2: async (createIdentityRequestV2: CreateIdentityRequestV2, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createIdentityRequestV2' is not null or undefined
            assertParamExists('createIdentityV2', 'createIdentityRequestV2', createIdentityRequestV2)
            const localVarPath = `/v2/identities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createIdentityRequestV2, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an identity
         * @summary Delete an identity
         * @param {string} identityId Unique UUID string that maps to the identity to be deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deactivateIdentityV2: async (identityId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityId' is not null or undefined
            assertParamExists('deactivateIdentityV2', 'identityId', identityId)
            const localVarPath = `/v2/identities/{identity-id}`
                .replace(`{${"identity-id"}}`, encodeURIComponent(String(identityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of identities that match the query parameters.  **Note**: Depending on the number of identities in your account, not all of them may be returned even if they match your query parameters. 
         * @summary Get a list of identities
         * @param {IdentityTypeV2} [identityType] The type of identities you want to retrieve
         * @param {string} [nickName] The nickname for the identity provided at the time of identity creation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIdentitiesV2: async (identityType?: IdentityTypeV2, nickName?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/identities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (identityType !== undefined) {
                localVarQueryParameter['identityType'] = identityType;
            }

            if (nickName !== undefined) {
                localVarQueryParameter['nickName'] = nickName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an identity by its unique ID
         * @summary Get an identity by ID
         * @param {string} identityId The ID of the identity to get.
         * @param {number} [version] Version of the identity you want to retrieve.  **Note**: If you don\&#39;t specify a version, the latest version of the identity is returned. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIdentityByIdV2: async (identityId: string, version?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityId' is not null or undefined
            assertParamExists('getIdentityByIdV2', 'identityId', identityId)
            const localVarPath = `/v2/identities/{identity-id}`
                .replace(`{${"identity-id"}}`, encodeURIComponent(String(identityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IdentitiesV2Api - functional programming interface
 * @export
 */
export const IdentitiesV2ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IdentitiesV2ApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new identity.  <!-- **Tutorials**  * Learn how to [Create an identity](../../tutorials/create-an-identity/). --> 
         * @summary Create a new identity
         * @param {CreateIdentityRequestV2} createIdentityRequestV2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createIdentityV2(createIdentityRequestV2: CreateIdentityRequestV2, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateIdentityResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createIdentityV2(createIdentityRequestV2, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdentitiesV2Api.createIdentityV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete an identity
         * @summary Delete an identity
         * @param {string} identityId Unique UUID string that maps to the identity to be deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deactivateIdentityV2(identityId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deactivateIdentityV2(identityId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdentitiesV2Api.deactivateIdentityV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a list of identities that match the query parameters.  **Note**: Depending on the number of identities in your account, not all of them may be returned even if they match your query parameters. 
         * @summary Get a list of identities
         * @param {IdentityTypeV2} [identityType] The type of identities you want to retrieve
         * @param {string} [nickName] The nickname for the identity provided at the time of identity creation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIdentitiesV2(identityType?: IdentityTypeV2, nickName?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListIdentitiesResponseV2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIdentitiesV2(identityType, nickName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdentitiesV2Api.getIdentitiesV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get an identity by its unique ID
         * @summary Get an identity by ID
         * @param {string} identityId The ID of the identity to get.
         * @param {number} [version] Version of the identity you want to retrieve.  **Note**: If you don\&#39;t specify a version, the latest version of the identity is returned. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIdentityByIdV2(identityId: string, version?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityResponseV2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIdentityByIdV2(identityId, version, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdentitiesV2Api.getIdentityByIdV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * IdentitiesV2Api - factory interface
 * @export
 */
export const IdentitiesV2ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IdentitiesV2ApiFp(configuration)
    return {
        /**
         * Create a new identity.  <!-- **Tutorials**  * Learn how to [Create an identity](../../tutorials/create-an-identity/). --> 
         * @summary Create a new identity
         * @param {CreateIdentityRequestV2} createIdentityRequestV2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIdentityV2(createIdentityRequestV2: CreateIdentityRequestV2, options?: RawAxiosRequestConfig): AxiosPromise<CreateIdentityResponse> {
            return localVarFp.createIdentityV2(createIdentityRequestV2, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an identity
         * @summary Delete an identity
         * @param {string} identityId Unique UUID string that maps to the identity to be deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deactivateIdentityV2(identityId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deactivateIdentityV2(identityId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of identities that match the query parameters.  **Note**: Depending on the number of identities in your account, not all of them may be returned even if they match your query parameters. 
         * @summary Get a list of identities
         * @param {IdentityTypeV2} [identityType] The type of identities you want to retrieve
         * @param {string} [nickName] The nickname for the identity provided at the time of identity creation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIdentitiesV2(identityType?: IdentityTypeV2, nickName?: string, options?: RawAxiosRequestConfig): AxiosPromise<ListIdentitiesResponseV2> {
            return localVarFp.getIdentitiesV2(identityType, nickName, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an identity by its unique ID
         * @summary Get an identity by ID
         * @param {string} identityId The ID of the identity to get.
         * @param {number} [version] Version of the identity you want to retrieve.  **Note**: If you don\&#39;t specify a version, the latest version of the identity is returned. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIdentityByIdV2(identityId: string, version?: number, options?: RawAxiosRequestConfig): AxiosPromise<IdentityResponseV2> {
            return localVarFp.getIdentityByIdV2(identityId, version, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IdentitiesV2Api - object-oriented interface
 * @export
 * @class IdentitiesV2Api
 * @extends {BaseAPI}
 */
export class IdentitiesV2Api extends BaseAPI {
    /**
     * Create a new identity.  <!-- **Tutorials**  * Learn how to [Create an identity](../../tutorials/create-an-identity/). --> 
     * @summary Create a new identity
     * @param {CreateIdentityRequestV2} createIdentityRequestV2 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentitiesV2Api
     */
    public createIdentityV2(createIdentityRequestV2: CreateIdentityRequestV2, options?: RawAxiosRequestConfig) {
        return IdentitiesV2ApiFp(this.configuration).createIdentityV2(createIdentityRequestV2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an identity
     * @summary Delete an identity
     * @param {string} identityId Unique UUID string that maps to the identity to be deleted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentitiesV2Api
     */
    public deactivateIdentityV2(identityId: string, options?: RawAxiosRequestConfig) {
        return IdentitiesV2ApiFp(this.configuration).deactivateIdentityV2(identityId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of identities that match the query parameters.  **Note**: Depending on the number of identities in your account, not all of them may be returned even if they match your query parameters. 
     * @summary Get a list of identities
     * @param {IdentityTypeV2} [identityType] The type of identities you want to retrieve
     * @param {string} [nickName] The nickname for the identity provided at the time of identity creation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentitiesV2Api
     */
    public getIdentitiesV2(identityType?: IdentityTypeV2, nickName?: string, options?: RawAxiosRequestConfig) {
        return IdentitiesV2ApiFp(this.configuration).getIdentitiesV2(identityType, nickName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an identity by its unique ID
     * @summary Get an identity by ID
     * @param {string} identityId The ID of the identity to get.
     * @param {number} [version] Version of the identity you want to retrieve.  **Note**: If you don\&#39;t specify a version, the latest version of the identity is returned. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentitiesV2Api
     */
    public getIdentityByIdV2(identityId: string, version?: number, options?: RawAxiosRequestConfig) {
        return IdentitiesV2ApiFp(this.configuration).getIdentityByIdV2(identityId, version, options).then((request) => request(this.axios, this.basePath));
    }
}

