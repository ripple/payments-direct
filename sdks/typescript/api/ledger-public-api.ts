/* tslint:disable */
/* eslint-disable */
/**
 * Payments Direct API
 * Use the Payments Direct API to get quotes, create and manage payments, and manage originator and beneficiary identities.  ## API environments  The Payments Direct API offers the following environments:  | <div style=\"width:90px\">Environment</div>  | Base URL                      | Description                               | | ------------------------------------------ | ----------------------------- | ----------------------------------------- | | Test                                       | `https://api.test.ripple.com` | Test environment with simulated currency. | | Production                                 | `https://api.ripple.com`      | Production environment                    |  ## API authentication  All {{process.env.VAR_RPD}} API operations require a Bearer access token specific to the environment you\'re using. Ripple provides a secure model for authentication and authorization by providing access tokens scoped for a set of credentials.  ### Generate client ID and client secret  You will need your _client ID_ and _client secret_ to obtain an access token.  If you do not already have your client ID and client secret, do the following:  1. Log into the Ripple Payments UI. 2. In the left navigation menu, click **Settings**. 3. Under **Administration**, click **API Credentials**. 4. In the dropdown list next to the page title, select the access environment. For example, to provision credentials for the test environment, select **Test** from the dropdown list. 5. In the upper right corner of the page, click **New Credential**. 6. Click **Save and Generate Key**.  **Caution:** The *client secret* is displayed only once when you are creating new credentials. You cannot retrieve the secret after exiting this page. Copy and store the client secret securely and share it with authorized individuals in accordance with your organization\'s security policy.  You can now use the client ID and client secret to generate access tokens using the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation.  ### Request an access token  To get an access token, use the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation with your `client_id` and `client_secret`. The response contains a token in the `access_token` field.  We recommend rotating your API credentials at regular intervals according to your organization\'s security policy.  **Note**: Authentication tokens are not a fixed length and can vary, avoid validating tokens based on character length. 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { GetBalances200Response } from '../models';
// @ts-ignore
import type { GetBalances400Response } from '../models';
/**
 * LedgerPublicApi - axios parameter creator
 * @export
 */
export const LedgerPublicApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get available balances
         * @param {string} [currency] The currency for which you want to get the balance.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBalances: async (currency?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/balances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LedgerPublicApi - functional programming interface
 * @export
 */
export const LedgerPublicApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LedgerPublicApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get available balances
         * @param {string} [currency] The currency for which you want to get the balance.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBalances(currency?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBalances200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBalances(currency, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LedgerPublicApi.getBalances']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LedgerPublicApi - factory interface
 * @export
 */
export const LedgerPublicApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LedgerPublicApiFp(configuration)
    return {
        /**
         * 
         * @summary Get available balances
         * @param {string} [currency] The currency for which you want to get the balance.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBalances(currency?: string, options?: RawAxiosRequestConfig): AxiosPromise<GetBalances200Response> {
            return localVarFp.getBalances(currency, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LedgerPublicApi - object-oriented interface
 * @export
 * @class LedgerPublicApi
 * @extends {BaseAPI}
 */
export class LedgerPublicApi extends BaseAPI {
    /**
     * 
     * @summary Get available balances
     * @param {string} [currency] The currency for which you want to get the balance.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LedgerPublicApi
     */
    public getBalances(currency?: string, options?: RawAxiosRequestConfig) {
        return LedgerPublicApiFp(this.configuration).getBalances(currency, options).then((request) => request(this.axios, this.basePath));
    }
}

