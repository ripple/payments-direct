/* tslint:disable */
/* eslint-disable */
/**
 * Payments Direct API
 * Use the Payments Direct API to get quotes, create and manage payments, and manage originator and beneficiary identities.  ## API environments  The Payments Direct API offers the following environments:  | <div style=\"width:90px\">Environment</div>  | Base URL                      | Description                               | | ------------------------------------------ | ----------------------------- | ----------------------------------------- | | Test                                       | `https://api.test.ripple.com` | Test environment with simulated currency. | | Production                                 | `https://api.ripple.com`      | Production environment                    |  ## API authentication  All {{process.env.VAR_RPD}} API operations require a Bearer access token specific to the environment you\'re using. Ripple provides a secure model for authentication and authorization by providing access tokens scoped for a set of credentials.  ### Generate client ID and client secret  You will need your _client ID_ and _client secret_ to obtain an access token.  If you do not already have your client ID and client secret, do the following:  1. Log into the Ripple Payments UI. 2. In the left navigation menu, click **Settings**. 3. Under **Administration**, click **API Credentials**. 4. In the dropdown list next to the page title, select the access environment. For example, to provision credentials for the test environment, select **Test** from the dropdown list. 5. In the upper right corner of the page, click **New Credential**. 6. Click **Save and Generate Key**.  **Caution:** The *client secret* is displayed only once when you are creating new credentials. You cannot retrieve the secret after exiting this page. Copy and store the client secret securely and share it with authorized individuals in accordance with your organization\'s security policy.  You can now use the client ID and client secret to generate access tokens using the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation.  ### Request an access token  To get an access token, use the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation with your `client_id` and `client_secret`. The response contains a token in the `access_token` field.  We recommend rotating your API credentials at regular intervals according to your organization\'s security policy.  **Note**: Authentication tokens are not a fixed length and can vary, avoid validating tokens based on character length. 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// May contain unused imports in some cases
// @ts-ignore
import type { AdjustedExchangeRate } from './adjusted-exchange-rate';
// May contain unused imports in some cases
// @ts-ignore
import type { Destination } from './destination';
// May contain unused imports in some cases
// @ts-ignore
import type { FeeSummary } from './fee-summary';
// May contain unused imports in some cases
// @ts-ignore
import type { Originator } from './originator';
// May contain unused imports in some cases
// @ts-ignore
import type { PaymentError } from './payment-error';
// May contain unused imports in some cases
// @ts-ignore
import type { PaymentState } from './payment-state';
// May contain unused imports in some cases
// @ts-ignore
import type { TransactionDetails } from './transaction-details';

/**
 * 
 * @export
 * @interface PaymentWithDetails
 */
export interface PaymentWithDetails {
    /**
     * The unique ID that identifies this payment. This value is the same as the quote ID.
     * @type {string}
     * @memberof PaymentWithDetails
     */
    'paymentId': string;
    /**
     * Transaction hash of the crypto payment on the destination blockchain network
     * @type {string}
     * @memberof PaymentWithDetails
     */
    'cryptoTransactionHash'?: string;
    /**
     * The time at which the payment was initiated, specified in UTC.
     * @type {string}
     * @memberof PaymentWithDetails
     */
    'initiatedAt'?: string;
    /**
     * The time at which this payment expires, specified in UTC.
     * @type {string}
     * @memberof PaymentWithDetails
     */
    'expiresAt'?: string;
    /**
     * The time at which the payment state was last updated for this payment, specified in UTC.
     * @type {string}
     * @memberof PaymentWithDetails
     */
    'lastStateUpdatedAt'?: string;
    /**
     * 
     * @type {PaymentState}
     * @memberof PaymentWithDetails
     */
    'paymentState': PaymentState;
    /**
     * 
     * @type {Originator}
     * @memberof PaymentWithDetails
     */
    'originator'?: Originator;
    /**
     * 
     * @type {Destination}
     * @memberof PaymentWithDetails
     */
    'destination'?: Destination;
    /**
     * 
     * @type {AdjustedExchangeRate}
     * @memberof PaymentWithDetails
     */
    'adjustedExchangeRate'?: AdjustedExchangeRate;
    /**
     * A summary of fees included in payment quote.
     * @type {Array<FeeSummary>}
     * @memberof PaymentWithDetails
     */
    'fees'?: Array<FeeSummary>;
    /**
     * Indicates the source of funds
     * @type {string}
     * @memberof PaymentWithDetails
     */
    'sourceOfCash'?: string;
    /**
     * purposeCode for RPD payments
     * @type {string}
     * @memberof PaymentWithDetails
     */
    'purposeCode'?: string;
    /**
     * 
     * @type {TransactionDetails}
     * @memberof PaymentWithDetails
     */
    'transactionDetails'?: TransactionDetails;
    /**
     * 
     * @type {Array<PaymentError>}
     * @memberof PaymentWithDetails
     */
    'errors'?: Array<PaymentError>;
    /**
     * List of labels associated with the payment. A label typically contains a UUID of your choice, designated as the batchId.
     * @type {Array<string>}
     * @memberof PaymentWithDetails
     */
    'paymentLabels'?: Array<string>;
}



