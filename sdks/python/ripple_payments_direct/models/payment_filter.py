# coding: utf-8

"""
    Payments Direct API

    Use the Payments Direct API to get quotes, create and manage payments, and manage originator and beneficiary identities.  ## API environments  The Payments Direct API offers the following environments:  | <div style=\"width:90px\">Environment</div>  | Base URL                      | Description                               | | ------------------------------------------ | ----------------------------- | ----------------------------------------- | | Test                                       | `https://api.test.ripple.com` | Test environment with simulated currency. | | Production                                 | `https://api.ripple.com`      | Production environment                    |  ## API authentication  All {{process.env.VAR_RPD}} API operations require a Bearer access token specific to the environment you're using. Ripple provides a secure model for authentication and authorization by providing access tokens scoped for a set of credentials.  ### Generate client ID and client secret  You will need your _client ID_ and _client secret_ to obtain an access token.  If you do not already have your client ID and client secret, do the following:  1. Log into the Ripple Payments UI. 2. In the left navigation menu, click **Settings**. 3. Under **Administration**, click **API Credentials**. 4. In the dropdown list next to the page title, select the access environment. For example, to provision credentials for the test environment, select **Test** from the dropdown list. 5. In the upper right corner of the page, click **New Credential**. 6. Click **Save and Generate Key**.  **Caution:** The *client secret* is displayed only once when you are creating new credentials. You cannot retrieve the secret after exiting this page. Copy and store the client secret securely and share it with authorized individuals in accordance with your organization's security policy.  You can now use the client ID and client secret to generate access tokens using the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation.  ### Request an access token  To get an access token, use the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation with your `client_id` and `client_secret`. The response contains a token in the `access_token` field.  We recommend rotating your API credentials at regular intervals according to your organization's security policy.  **Note**: Authentication tokens are not a fixed length and can vary, avoid validating tokens based on character length. 

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from ripple_payments_direct.models.payment_filter_range_type import PaymentFilterRangeType
from ripple_payments_direct.models.payment_state import PaymentState
from typing import Optional, Set
from typing_extensions import Self

class PaymentFilter(BaseModel):
    """
    Filter criteria to return desired payment search results.
    """ # noqa: E501
    payment_ids: Optional[List[Annotated[str, Field(strict=True, max_length=36)]]] = Field(default=None, description="Specify a list of uuids to search for payment with payment ids equals one from the list", alias="paymentIds")
    payment_states: Optional[List[PaymentState]] = Field(default=None, description="Array of payment states like `EXECUTING` or `COMPLETED`.", alias="paymentStates")
    filter_range_type: Optional[PaymentFilterRangeType] = Field(default=None, alias="filterRangeType")
    before_timestamp: Optional[datetime] = Field(default=None, description="Depending on the value of the `filterRangeType` field, this timestamp returns a list of payments that were created/modified/expired at or before the specified time.", alias="beforeTimestamp")
    after_timestamp: Optional[datetime] = Field(default=None, description="Depending on the value of the `filterRangeType` field, this timestamp returns a list of payments that were created/modified/expired at or after the specified time.", alias="afterTimestamp")
    beneficiary_identity_ids: Optional[List[Annotated[str, Field(strict=True, max_length=36)]]] = Field(default=None, description="To get all payments made to one or more beneficiaries, specify the identity ID(s) of those beneficiaries in this field. You can find the identity ID using the `GET /identities` operation.", alias="beneficiaryIdentityIds")
    internal_id: Optional[StrictStr] = Field(default=None, description="Specify an `internalId` to get payments associated with them. A prefix match will be executed.", alias="internalId")
    beneficiary_identity_nickname: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="To get all payments made to a beneficiary, specify the nickname of that beneficiary in this field. You can find the nickname using the `GET /identities` operation.", alias="beneficiaryIdentityNickname")
    destination_currencies: Optional[List[StrictStr]] = Field(default=None, description="Specify one or more currency codes to get payments where the beneficiary received funds in these currencies.", alias="destinationCurrencies")
    payment_labels: Optional[Annotated[List[Annotated[str, Field(strict=True, max_length=100)]], Field(max_length=10)]] = Field(default=None, description="List of labels associated with the payment. A label typically contains a UUID of your choice, designated as the batchId.", alias="paymentLabels")
    __properties: ClassVar[List[str]] = ["paymentIds", "paymentStates", "filterRangeType", "beforeTimestamp", "afterTimestamp", "beneficiaryIdentityIds", "internalId", "beneficiaryIdentityNickname", "destinationCurrencies", "paymentLabels"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "paymentIds": obj.get("paymentIds"),
            "paymentStates": obj.get("paymentStates"),
            "filterRangeType": obj.get("filterRangeType"),
            "beforeTimestamp": obj.get("beforeTimestamp"),
            "afterTimestamp": obj.get("afterTimestamp"),
            "beneficiaryIdentityIds": obj.get("beneficiaryIdentityIds"),
            "internalId": obj.get("internalId"),
            "beneficiaryIdentityNickname": obj.get("beneficiaryIdentityNickname"),
            "destinationCurrencies": obj.get("destinationCurrencies"),
            "paymentLabels": obj.get("paymentLabels")
        })
        return _obj


