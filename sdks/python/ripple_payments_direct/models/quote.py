# coding: utf-8

"""
    Payments Direct API

    Use the Payments Direct API to get quotes, create and manage payments, and manage originator and beneficiary identities.  ## API environments  The Payments Direct API offers the following environments:  | <div style=\"width:90px\">Environment</div>  | Base URL                      | Description                               | | ------------------------------------------ | ----------------------------- | ----------------------------------------- | | Test                                       | `https://api.test.ripple.com` | Test environment with simulated currency. | | Production                                 | `https://api.ripple.com`      | Production environment                    |  ## API authentication  All {{process.env.VAR_RPD}} API operations require a Bearer access token specific to the environment you're using. Ripple provides a secure model for authentication and authorization by providing access tokens scoped for a set of credentials.  ### Generate client ID and client secret  You will need your _client ID_ and _client secret_ to obtain an access token.  If you do not already have your client ID and client secret, do the following:  1. Log into the Ripple Payments UI. 2. In the left navigation menu, click **Settings**. 3. Under **Administration**, click **API Credentials**. 4. In the dropdown list next to the page title, select the access environment. For example, to provision credentials for the test environment, select **Test** from the dropdown list. 5. In the upper right corner of the page, click **New Credential**. 6. Click **Save and Generate Key**.  **Caution:** The *client secret* is displayed only once when you are creating new credentials. You cannot retrieve the secret after exiting this page. Copy and store the client secret securely and share it with authorized individuals in accordance with your organization's security policy.  You can now use the client ID and client secret to generate access tokens using the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation.  ### Request an access token  To get an access token, use the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation with your `client_id` and `client_secret`. The response contains a token in the `access_token` field.  We recommend rotating your API credentials at regular intervals according to your organization's security policy.  **Note**: Authentication tokens are not a fixed length and can vary, avoid validating tokens based on character length. 

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from ripple_payments_direct.models.adjusted_exchange_rate import AdjustedExchangeRate
from ripple_payments_direct.models.fee_summary import FeeSummary
from ripple_payments_direct.models.quote_amount_type import QuoteAmountType
from ripple_payments_direct.models.quote_status import QuoteStatus
from typing import Optional, Set
from typing_extensions import Self

class Quote(BaseModel):
    """
    Quote
    """ # noqa: E501
    quote_id: Annotated[str, Field(min_length=1, strict=True, max_length=36)] = Field(description="Unique ID that represents this quote.", alias="quoteId")
    quote_status: QuoteStatus = Field(alias="quoteStatus")
    quote_amount_type: Optional[QuoteAmountType] = Field(default=QuoteAmountType.SOURCE_AMOUNT, alias="quoteAmountType")
    source_amount: Optional[Union[Annotated[float, Field(le=100000000, strict=True, ge=1)], Annotated[int, Field(le=100000000, strict=True, ge=1)]]] = Field(default=None, description="Amount to be sent by the originator.", alias="sourceAmount")
    destination_amount: Optional[Union[Annotated[float, Field(le=100000000, strict=True, ge=1)], Annotated[int, Field(le=100000000, strict=True, ge=1)]]] = Field(default=None, description="Amount to be received by destination", alias="destinationAmount")
    source_currency: Annotated[str, Field(strict=True)] = Field(description="The currency code of the currency that you are sending.", alias="sourceCurrency")
    destination_currency: Annotated[str, Field(strict=True)] = Field(description="The currency code of the currency in which your beneficiary will receive this payment.", alias="destinationCurrency")
    source_country: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The country where the payment originator is located or incorporated, specified in Alpha-2 Code format as defined in the ISO CountryCode ISO 3166-1 list.", alias="sourceCountry")
    destination_country: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The country code to which you wish to send the funds. It follows ISO 3166-1 alpha-2 code", alias="destinationCountry")
    payout_category: Annotated[str, Field(min_length=1, strict=True, max_length=128)] = Field(description="Name of the payout category specified in the quote request.", alias="payoutCategory")
    payin_category: Annotated[str, Field(min_length=1, strict=True, max_length=128)] = Field(description="The name of payin category specified in the quote request.", alias="payinCategory")
    adjusted_exchange_rate: Optional[AdjustedExchangeRate] = Field(default=None, alias="adjustedExchangeRate")
    fees: Optional[List[FeeSummary]] = Field(default=None, description="A summary of fees included in this quote.")
    created_at: Optional[datetime] = Field(default=None, description="The time when this quote was created, specified in UTC.", alias="createdAt")
    expires_at: Optional[datetime] = Field(default=None, description="The time when this quote expires, specified in UTC.", alias="expiresAt")
    destination_blockchain_network: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=20)]] = Field(default=None, description="The name of the blockchain network on which the beneficiary will receive this payment.", alias="destinationBlockchainNetwork")
    __properties: ClassVar[List[str]] = ["quoteId", "quoteStatus", "quoteAmountType", "sourceAmount", "destinationAmount", "sourceCurrency", "destinationCurrency", "sourceCountry", "destinationCountry", "payoutCategory", "payinCategory", "adjustedExchangeRate", "fees", "createdAt", "expiresAt", "destinationBlockchainNetwork"]

    @field_validator('source_currency')
    def source_currency_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z]{3,5}$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z]{3,5}$/")
        return value

    @field_validator('destination_currency')
    def destination_currency_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z]{3,5}$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z]{3,5}$/")
        return value

    @field_validator('source_country')
    def source_country_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-zA-Z]{2}$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z]{2}$/")
        return value

    @field_validator('destination_country')
    def destination_country_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-zA-Z]{2}$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z]{2}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Quote from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of adjusted_exchange_rate
        if self.adjusted_exchange_rate:
            _dict['adjustedExchangeRate'] = self.adjusted_exchange_rate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in fees (list)
        _items = []
        if self.fees:
            for _item_fees in self.fees:
                if _item_fees:
                    _items.append(_item_fees.to_dict())
            _dict['fees'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Quote from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "quoteId": obj.get("quoteId"),
            "quoteStatus": obj.get("quoteStatus"),
            "quoteAmountType": obj.get("quoteAmountType") if obj.get("quoteAmountType") is not None else QuoteAmountType.SOURCE_AMOUNT,
            "sourceAmount": obj.get("sourceAmount"),
            "destinationAmount": obj.get("destinationAmount"),
            "sourceCurrency": obj.get("sourceCurrency"),
            "destinationCurrency": obj.get("destinationCurrency"),
            "sourceCountry": obj.get("sourceCountry"),
            "destinationCountry": obj.get("destinationCountry"),
            "payoutCategory": obj.get("payoutCategory"),
            "payinCategory": obj.get("payinCategory"),
            "adjustedExchangeRate": AdjustedExchangeRate.from_dict(obj["adjustedExchangeRate"]) if obj.get("adjustedExchangeRate") is not None else None,
            "fees": [FeeSummary.from_dict(_item) for _item in obj["fees"]] if obj.get("fees") is not None else None,
            "createdAt": obj.get("createdAt"),
            "expiresAt": obj.get("expiresAt"),
            "destinationBlockchainNetwork": obj.get("destinationBlockchainNetwork")
        })
        return _obj


