# coding: utf-8

"""
    Payments Direct API

    Use the Payments Direct API to get quotes, create and manage payments, and manage originator and beneficiary identities.  ## API environments  The Payments Direct API offers the following environments:  | <div style=\"width:90px\">Environment</div>  | Base URL                      | Description                               | | ------------------------------------------ | ----------------------------- | ----------------------------------------- | | Test                                       | `https://api.test.ripple.com` | Test environment with simulated currency. | | Production                                 | `https://api.ripple.com`      | Production environment                    |  ## API authentication  All {{process.env.VAR_RPD}} API operations require a Bearer access token specific to the environment you're using. Ripple provides a secure model for authentication and authorization by providing access tokens scoped for a set of credentials.  ### Generate client ID and client secret  You will need your _client ID_ and _client secret_ to obtain an access token.  If you do not already have your client ID and client secret, do the following:  1. Log into the Ripple Payments UI. 2. In the left navigation menu, click **Settings**. 3. Under **Administration**, click **API Credentials**. 4. In the dropdown list next to the page title, select the access environment. For example, to provision credentials for the test environment, select **Test** from the dropdown list. 5. In the upper right corner of the page, click **New Credential**. 6. Click **Save and Generate Key**.  **Caution:** The *client secret* is displayed only once when you are creating new credentials. You cannot retrieve the secret after exiting this page. Copy and store the client secret securely and share it with authorized individuals in accordance with your organization's security policy.  You can now use the client ID and client secret to generate access tokens using the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation.  ### Request an access token  To get an access token, use the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation with your `client_id` and `client_secret`. The response contains a token in the `access_token` field.  We recommend rotating your API credentials at regular intervals according to your organization's security policy.  **Note**: Authentication tokens are not a fixed length and can vary, avoid validating tokens based on character length. 

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from ripple_payments_direct.models.adjusted_exchange_rate import AdjustedExchangeRate
from ripple_payments_direct.models.destination import Destination
from ripple_payments_direct.models.fee_summary import FeeSummary
from ripple_payments_direct.models.originator import Originator
from ripple_payments_direct.models.payment_state import PaymentState
from ripple_payments_direct.models.transaction_details import TransactionDetails
from typing import Optional, Set
from typing_extensions import Self

class Payment(BaseModel):
    """
    Payment
    """ # noqa: E501
    payment_id: Annotated[str, Field(strict=True, max_length=36)] = Field(description="The unique ID that identifies this payment. This value is the same as the quote ID.", alias="paymentId")
    crypto_transaction_hash: Optional[StrictStr] = Field(default=None, description="Transaction hash of the crypto payment on the destination blockchain network", alias="cryptoTransactionHash")
    initiated_at: Optional[datetime] = Field(default=None, description="The time at which the payment was initiated, specified in UTC.", alias="initiatedAt")
    expires_at: Optional[datetime] = Field(default=None, description="The time at which this payment expires, specified in UTC.", alias="expiresAt")
    last_state_updated_at: Optional[datetime] = Field(default=None, description="The time at which the payment state was last updated for this payment, specified in UTC.", alias="lastStateUpdatedAt")
    payment_state: PaymentState = Field(alias="paymentState")
    originator: Optional[Originator] = None
    destination: Optional[Destination] = None
    adjusted_exchange_rate: Optional[AdjustedExchangeRate] = Field(default=None, alias="adjustedExchangeRate")
    fees: Optional[List[FeeSummary]] = Field(default=None, description="A summary of fees included in payment quote.")
    source_of_cash: Optional[StrictStr] = Field(default=None, description="Indicates the source of funds", alias="sourceOfCash")
    purpose_code: Optional[StrictStr] = Field(default=None, description="Indicates the purpose of the payment  For more information about the `purposeCode` options, see  [purposeCode](../../building-payment-request-body/#purposecode). ", alias="purposeCode")
    transaction_details: Optional[TransactionDetails] = Field(default=None, alias="transactionDetails")
    payment_labels: Optional[Annotated[List[Annotated[str, Field(strict=True, max_length=100)]], Field(max_length=10)]] = Field(default=None, description="List of labels associated with the payment. A label typically contains a UUID of your choice, designated as the batchId.", alias="paymentLabels")
    __properties: ClassVar[List[str]] = ["paymentId", "cryptoTransactionHash", "initiatedAt", "expiresAt", "lastStateUpdatedAt", "paymentState", "originator", "destination", "adjustedExchangeRate", "fees", "sourceOfCash", "purposeCode", "transactionDetails", "paymentLabels"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Payment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of originator
        if self.originator:
            _dict['originator'] = self.originator.to_dict()
        # override the default output from pydantic by calling `to_dict()` of destination
        if self.destination:
            _dict['destination'] = self.destination.to_dict()
        # override the default output from pydantic by calling `to_dict()` of adjusted_exchange_rate
        if self.adjusted_exchange_rate:
            _dict['adjustedExchangeRate'] = self.adjusted_exchange_rate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in fees (list)
        _items = []
        if self.fees:
            for _item_fees in self.fees:
                if _item_fees:
                    _items.append(_item_fees.to_dict())
            _dict['fees'] = _items
        # override the default output from pydantic by calling `to_dict()` of transaction_details
        if self.transaction_details:
            _dict['transactionDetails'] = self.transaction_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Payment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "paymentId": obj.get("paymentId"),
            "cryptoTransactionHash": obj.get("cryptoTransactionHash"),
            "initiatedAt": obj.get("initiatedAt"),
            "expiresAt": obj.get("expiresAt"),
            "lastStateUpdatedAt": obj.get("lastStateUpdatedAt"),
            "paymentState": obj.get("paymentState"),
            "originator": Originator.from_dict(obj["originator"]) if obj.get("originator") is not None else None,
            "destination": Destination.from_dict(obj["destination"]) if obj.get("destination") is not None else None,
            "adjustedExchangeRate": AdjustedExchangeRate.from_dict(obj["adjustedExchangeRate"]) if obj.get("adjustedExchangeRate") is not None else None,
            "fees": [FeeSummary.from_dict(_item) for _item in obj["fees"]] if obj.get("fees") is not None else None,
            "sourceOfCash": obj.get("sourceOfCash"),
            "purposeCode": obj.get("purposeCode"),
            "transactionDetails": TransactionDetails.from_dict(obj["transactionDetails"]) if obj.get("transactionDetails") is not None else None,
            "paymentLabels": obj.get("paymentLabels")
        })
        return _obj


