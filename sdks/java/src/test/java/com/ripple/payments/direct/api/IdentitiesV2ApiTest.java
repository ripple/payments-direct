/*
 * Payments Direct API
 * Use the Payments Direct API to get quotes, create and manage payments, and manage originator and beneficiary identities.  ## API environments  The Payments Direct API offers the following environments:  | <div style=\"width:90px\">Environment</div>  | Base URL                      | Description                               | | ------------------------------------------ | ----------------------------- | ----------------------------------------- | | Test                                       | `https://api.test.ripple.com` | Test environment with simulated currency. | | Production                                 | `https://api.ripple.com`      | Production environment                    |  ## API authentication  All {{process.env.VAR_RPD}} API operations require a Bearer access token specific to the environment you're using. Ripple provides a secure model for authentication and authorization by providing access tokens scoped for a set of credentials.  ### Generate client ID and client secret  You will need your _client ID_ and _client secret_ to obtain an access token.  If you do not already have your client ID and client secret, do the following:  1. Log into the Ripple Payments UI. 2. In the left navigation menu, click **Settings**. 3. Under **Administration**, click **API Credentials**. 4. In the dropdown list next to the page title, select the access environment. For example, to provision credentials for the test environment, select **Test** from the dropdown list. 5. In the upper right corner of the page, click **New Credential**. 6. Click **Save and Generate Key**.  **Caution:** The *client secret* is displayed only once when you are creating new credentials. You cannot retrieve the secret after exiting this page. Copy and store the client secret securely and share it with authorized individuals in accordance with your organization's security policy.  You can now use the client ID and client secret to generate access tokens using the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation.  ### Request an access token  To get an access token, use the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation with your `client_id` and `client_secret`. The response contains a token in the `access_token` field.  We recommend rotating your API credentials at regular intervals according to your organization's security policy.  **Note**: Authentication tokens are not a fixed length and can vary, avoid validating tokens based on character length. 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ripple.payments.direct.api;

import com.ripple.payments.direct.ApiException;
import com.ripple.payments.direct.model.CreateIdentityRequestV2DTO;
import com.ripple.payments.direct.model.CreateIdentityResponseDTO;
import com.ripple.payments.direct.model.ErrorResponseDTO;
import com.ripple.payments.direct.model.IdentityResponseV2DTO;
import com.ripple.payments.direct.model.IdentityTypeV2DTO;
import com.ripple.payments.direct.model.ListIdentitiesResponseV2DTO;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for IdentitiesV2Api
 */
@Disabled
public class IdentitiesV2ApiTest {

    private final IdentitiesV2Api api = new IdentitiesV2Api();

    /**
     * Create a new identity
     *
     * Create a new identity.  &lt;!-- **Tutorials**  * Learn how to [Create an identity](../../tutorials/create-an-identity/). --&gt; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createIdentityV2Test() throws ApiException {
        CreateIdentityRequestV2DTO createIdentityRequestV2DTO = null;
        CreateIdentityResponseDTO response = api.createIdentityV2(createIdentityRequestV2DTO);

        // TODO: test validations
    }
    /**
     * Delete an identity
     *
     * Delete an identity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deactivateIdentityV2Test() throws ApiException {
        String identityId = null;
        api.deactivateIdentityV2(identityId);

        // TODO: test validations
    }
    /**
     * Get a list of identities
     *
     * Get a list of identities that match the query parameters.  **Note**: Depending on the number of identities in your account, not all of them may be returned even if they match your query parameters. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getIdentitiesV2Test() throws ApiException {
        IdentityTypeV2DTO identityType = null;
        String nickName = null;
        ListIdentitiesResponseV2DTO response = api.getIdentitiesV2(identityType, nickName);

        // TODO: test validations
    }
    /**
     * Get an identity by ID
     *
     * Get an identity by its unique ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getIdentityByIdV2Test() throws ApiException {
        String identityId = null;
        Integer version = null;
        IdentityResponseV2DTO response = api.getIdentityByIdV2(identityId, version);

        // TODO: test validations
    }
}
