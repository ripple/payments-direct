/*
 * Payments Direct API
 * Use the Payments Direct API to get quotes, create and manage payments, and manage originator and beneficiary identities.  ## API environments  The Payments Direct API offers the following environments:  | <div style=\"width:90px\">Environment</div>  | Base URL                      | Description                               | | ------------------------------------------ | ----------------------------- | ----------------------------------------- | | Test                                       | `https://api.test.ripple.com` | Test environment with simulated currency. | | Production                                 | `https://api.ripple.com`      | Production environment                    |  ## API authentication  All {{process.env.VAR_RPD}} API operations require a Bearer access token specific to the environment you're using. Ripple provides a secure model for authentication and authorization by providing access tokens scoped for a set of credentials.  ### Generate client ID and client secret  You will need your _client ID_ and _client secret_ to obtain an access token.  If you do not already have your client ID and client secret, do the following:  1. Log into the Ripple Payments UI. 2. In the left navigation menu, click **Settings**. 3. Under **Administration**, click **API Credentials**. 4. In the dropdown list next to the page title, select the access environment. For example, to provision credentials for the test environment, select **Test** from the dropdown list. 5. In the upper right corner of the page, click **New Credential**. 6. Click **Save and Generate Key**.  **Caution:** The *client secret* is displayed only once when you are creating new credentials. You cannot retrieve the secret after exiting this page. Copy and store the client secret securely and share it with authorized individuals in accordance with your organization's security policy.  You can now use the client ID and client secret to generate access tokens using the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation.  ### Request an access token  To get an access token, use the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation with your `client_id` and `client_secret`. The response contains a token in the `access_token` field.  We recommend rotating your API credentials at regular intervals according to your organization's security policy.  **Note**: Authentication tokens are not a fixed length and can vary, avoid validating tokens based on character length. 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ripple.payments.direct.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.ripple.payments.direct.model.AdjustedExchangeRateDTO;
import com.ripple.payments.direct.model.DestinationDTO;
import com.ripple.payments.direct.model.FeeSummaryDTO;
import com.ripple.payments.direct.model.OriginatorDTO;
import com.ripple.payments.direct.model.PaymentErrorDTO;
import com.ripple.payments.direct.model.PaymentStateDTO;
import com.ripple.payments.direct.model.TransactionDetailsDTO;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for PaymentWithDetailsDTO
 */
class PaymentWithDetailsDTOTest {
    private final PaymentWithDetailsDTO model = new PaymentWithDetailsDTO();

    /**
     * Model tests for PaymentWithDetailsDTO
     */
    @Test
    void testPaymentWithDetailsDTO() {
        // TODO: test PaymentWithDetailsDTO
    }

    /**
     * Test the property 'paymentId'
     */
    @Test
    void paymentIdTest() {
        // TODO: test paymentId
    }

    /**
     * Test the property 'cryptoTransactionHash'
     */
    @Test
    void cryptoTransactionHashTest() {
        // TODO: test cryptoTransactionHash
    }

    /**
     * Test the property 'initiatedAt'
     */
    @Test
    void initiatedAtTest() {
        // TODO: test initiatedAt
    }

    /**
     * Test the property 'expiresAt'
     */
    @Test
    void expiresAtTest() {
        // TODO: test expiresAt
    }

    /**
     * Test the property 'lastStateUpdatedAt'
     */
    @Test
    void lastStateUpdatedAtTest() {
        // TODO: test lastStateUpdatedAt
    }

    /**
     * Test the property 'paymentState'
     */
    @Test
    void paymentStateTest() {
        // TODO: test paymentState
    }

    /**
     * Test the property 'originator'
     */
    @Test
    void originatorTest() {
        // TODO: test originator
    }

    /**
     * Test the property 'destination'
     */
    @Test
    void destinationTest() {
        // TODO: test destination
    }

    /**
     * Test the property 'adjustedExchangeRate'
     */
    @Test
    void adjustedExchangeRateTest() {
        // TODO: test adjustedExchangeRate
    }

    /**
     * Test the property 'fees'
     */
    @Test
    void feesTest() {
        // TODO: test fees
    }

    /**
     * Test the property 'sourceOfCash'
     */
    @Test
    void sourceOfCashTest() {
        // TODO: test sourceOfCash
    }

    /**
     * Test the property 'purposeCode'
     */
    @Test
    void purposeCodeTest() {
        // TODO: test purposeCode
    }

    /**
     * Test the property 'transactionDetails'
     */
    @Test
    void transactionDetailsTest() {
        // TODO: test transactionDetails
    }

    /**
     * Test the property 'errors'
     */
    @Test
    void errorsTest() {
        // TODO: test errors
    }

    /**
     * Test the property 'paymentLabels'
     */
    @Test
    void paymentLabelsTest() {
        // TODO: test paymentLabels
    }

}
