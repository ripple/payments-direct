/*
 * Payments Direct API
 * Use the Payments Direct API to get quotes, create and manage payments, and manage originator and beneficiary identities.  ## API environments  The Payments Direct API offers the following environments:  | <div style=\"width:90px\">Environment</div>  | Base URL                      | Description                               | | ------------------------------------------ | ----------------------------- | ----------------------------------------- | | Test                                       | `https://api.test.ripple.com` | Test environment with simulated currency. | | Production                                 | `https://api.ripple.com`      | Production environment                    |  ## API authentication  All {{process.env.VAR_RPD}} API operations require a Bearer access token specific to the environment you're using. Ripple provides a secure model for authentication and authorization by providing access tokens scoped for a set of credentials.  ### Generate client ID and client secret  You will need your _client ID_ and _client secret_ to obtain an access token.  If you do not already have your client ID and client secret, do the following:  1. Log into the Ripple Payments UI. 2. In the left navigation menu, click **Settings**. 3. Under **Administration**, click **API Credentials**. 4. In the dropdown list next to the page title, select the access environment. For example, to provision credentials for the test environment, select **Test** from the dropdown list. 5. In the upper right corner of the page, click **New Credential**. 6. Click **Save and Generate Key**.  **Caution:** The *client secret* is displayed only once when you are creating new credentials. You cannot retrieve the secret after exiting this page. Copy and store the client secret securely and share it with authorized individuals in accordance with your organization's security policy.  You can now use the client ID and client secret to generate access tokens using the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation.  ### Request an access token  To get an access token, use the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation with your `client_id` and `client_secret`. The response contains a token in the `access_token` field.  We recommend rotating your API credentials at regular intervals according to your organization's security policy.  **Note**: Authentication tokens are not a fixed length and can vary, avoid validating tokens based on character length. 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ripple.payments.direct.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Payment beneficiary and destination details.
 */
@JsonPropertyOrder({
  DestinationDTO.JSON_PROPERTY_DESTINATION_AMOUNT,
  DestinationDTO.JSON_PROPERTY_DESTINATION_COUNTRY,
  DestinationDTO.JSON_PROPERTY_DESTINATION_CURRENCY,
  DestinationDTO.JSON_PROPERTY_DESTINATION_BLOCKCHAIN_NETWORK,
  DestinationDTO.JSON_PROPERTY_BENEFICIARY_IDENTITY_ID,
  DestinationDTO.JSON_PROPERTY_BENEFICIARY_IDENTITY_VERSION,
  DestinationDTO.JSON_PROPERTY_BENEFICIARY_IDENTITY_NICK_NAME,
  DestinationDTO.JSON_PROPERTY_PAYOUT
})
@JsonTypeName("Destination")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0")
public class DestinationDTO {
  public static final String JSON_PROPERTY_DESTINATION_AMOUNT = "destinationAmount";
  @javax.annotation.Nullable
  private Double destinationAmount;

  public static final String JSON_PROPERTY_DESTINATION_COUNTRY = "destinationCountry";
  @javax.annotation.Nullable
  private String destinationCountry;

  public static final String JSON_PROPERTY_DESTINATION_CURRENCY = "destinationCurrency";
  @javax.annotation.Nullable
  private String destinationCurrency;

  public static final String JSON_PROPERTY_DESTINATION_BLOCKCHAIN_NETWORK = "destinationBlockchainNetwork";
  @javax.annotation.Nullable
  private String destinationBlockchainNetwork;

  public static final String JSON_PROPERTY_BENEFICIARY_IDENTITY_ID = "beneficiaryIdentityId";
  @javax.annotation.Nullable
  private UUID beneficiaryIdentityId;

  public static final String JSON_PROPERTY_BENEFICIARY_IDENTITY_VERSION = "beneficiaryIdentityVersion";
  @javax.annotation.Nullable
  private Integer beneficiaryIdentityVersion;

  public static final String JSON_PROPERTY_BENEFICIARY_IDENTITY_NICK_NAME = "beneficiaryIdentityNickName";
  @javax.annotation.Nullable
  private String beneficiaryIdentityNickName;

  public static final String JSON_PROPERTY_PAYOUT = "payout";
  @javax.annotation.Nullable
  private String payout;

  public DestinationDTO() {
  }

  public DestinationDTO destinationAmount(@javax.annotation.Nullable Double destinationAmount) {
    
    this.destinationAmount = destinationAmount;
    return this;
  }

  /**
   * The amount received by the payment beneficiary. This field can hold a value with up to 6 decimal places.
   * @return destinationAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESTINATION_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getDestinationAmount() {
    return destinationAmount;
  }


  @JsonProperty(JSON_PROPERTY_DESTINATION_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDestinationAmount(@javax.annotation.Nullable Double destinationAmount) {
    this.destinationAmount = destinationAmount;
  }

  public DestinationDTO destinationCountry(@javax.annotation.Nullable String destinationCountry) {
    
    this.destinationCountry = destinationCountry;
    return this;
  }

  /**
   * The country where the beneficiary is located specified in Alpha-2 Code format as defined in the ISO CountryCode ISO 3166-1 list. If the beneficiary is an individual, then this value is their country of residence. If the beneficiary is an institution, then this value is their the country of incorporation.
   * @return destinationCountry
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESTINATION_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDestinationCountry() {
    return destinationCountry;
  }


  @JsonProperty(JSON_PROPERTY_DESTINATION_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDestinationCountry(@javax.annotation.Nullable String destinationCountry) {
    this.destinationCountry = destinationCountry;
  }

  public DestinationDTO destinationCurrency(@javax.annotation.Nullable String destinationCurrency) {
    
    this.destinationCurrency = destinationCurrency;
    return this;
  }

  /**
   * The currency code of the currency in which the beneficiary will receive this payment.
   * @return destinationCurrency
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESTINATION_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDestinationCurrency() {
    return destinationCurrency;
  }


  @JsonProperty(JSON_PROPERTY_DESTINATION_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDestinationCurrency(@javax.annotation.Nullable String destinationCurrency) {
    this.destinationCurrency = destinationCurrency;
  }

  public DestinationDTO destinationBlockchainNetwork(@javax.annotation.Nullable String destinationBlockchainNetwork) {
    
    this.destinationBlockchainNetwork = destinationBlockchainNetwork;
    return this;
  }

  /**
   * The name of the blockchain network on which the beneficiary will receive this payment.
   * @return destinationBlockchainNetwork
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESTINATION_BLOCKCHAIN_NETWORK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDestinationBlockchainNetwork() {
    return destinationBlockchainNetwork;
  }


  @JsonProperty(JSON_PROPERTY_DESTINATION_BLOCKCHAIN_NETWORK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDestinationBlockchainNetwork(@javax.annotation.Nullable String destinationBlockchainNetwork) {
    this.destinationBlockchainNetwork = destinationBlockchainNetwork;
  }

  public DestinationDTO beneficiaryIdentityId(@javax.annotation.Nullable UUID beneficiaryIdentityId) {
    
    this.beneficiaryIdentityId = beneficiaryIdentityId;
    return this;
  }

  /**
   * The unique ID associated with the payment beneficiary&#39;s identity record.
   * @return beneficiaryIdentityId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BENEFICIARY_IDENTITY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UUID getBeneficiaryIdentityId() {
    return beneficiaryIdentityId;
  }


  @JsonProperty(JSON_PROPERTY_BENEFICIARY_IDENTITY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBeneficiaryIdentityId(@javax.annotation.Nullable UUID beneficiaryIdentityId) {
    this.beneficiaryIdentityId = beneficiaryIdentityId;
  }

  public DestinationDTO beneficiaryIdentityVersion(@javax.annotation.Nullable Integer beneficiaryIdentityVersion) {
    
    this.beneficiaryIdentityVersion = beneficiaryIdentityVersion;
    return this;
  }

  /**
   * The current version of the beneficiary&#39;s identity record.
   * @return beneficiaryIdentityVersion
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BENEFICIARY_IDENTITY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getBeneficiaryIdentityVersion() {
    return beneficiaryIdentityVersion;
  }


  @JsonProperty(JSON_PROPERTY_BENEFICIARY_IDENTITY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBeneficiaryIdentityVersion(@javax.annotation.Nullable Integer beneficiaryIdentityVersion) {
    this.beneficiaryIdentityVersion = beneficiaryIdentityVersion;
  }

  public DestinationDTO beneficiaryIdentityNickName(@javax.annotation.Nullable String beneficiaryIdentityNickName) {
    
    this.beneficiaryIdentityNickName = beneficiaryIdentityNickName;
    return this;
  }

  /**
   * Nickname associated with the beneficiary&#39;s identity record.
   * @return beneficiaryIdentityNickName
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BENEFICIARY_IDENTITY_NICK_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBeneficiaryIdentityNickName() {
    return beneficiaryIdentityNickName;
  }


  @JsonProperty(JSON_PROPERTY_BENEFICIARY_IDENTITY_NICK_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBeneficiaryIdentityNickName(@javax.annotation.Nullable String beneficiaryIdentityNickName) {
    this.beneficiaryIdentityNickName = beneficiaryIdentityNickName;
  }

  public DestinationDTO payout(@javax.annotation.Nullable String payout) {
    
    this.payout = payout;
    return this;
  }

  /**
   * The payout category for this payment.
   * @return payout
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAYOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPayout() {
    return payout;
  }


  @JsonProperty(JSON_PROPERTY_PAYOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPayout(@javax.annotation.Nullable String payout) {
    this.payout = payout;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinationDTO destination = (DestinationDTO) o;
    return Objects.equals(this.destinationAmount, destination.destinationAmount) &&
        Objects.equals(this.destinationCountry, destination.destinationCountry) &&
        Objects.equals(this.destinationCurrency, destination.destinationCurrency) &&
        Objects.equals(this.destinationBlockchainNetwork, destination.destinationBlockchainNetwork) &&
        Objects.equals(this.beneficiaryIdentityId, destination.beneficiaryIdentityId) &&
        Objects.equals(this.beneficiaryIdentityVersion, destination.beneficiaryIdentityVersion) &&
        Objects.equals(this.beneficiaryIdentityNickName, destination.beneficiaryIdentityNickName) &&
        Objects.equals(this.payout, destination.payout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destinationAmount, destinationCountry, destinationCurrency, destinationBlockchainNetwork, beneficiaryIdentityId, beneficiaryIdentityVersion, beneficiaryIdentityNickName, payout);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinationDTO {\n");
    sb.append("    destinationAmount: ").append(toIndentedString(destinationAmount)).append("\n");
    sb.append("    destinationCountry: ").append(toIndentedString(destinationCountry)).append("\n");
    sb.append("    destinationCurrency: ").append(toIndentedString(destinationCurrency)).append("\n");
    sb.append("    destinationBlockchainNetwork: ").append(toIndentedString(destinationBlockchainNetwork)).append("\n");
    sb.append("    beneficiaryIdentityId: ").append(toIndentedString(beneficiaryIdentityId)).append("\n");
    sb.append("    beneficiaryIdentityVersion: ").append(toIndentedString(beneficiaryIdentityVersion)).append("\n");
    sb.append("    beneficiaryIdentityNickName: ").append(toIndentedString(beneficiaryIdentityNickName)).append("\n");
    sb.append("    payout: ").append(toIndentedString(payout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `destinationAmount` to the URL query string
    if (getDestinationAmount() != null) {
      try {
        joiner.add(String.format("%sdestinationAmount%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDestinationAmount()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `destinationCountry` to the URL query string
    if (getDestinationCountry() != null) {
      try {
        joiner.add(String.format("%sdestinationCountry%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDestinationCountry()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `destinationCurrency` to the URL query string
    if (getDestinationCurrency() != null) {
      try {
        joiner.add(String.format("%sdestinationCurrency%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDestinationCurrency()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `destinationBlockchainNetwork` to the URL query string
    if (getDestinationBlockchainNetwork() != null) {
      try {
        joiner.add(String.format("%sdestinationBlockchainNetwork%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDestinationBlockchainNetwork()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `beneficiaryIdentityId` to the URL query string
    if (getBeneficiaryIdentityId() != null) {
      try {
        joiner.add(String.format("%sbeneficiaryIdentityId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBeneficiaryIdentityId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `beneficiaryIdentityVersion` to the URL query string
    if (getBeneficiaryIdentityVersion() != null) {
      try {
        joiner.add(String.format("%sbeneficiaryIdentityVersion%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBeneficiaryIdentityVersion()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `beneficiaryIdentityNickName` to the URL query string
    if (getBeneficiaryIdentityNickName() != null) {
      try {
        joiner.add(String.format("%sbeneficiaryIdentityNickName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBeneficiaryIdentityNickName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `payout` to the URL query string
    if (getPayout() != null) {
      try {
        joiner.add(String.format("%spayout%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPayout()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

