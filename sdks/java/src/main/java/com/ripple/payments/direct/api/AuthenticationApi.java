/*
 * Payments Direct API
 * Use the Payments Direct API to get quotes, create and manage payments, and manage originator and beneficiary identities.  ## API environments  The Payments Direct API offers the following environments:  | <div style=\"width:90px\">Environment</div>  | Base URL                      | Description                               | | ------------------------------------------ | ----------------------------- | ----------------------------------------- | | Test                                       | `https://api.test.ripple.com` | Test environment with simulated currency. | | Production                                 | `https://api.ripple.com`      | Production environment                    |  ## API authentication  All {{process.env.VAR_RPD}} API operations require a Bearer access token specific to the environment you're using. Ripple provides a secure model for authentication and authorization by providing access tokens scoped for a set of credentials.  ### Generate client ID and client secret  You will need your _client ID_ and _client secret_ to obtain an access token.  If you do not already have your client ID and client secret, do the following:  1. Log into the Ripple Payments UI. 2. In the left navigation menu, click **Settings**. 3. Under **Administration**, click **API Credentials**. 4. In the dropdown list next to the page title, select the access environment. For example, to provision credentials for the test environment, select **Test** from the dropdown list. 5. In the upper right corner of the page, click **New Credential**. 6. Click **Save and Generate Key**.  **Caution:** The *client secret* is displayed only once when you are creating new credentials. You cannot retrieve the secret after exiting this page. Copy and store the client secret securely and share it with authorized individuals in accordance with your organization's security policy.  You can now use the client ID and client secret to generate access tokens using the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation.  ### Request an access token  To get an access token, use the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation with your `client_id` and `client_secret`. The response contains a token in the `access_token` field.  We recommend rotating your API credentials at regular intervals according to your organization's security policy.  **Note**: Authentication tokens are not a fixed length and can vary, avoid validating tokens based on character length. 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ripple.payments.direct.api;

import com.fasterxml.jackson.core.type.TypeReference;

import com.ripple.payments.direct.ApiException;
import com.ripple.payments.direct.ApiClient;
import com.ripple.payments.direct.BaseApi;
import com.ripple.payments.direct.Configuration;
import com.ripple.payments.direct.Pair;

import com.ripple.payments.direct.model.AuthenticationRequestDTO;
import com.ripple.payments.direct.model.AuthenticationResponseDTO;
import com.ripple.payments.direct.model.ErrorResponseDTO;
import com.ripple.payments.direct.model.ValidateTokenResponseDTO;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0")
public class AuthenticationApi extends BaseApi {

  public AuthenticationApi() {
    super(Configuration.getDefaultApiClient());
  }

  public AuthenticationApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * Request an access token
   * Request an access token for authentication with Ripple APIs.  You need to request a token for the environment you want to authenticate with.  **Note**: The length of the access token isn&#39;t fixed, hence it can vary. Avoid validating tokens based on character length.  **Tutorials**  * Learn how to [Request an access token](../../tutorials/request-an-access-token/).  #### Environments  | Environment | Domain | Description | | --- | --- | --- | | Test | &#x60;api.test.ripple.com&#x60; | Test environment with simulated currency. | | Production | &#x60;api.ripple.com&#x60; | Production environment for Ripple Payments Direct | 
   * @param authenticationRequestDTO  (required)
   * @param authorization  (optional)
   * @return AuthenticationResponseDTO
   * @throws ApiException if fails to make API call
   */
  public AuthenticationResponseDTO authenticate(@javax.annotation.Nonnull AuthenticationRequestDTO authenticationRequestDTO, @javax.annotation.Nullable String authorization) throws ApiException {
    return this.authenticate(authenticationRequestDTO, authorization, Collections.emptyMap());
  }


  /**
   * Request an access token
   * Request an access token for authentication with Ripple APIs.  You need to request a token for the environment you want to authenticate with.  **Note**: The length of the access token isn&#39;t fixed, hence it can vary. Avoid validating tokens based on character length.  **Tutorials**  * Learn how to [Request an access token](../../tutorials/request-an-access-token/).  #### Environments  | Environment | Domain | Description | | --- | --- | --- | | Test | &#x60;api.test.ripple.com&#x60; | Test environment with simulated currency. | | Production | &#x60;api.ripple.com&#x60; | Production environment for Ripple Payments Direct | 
   * @param authenticationRequestDTO  (required)
   * @param authorization  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return AuthenticationResponseDTO
   * @throws ApiException if fails to make API call
   */
  public AuthenticationResponseDTO authenticate(@javax.annotation.Nonnull AuthenticationRequestDTO authenticationRequestDTO, @javax.annotation.Nullable String authorization, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = authenticationRequestDTO;
    
    // verify the required parameter 'authenticationRequestDTO' is set
    if (authenticationRequestDTO == null) {
      throw new ApiException(400, "Missing the required parameter 'authenticationRequestDTO' when calling authenticate");
    }
    
    // create path and map variables
    String localVarPath = "/v2/oauth/token";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (authorization != null)
      localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json", "application/x-www-form-urlencoded"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BasicAuth" };

    TypeReference<AuthenticationResponseDTO> localVarReturnType = new TypeReference<AuthenticationResponseDTO>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Test access token
   * Test if an access token can be used for authentication with Ripple APIs and how much time remains on it.
   * @return List&lt;ValidateTokenResponseDTO&gt;
   * @throws ApiException if fails to make API call
   */
  public List<ValidateTokenResponseDTO> testAuthToken() throws ApiException {
    return this.testAuthToken(Collections.emptyMap());
  }


  /**
   * Test access token
   * Test if an access token can be used for authentication with Ripple APIs and how much time remains on it.
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;ValidateTokenResponseDTO&gt;
   * @throws ApiException if fails to make API call
   */
  public List<ValidateTokenResponseDTO> testAuthToken(Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/v2/oauth/token/test";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json", "text/plain"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "Bearer" };

    TypeReference<List<ValidateTokenResponseDTO>> localVarReturnType = new TypeReference<List<ValidateTokenResponseDTO>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/json", "text/plain"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "Bearer" };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
