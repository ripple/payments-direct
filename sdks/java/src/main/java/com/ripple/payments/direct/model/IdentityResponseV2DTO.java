/*
 * Payments Direct API
 * Use the Payments Direct API to get quotes, create and manage payments, and manage originator and beneficiary identities.  ## API environments  The Payments Direct API offers the following environments:  | <div style=\"width:90px\">Environment</div>  | Base URL                      | Description                               | | ------------------------------------------ | ----------------------------- | ----------------------------------------- | | Test                                       | `https://api.test.ripple.com` | Test environment with simulated currency. | | Production                                 | `https://api.ripple.com`      | Production environment                    |  ## API authentication  All {{process.env.VAR_RPD}} API operations require a Bearer access token specific to the environment you're using. Ripple provides a secure model for authentication and authorization by providing access tokens scoped for a set of credentials.  ### Generate client ID and client secret  You will need your _client ID_ and _client secret_ to obtain an access token.  If you do not already have your client ID and client secret, do the following:  1. Log into the Ripple Payments UI. 2. In the left navigation menu, click **Settings**. 3. Under **Administration**, click **API Credentials**. 4. In the dropdown list next to the page title, select the access environment. For example, to provision credentials for the test environment, select **Test** from the dropdown list. 5. In the upper right corner of the page, click **New Credential**. 6. Click **Save and Generate Key**.  **Caution:** The *client secret* is displayed only once when you are creating new credentials. You cannot retrieve the secret after exiting this page. Copy and store the client secret securely and share it with authorized individuals in accordance with your organization's security policy.  You can now use the client ID and client secret to generate access tokens using the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation.  ### Request an access token  To get an access token, use the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation with your `client_id` and `client_secret`. The response contains a token in the `access_token` field.  We recommend rotating your API credentials at regular intervals according to your organization's security policy.  **Note**: Authentication tokens are not a fixed length and can vary, avoid validating tokens based on character length. 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ripple.payments.direct.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.ripple.payments.direct.model.IdentityTypeV2DTO;
import com.ripple.payments.direct.model.StateTypeDTO;
import com.ripple.payments.direct.model.UseCaseTypeDTO;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * IdentityResponseV2DTO
 */
@JsonPropertyOrder({
  IdentityResponseV2DTO.JSON_PROPERTY_IDENTITY_ID,
  IdentityResponseV2DTO.JSON_PROPERTY_IDENTITY_TYPE,
  IdentityResponseV2DTO.JSON_PROPERTY_CREATED_AT,
  IdentityResponseV2DTO.JSON_PROPERTY_IDENTITY_STATE,
  IdentityResponseV2DTO.JSON_PROPERTY_NICK_NAME,
  IdentityResponseV2DTO.JSON_PROPERTY_PII_DATA,
  IdentityResponseV2DTO.JSON_PROPERTY_VERSION,
  IdentityResponseV2DTO.JSON_PROPERTY_USE_CASE_TYPE
})
@JsonTypeName("identity-response-v2")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0")
public class IdentityResponseV2DTO {
  public static final String JSON_PROPERTY_IDENTITY_ID = "identityId";
  @javax.annotation.Nonnull
  private String identityId;

  public static final String JSON_PROPERTY_IDENTITY_TYPE = "identityType";
  @javax.annotation.Nonnull
  private IdentityTypeV2DTO identityType;

  public static final String JSON_PROPERTY_CREATED_AT = "createdAt";
  @javax.annotation.Nonnull
  private OffsetDateTime createdAt;

  public static final String JSON_PROPERTY_IDENTITY_STATE = "identityState";
  @javax.annotation.Nonnull
  private StateTypeDTO identityState;

  public static final String JSON_PROPERTY_NICK_NAME = "nickName";
  @javax.annotation.Nullable
  private String nickName;

  public static final String JSON_PROPERTY_PII_DATA = "piiData";
  @javax.annotation.Nonnull
  private Map<String, Object> piiData = new HashMap<>();

  public static final String JSON_PROPERTY_VERSION = "version";
  @javax.annotation.Nonnull
  private Integer version;

  public static final String JSON_PROPERTY_USE_CASE_TYPE = "useCaseType";
  @javax.annotation.Nonnull
  private UseCaseTypeDTO useCaseType;

  public IdentityResponseV2DTO() {
  }

  public IdentityResponseV2DTO identityId(@javax.annotation.Nonnull String identityId) {
    
    this.identityId = identityId;
    return this;
  }

  /**
   * The unique ID of the identity
   * @return identityId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IDENTITY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getIdentityId() {
    return identityId;
  }


  @JsonProperty(JSON_PROPERTY_IDENTITY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIdentityId(@javax.annotation.Nonnull String identityId) {
    this.identityId = identityId;
  }

  public IdentityResponseV2DTO identityType(@javax.annotation.Nonnull IdentityTypeV2DTO identityType) {
    
    this.identityType = identityType;
    return this;
  }

  /**
   * Get identityType
   * @return identityType
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IDENTITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public IdentityTypeV2DTO getIdentityType() {
    return identityType;
  }


  @JsonProperty(JSON_PROPERTY_IDENTITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIdentityType(@javax.annotation.Nonnull IdentityTypeV2DTO identityType) {
    this.identityType = identityType;
  }

  public IdentityResponseV2DTO createdAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The time at which the identity was created
   * @return createdAt
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreatedAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }

  public IdentityResponseV2DTO identityState(@javax.annotation.Nonnull StateTypeDTO identityState) {
    
    this.identityState = identityState;
    return this;
  }

  /**
   * Get identityState
   * @return identityState
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IDENTITY_STATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public StateTypeDTO getIdentityState() {
    return identityState;
  }


  @JsonProperty(JSON_PROPERTY_IDENTITY_STATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIdentityState(@javax.annotation.Nonnull StateTypeDTO identityState) {
    this.identityState = identityState;
  }

  public IdentityResponseV2DTO nickName(@javax.annotation.Nullable String nickName) {
    
    this.nickName = nickName;
    return this;
  }

  /**
   * The nickname for the identity provided at the time of identity creation
   * @return nickName
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NICK_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNickName() {
    return nickName;
  }


  @JsonProperty(JSON_PROPERTY_NICK_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNickName(@javax.annotation.Nullable String nickName) {
    this.nickName = nickName;
  }

  public IdentityResponseV2DTO piiData(@javax.annotation.Nonnull Map<String, Object> piiData) {
    
    this.piiData = piiData;
    return this;
  }

  public IdentityResponseV2DTO putPiiDataItem(String key, Object piiDataItem) {
    this.piiData.put(key, piiDataItem);
    return this;
  }

  /**
   * PII data in JSON format
   * @return piiData
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PII_DATA)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.ALWAYS)

  public Map<String, Object> getPiiData() {
    return piiData;
  }


  @JsonProperty(JSON_PROPERTY_PII_DATA)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.ALWAYS)
  public void setPiiData(@javax.annotation.Nonnull Map<String, Object> piiData) {
    this.piiData = piiData;
  }

  public IdentityResponseV2DTO version(@javax.annotation.Nonnull Integer version) {
    
    this.version = version;
    return this;
  }

  /**
   * The version number of the identity
   * @return version
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getVersion() {
    return version;
  }


  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setVersion(@javax.annotation.Nonnull Integer version) {
    this.version = version;
  }

  public IdentityResponseV2DTO useCaseType(@javax.annotation.Nonnull UseCaseTypeDTO useCaseType) {
    
    this.useCaseType = useCaseType;
    return this;
  }

  /**
   * Get useCaseType
   * @return useCaseType
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_USE_CASE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UseCaseTypeDTO getUseCaseType() {
    return useCaseType;
  }


  @JsonProperty(JSON_PROPERTY_USE_CASE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUseCaseType(@javax.annotation.Nonnull UseCaseTypeDTO useCaseType) {
    this.useCaseType = useCaseType;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IdentityResponseV2DTO identityResponseV2 = (IdentityResponseV2DTO) o;
    return Objects.equals(this.identityId, identityResponseV2.identityId) &&
        Objects.equals(this.identityType, identityResponseV2.identityType) &&
        Objects.equals(this.createdAt, identityResponseV2.createdAt) &&
        Objects.equals(this.identityState, identityResponseV2.identityState) &&
        Objects.equals(this.nickName, identityResponseV2.nickName) &&
        Objects.equals(this.piiData, identityResponseV2.piiData) &&
        Objects.equals(this.version, identityResponseV2.version) &&
        Objects.equals(this.useCaseType, identityResponseV2.useCaseType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(identityId, identityType, createdAt, identityState, nickName, piiData, version, useCaseType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IdentityResponseV2DTO {\n");
    sb.append("    identityId: ").append(toIndentedString(identityId)).append("\n");
    sb.append("    identityType: ").append(toIndentedString(identityType)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    identityState: ").append(toIndentedString(identityState)).append("\n");
    sb.append("    nickName: ").append(toIndentedString(nickName)).append("\n");
    sb.append("    piiData: ").append(toIndentedString(piiData)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    useCaseType: ").append(toIndentedString(useCaseType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `identityId` to the URL query string
    if (getIdentityId() != null) {
      try {
        joiner.add(String.format("%sidentityId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIdentityId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `identityType` to the URL query string
    if (getIdentityType() != null) {
      try {
        joiner.add(String.format("%sidentityType%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIdentityType()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `createdAt` to the URL query string
    if (getCreatedAt() != null) {
      try {
        joiner.add(String.format("%screatedAt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCreatedAt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `identityState` to the URL query string
    if (getIdentityState() != null) {
      try {
        joiner.add(String.format("%sidentityState%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIdentityState()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `nickName` to the URL query string
    if (getNickName() != null) {
      try {
        joiner.add(String.format("%snickName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNickName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `piiData` to the URL query string
    if (getPiiData() != null) {
      for (String _key : getPiiData().keySet()) {
        try {
          joiner.add(String.format("%spiiData%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
              getPiiData().get(_key), URLEncoder.encode(String.valueOf(getPiiData().get(_key)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `version` to the URL query string
    if (getVersion() != null) {
      try {
        joiner.add(String.format("%sversion%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getVersion()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `useCaseType` to the URL query string
    if (getUseCaseType() != null) {
      try {
        joiner.add(String.format("%suseCaseType%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUseCaseType()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

