/*
 * Payments Direct API
 * Use the Payments Direct API to get quotes, create and manage payments, and manage originator and beneficiary identities.  ## API environments  The Payments Direct API offers the following environments:  | <div style=\"width:90px\">Environment</div>  | Base URL                      | Description                               | | ------------------------------------------ | ----------------------------- | ----------------------------------------- | | Test                                       | `https://api.test.ripple.com` | Test environment with simulated currency. | | Production                                 | `https://api.ripple.com`      | Production environment                    |  ## API authentication  All {{process.env.VAR_RPD}} API operations require a Bearer access token specific to the environment you're using. Ripple provides a secure model for authentication and authorization by providing access tokens scoped for a set of credentials.  ### Generate client ID and client secret  You will need your _client ID_ and _client secret_ to obtain an access token.  If you do not already have your client ID and client secret, do the following:  1. Log into the Ripple Payments UI. 2. In the left navigation menu, click **Settings**. 3. Under **Administration**, click **API Credentials**. 4. In the dropdown list next to the page title, select the access environment. For example, to provision credentials for the test environment, select **Test** from the dropdown list. 5. In the upper right corner of the page, click **New Credential**. 6. Click **Save and Generate Key**.  **Caution:** The *client secret* is displayed only once when you are creating new credentials. You cannot retrieve the secret after exiting this page. Copy and store the client secret securely and share it with authorized individuals in accordance with your organization's security policy.  You can now use the client ID and client secret to generate access tokens using the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation.  ### Request an access token  To get an access token, use the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation with your `client_id` and `client_secret`. The response contains a token in the `access_token` field.  We recommend rotating your API credentials at regular intervals according to your organization's security policy.  **Note**: Authentication tokens are not a fixed length and can vary, avoid validating tokens based on character length. 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ripple.payments.direct.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * A breakdown of the total fees included in this quote.
 */
@JsonPropertyOrder({
  TotalFeeBreakdownDTO.JSON_PROPERTY_CALCULATED_FEE,
  TotalFeeBreakdownDTO.JSON_PROPERTY_FEE_NAME,
  TotalFeeBreakdownDTO.JSON_PROPERTY_FEE_DESCRIPTION
})
@JsonTypeName("TotalFeeBreakdown")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0")
public class TotalFeeBreakdownDTO {
  public static final String JSON_PROPERTY_CALCULATED_FEE = "calculatedFee";
  @javax.annotation.Nullable
  private Double calculatedFee;

  public static final String JSON_PROPERTY_FEE_NAME = "feeName";
  @javax.annotation.Nullable
  private String feeName;

  public static final String JSON_PROPERTY_FEE_DESCRIPTION = "feeDescription";
  @javax.annotation.Nullable
  private String feeDescription;

  public TotalFeeBreakdownDTO() {
  }

  public TotalFeeBreakdownDTO calculatedFee(@javax.annotation.Nullable Double calculatedFee) {
    
    this.calculatedFee = calculatedFee;
    return this;
  }

  /**
   * Value of the fee when the configured fee unit is applied against the &#x60;value&#x60;.
   * @return calculatedFee
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CALCULATED_FEE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getCalculatedFee() {
    return calculatedFee;
  }


  @JsonProperty(JSON_PROPERTY_CALCULATED_FEE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCalculatedFee(@javax.annotation.Nullable Double calculatedFee) {
    this.calculatedFee = calculatedFee;
  }

  public TotalFeeBreakdownDTO feeName(@javax.annotation.Nullable String feeName) {
    
    this.feeName = feeName;
    return this;
  }

  /**
   * The name of the fee.
   * @return feeName
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FEE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFeeName() {
    return feeName;
  }


  @JsonProperty(JSON_PROPERTY_FEE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFeeName(@javax.annotation.Nullable String feeName) {
    this.feeName = feeName;
  }

  public TotalFeeBreakdownDTO feeDescription(@javax.annotation.Nullable String feeDescription) {
    
    this.feeDescription = feeDescription;
    return this;
  }

  /**
   * Description of the fee.
   * @return feeDescription
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FEE_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFeeDescription() {
    return feeDescription;
  }


  @JsonProperty(JSON_PROPERTY_FEE_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFeeDescription(@javax.annotation.Nullable String feeDescription) {
    this.feeDescription = feeDescription;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TotalFeeBreakdownDTO totalFeeBreakdown = (TotalFeeBreakdownDTO) o;
    return Objects.equals(this.calculatedFee, totalFeeBreakdown.calculatedFee) &&
        Objects.equals(this.feeName, totalFeeBreakdown.feeName) &&
        Objects.equals(this.feeDescription, totalFeeBreakdown.feeDescription);
  }

  @Override
  public int hashCode() {
    return Objects.hash(calculatedFee, feeName, feeDescription);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TotalFeeBreakdownDTO {\n");
    sb.append("    calculatedFee: ").append(toIndentedString(calculatedFee)).append("\n");
    sb.append("    feeName: ").append(toIndentedString(feeName)).append("\n");
    sb.append("    feeDescription: ").append(toIndentedString(feeDescription)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `calculatedFee` to the URL query string
    if (getCalculatedFee() != null) {
      try {
        joiner.add(String.format("%scalculatedFee%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCalculatedFee()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `feeName` to the URL query string
    if (getFeeName() != null) {
      try {
        joiner.add(String.format("%sfeeName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFeeName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `feeDescription` to the URL query string
    if (getFeeDescription() != null) {
      try {
        joiner.add(String.format("%sfeeDescription%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFeeDescription()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

