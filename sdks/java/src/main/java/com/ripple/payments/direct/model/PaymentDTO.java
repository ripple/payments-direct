/*
 * Payments Direct API
 * Use the Payments Direct API to get quotes, create and manage payments, and manage originator and beneficiary identities.  ## API environments  The Payments Direct API offers the following environments:  | <div style=\"width:90px\">Environment</div>  | Base URL                      | Description                               | | ------------------------------------------ | ----------------------------- | ----------------------------------------- | | Test                                       | `https://api.test.ripple.com` | Test environment with simulated currency. | | Production                                 | `https://api.ripple.com`      | Production environment                    |  ## API authentication  All {{process.env.VAR_RPD}} API operations require a Bearer access token specific to the environment you're using. Ripple provides a secure model for authentication and authorization by providing access tokens scoped for a set of credentials.  ### Generate client ID and client secret  You will need your _client ID_ and _client secret_ to obtain an access token.  If you do not already have your client ID and client secret, do the following:  1. Log into the Ripple Payments UI. 2. In the left navigation menu, click **Settings**. 3. Under **Administration**, click **API Credentials**. 4. In the dropdown list next to the page title, select the access environment. For example, to provision credentials for the test environment, select **Test** from the dropdown list. 5. In the upper right corner of the page, click **New Credential**. 6. Click **Save and Generate Key**.  **Caution:** The *client secret* is displayed only once when you are creating new credentials. You cannot retrieve the secret after exiting this page. Copy and store the client secret securely and share it with authorized individuals in accordance with your organization's security policy.  You can now use the client ID and client secret to generate access tokens using the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation.  ### Request an access token  To get an access token, use the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation with your `client_id` and `client_secret`. The response contains a token in the `access_token` field.  We recommend rotating your API credentials at regular intervals according to your organization's security policy.  **Note**: Authentication tokens are not a fixed length and can vary, avoid validating tokens based on character length. 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ripple.payments.direct.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.ripple.payments.direct.model.AdjustedExchangeRateDTO;
import com.ripple.payments.direct.model.DestinationDTO;
import com.ripple.payments.direct.model.FeeSummaryDTO;
import com.ripple.payments.direct.model.OriginatorDTO;
import com.ripple.payments.direct.model.PaymentStateDTO;
import com.ripple.payments.direct.model.TransactionDetailsDTO;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * PaymentDTO
 */
@JsonPropertyOrder({
  PaymentDTO.JSON_PROPERTY_PAYMENT_ID,
  PaymentDTO.JSON_PROPERTY_CRYPTO_TRANSACTION_HASH,
  PaymentDTO.JSON_PROPERTY_INITIATED_AT,
  PaymentDTO.JSON_PROPERTY_EXPIRES_AT,
  PaymentDTO.JSON_PROPERTY_LAST_STATE_UPDATED_AT,
  PaymentDTO.JSON_PROPERTY_PAYMENT_STATE,
  PaymentDTO.JSON_PROPERTY_ORIGINATOR,
  PaymentDTO.JSON_PROPERTY_DESTINATION,
  PaymentDTO.JSON_PROPERTY_ADJUSTED_EXCHANGE_RATE,
  PaymentDTO.JSON_PROPERTY_FEES,
  PaymentDTO.JSON_PROPERTY_SOURCE_OF_CASH,
  PaymentDTO.JSON_PROPERTY_PURPOSE_CODE,
  PaymentDTO.JSON_PROPERTY_TRANSACTION_DETAILS,
  PaymentDTO.JSON_PROPERTY_PAYMENT_LABELS
})
@JsonTypeName("Payment")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0")
public class PaymentDTO {
  public static final String JSON_PROPERTY_PAYMENT_ID = "paymentId";
  @javax.annotation.Nonnull
  private UUID paymentId;

  public static final String JSON_PROPERTY_CRYPTO_TRANSACTION_HASH = "cryptoTransactionHash";
  @javax.annotation.Nullable
  private String cryptoTransactionHash;

  public static final String JSON_PROPERTY_INITIATED_AT = "initiatedAt";
  @javax.annotation.Nullable
  private OffsetDateTime initiatedAt;

  public static final String JSON_PROPERTY_EXPIRES_AT = "expiresAt";
  @javax.annotation.Nullable
  private OffsetDateTime expiresAt;

  public static final String JSON_PROPERTY_LAST_STATE_UPDATED_AT = "lastStateUpdatedAt";
  @javax.annotation.Nullable
  private OffsetDateTime lastStateUpdatedAt;

  public static final String JSON_PROPERTY_PAYMENT_STATE = "paymentState";
  @javax.annotation.Nonnull
  private PaymentStateDTO paymentState;

  public static final String JSON_PROPERTY_ORIGINATOR = "originator";
  @javax.annotation.Nullable
  private OriginatorDTO originator;

  public static final String JSON_PROPERTY_DESTINATION = "destination";
  @javax.annotation.Nullable
  private DestinationDTO destination;

  public static final String JSON_PROPERTY_ADJUSTED_EXCHANGE_RATE = "adjustedExchangeRate";
  @javax.annotation.Nullable
  private AdjustedExchangeRateDTO adjustedExchangeRate;

  public static final String JSON_PROPERTY_FEES = "fees";
  @javax.annotation.Nullable
  private List<FeeSummaryDTO> fees = new ArrayList<>();

  public static final String JSON_PROPERTY_SOURCE_OF_CASH = "sourceOfCash";
  @javax.annotation.Nullable
  private String sourceOfCash;

  public static final String JSON_PROPERTY_PURPOSE_CODE = "purposeCode";
  @javax.annotation.Nullable
  private String purposeCode;

  public static final String JSON_PROPERTY_TRANSACTION_DETAILS = "transactionDetails";
  @javax.annotation.Nullable
  private TransactionDetailsDTO transactionDetails;

  public static final String JSON_PROPERTY_PAYMENT_LABELS = "paymentLabels";
  @javax.annotation.Nullable
  private List<String> paymentLabels = new ArrayList<>();

  public PaymentDTO() {
  }

  public PaymentDTO paymentId(@javax.annotation.Nonnull UUID paymentId) {
    
    this.paymentId = paymentId;
    return this;
  }

  /**
   * The unique ID that identifies this payment. This value is the same as the quote ID.
   * @return paymentId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PAYMENT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getPaymentId() {
    return paymentId;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPaymentId(@javax.annotation.Nonnull UUID paymentId) {
    this.paymentId = paymentId;
  }

  public PaymentDTO cryptoTransactionHash(@javax.annotation.Nullable String cryptoTransactionHash) {
    
    this.cryptoTransactionHash = cryptoTransactionHash;
    return this;
  }

  /**
   * Transaction hash of the crypto payment on the destination blockchain network
   * @return cryptoTransactionHash
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CRYPTO_TRANSACTION_HASH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCryptoTransactionHash() {
    return cryptoTransactionHash;
  }


  @JsonProperty(JSON_PROPERTY_CRYPTO_TRANSACTION_HASH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCryptoTransactionHash(@javax.annotation.Nullable String cryptoTransactionHash) {
    this.cryptoTransactionHash = cryptoTransactionHash;
  }

  public PaymentDTO initiatedAt(@javax.annotation.Nullable OffsetDateTime initiatedAt) {
    
    this.initiatedAt = initiatedAt;
    return this;
  }

  /**
   * The time at which the payment was initiated, specified in UTC.
   * @return initiatedAt
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INITIATED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getInitiatedAt() {
    return initiatedAt;
  }


  @JsonProperty(JSON_PROPERTY_INITIATED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInitiatedAt(@javax.annotation.Nullable OffsetDateTime initiatedAt) {
    this.initiatedAt = initiatedAt;
  }

  public PaymentDTO expiresAt(@javax.annotation.Nullable OffsetDateTime expiresAt) {
    
    this.expiresAt = expiresAt;
    return this;
  }

  /**
   * The time at which this payment expires, specified in UTC.
   * @return expiresAt
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXPIRES_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getExpiresAt() {
    return expiresAt;
  }


  @JsonProperty(JSON_PROPERTY_EXPIRES_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExpiresAt(@javax.annotation.Nullable OffsetDateTime expiresAt) {
    this.expiresAt = expiresAt;
  }

  public PaymentDTO lastStateUpdatedAt(@javax.annotation.Nullable OffsetDateTime lastStateUpdatedAt) {
    
    this.lastStateUpdatedAt = lastStateUpdatedAt;
    return this;
  }

  /**
   * The time at which the payment state was last updated for this payment, specified in UTC.
   * @return lastStateUpdatedAt
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LAST_STATE_UPDATED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getLastStateUpdatedAt() {
    return lastStateUpdatedAt;
  }


  @JsonProperty(JSON_PROPERTY_LAST_STATE_UPDATED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLastStateUpdatedAt(@javax.annotation.Nullable OffsetDateTime lastStateUpdatedAt) {
    this.lastStateUpdatedAt = lastStateUpdatedAt;
  }

  public PaymentDTO paymentState(@javax.annotation.Nonnull PaymentStateDTO paymentState) {
    
    this.paymentState = paymentState;
    return this;
  }

  /**
   * Get paymentState
   * @return paymentState
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PAYMENT_STATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public PaymentStateDTO getPaymentState() {
    return paymentState;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENT_STATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPaymentState(@javax.annotation.Nonnull PaymentStateDTO paymentState) {
    this.paymentState = paymentState;
  }

  public PaymentDTO originator(@javax.annotation.Nullable OriginatorDTO originator) {
    
    this.originator = originator;
    return this;
  }

  /**
   * Get originator
   * @return originator
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ORIGINATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OriginatorDTO getOriginator() {
    return originator;
  }


  @JsonProperty(JSON_PROPERTY_ORIGINATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOriginator(@javax.annotation.Nullable OriginatorDTO originator) {
    this.originator = originator;
  }

  public PaymentDTO destination(@javax.annotation.Nullable DestinationDTO destination) {
    
    this.destination = destination;
    return this;
  }

  /**
   * Get destination
   * @return destination
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESTINATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DestinationDTO getDestination() {
    return destination;
  }


  @JsonProperty(JSON_PROPERTY_DESTINATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDestination(@javax.annotation.Nullable DestinationDTO destination) {
    this.destination = destination;
  }

  public PaymentDTO adjustedExchangeRate(@javax.annotation.Nullable AdjustedExchangeRateDTO adjustedExchangeRate) {
    
    this.adjustedExchangeRate = adjustedExchangeRate;
    return this;
  }

  /**
   * Get adjustedExchangeRate
   * @return adjustedExchangeRate
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ADJUSTED_EXCHANGE_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AdjustedExchangeRateDTO getAdjustedExchangeRate() {
    return adjustedExchangeRate;
  }


  @JsonProperty(JSON_PROPERTY_ADJUSTED_EXCHANGE_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAdjustedExchangeRate(@javax.annotation.Nullable AdjustedExchangeRateDTO adjustedExchangeRate) {
    this.adjustedExchangeRate = adjustedExchangeRate;
  }

  public PaymentDTO fees(@javax.annotation.Nullable List<FeeSummaryDTO> fees) {
    
    this.fees = fees;
    return this;
  }

  public PaymentDTO addFeesItem(FeeSummaryDTO feesItem) {
    if (this.fees == null) {
      this.fees = new ArrayList<>();
    }
    this.fees.add(feesItem);
    return this;
  }

  /**
   * A summary of fees included in payment quote.
   * @return fees
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FEES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<FeeSummaryDTO> getFees() {
    return fees;
  }


  @JsonProperty(JSON_PROPERTY_FEES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFees(@javax.annotation.Nullable List<FeeSummaryDTO> fees) {
    this.fees = fees;
  }

  public PaymentDTO sourceOfCash(@javax.annotation.Nullable String sourceOfCash) {
    
    this.sourceOfCash = sourceOfCash;
    return this;
  }

  /**
   * Indicates the source of funds
   * @return sourceOfCash
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOURCE_OF_CASH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSourceOfCash() {
    return sourceOfCash;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE_OF_CASH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSourceOfCash(@javax.annotation.Nullable String sourceOfCash) {
    this.sourceOfCash = sourceOfCash;
  }

  public PaymentDTO purposeCode(@javax.annotation.Nullable String purposeCode) {
    
    this.purposeCode = purposeCode;
    return this;
  }

  /**
   * Indicates the purpose of the payment  For more information about the &#x60;purposeCode&#x60; options, see  [purposeCode](../../building-payment-request-body/#purposecode). 
   * @return purposeCode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PURPOSE_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPurposeCode() {
    return purposeCode;
  }


  @JsonProperty(JSON_PROPERTY_PURPOSE_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPurposeCode(@javax.annotation.Nullable String purposeCode) {
    this.purposeCode = purposeCode;
  }

  public PaymentDTO transactionDetails(@javax.annotation.Nullable TransactionDetailsDTO transactionDetails) {
    
    this.transactionDetails = transactionDetails;
    return this;
  }

  /**
   * Get transactionDetails
   * @return transactionDetails
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRANSACTION_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TransactionDetailsDTO getTransactionDetails() {
    return transactionDetails;
  }


  @JsonProperty(JSON_PROPERTY_TRANSACTION_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransactionDetails(@javax.annotation.Nullable TransactionDetailsDTO transactionDetails) {
    this.transactionDetails = transactionDetails;
  }

  public PaymentDTO paymentLabels(@javax.annotation.Nullable List<String> paymentLabels) {
    
    this.paymentLabels = paymentLabels;
    return this;
  }

  public PaymentDTO addPaymentLabelsItem(String paymentLabelsItem) {
    if (this.paymentLabels == null) {
      this.paymentLabels = new ArrayList<>();
    }
    this.paymentLabels.add(paymentLabelsItem);
    return this;
  }

  /**
   * List of labels associated with the payment. A label typically contains a UUID of your choice, designated as the batchId.
   * @return paymentLabels
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAYMENT_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getPaymentLabels() {
    return paymentLabels;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENT_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaymentLabels(@javax.annotation.Nullable List<String> paymentLabels) {
    this.paymentLabels = paymentLabels;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentDTO payment = (PaymentDTO) o;
    return Objects.equals(this.paymentId, payment.paymentId) &&
        Objects.equals(this.cryptoTransactionHash, payment.cryptoTransactionHash) &&
        Objects.equals(this.initiatedAt, payment.initiatedAt) &&
        Objects.equals(this.expiresAt, payment.expiresAt) &&
        Objects.equals(this.lastStateUpdatedAt, payment.lastStateUpdatedAt) &&
        Objects.equals(this.paymentState, payment.paymentState) &&
        Objects.equals(this.originator, payment.originator) &&
        Objects.equals(this.destination, payment.destination) &&
        Objects.equals(this.adjustedExchangeRate, payment.adjustedExchangeRate) &&
        Objects.equals(this.fees, payment.fees) &&
        Objects.equals(this.sourceOfCash, payment.sourceOfCash) &&
        Objects.equals(this.purposeCode, payment.purposeCode) &&
        Objects.equals(this.transactionDetails, payment.transactionDetails) &&
        Objects.equals(this.paymentLabels, payment.paymentLabels);
  }

  @Override
  public int hashCode() {
    return Objects.hash(paymentId, cryptoTransactionHash, initiatedAt, expiresAt, lastStateUpdatedAt, paymentState, originator, destination, adjustedExchangeRate, fees, sourceOfCash, purposeCode, transactionDetails, paymentLabels);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentDTO {\n");
    sb.append("    paymentId: ").append(toIndentedString(paymentId)).append("\n");
    sb.append("    cryptoTransactionHash: ").append(toIndentedString(cryptoTransactionHash)).append("\n");
    sb.append("    initiatedAt: ").append(toIndentedString(initiatedAt)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    lastStateUpdatedAt: ").append(toIndentedString(lastStateUpdatedAt)).append("\n");
    sb.append("    paymentState: ").append(toIndentedString(paymentState)).append("\n");
    sb.append("    originator: ").append(toIndentedString(originator)).append("\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    adjustedExchangeRate: ").append(toIndentedString(adjustedExchangeRate)).append("\n");
    sb.append("    fees: ").append(toIndentedString(fees)).append("\n");
    sb.append("    sourceOfCash: ").append(toIndentedString(sourceOfCash)).append("\n");
    sb.append("    purposeCode: ").append(toIndentedString(purposeCode)).append("\n");
    sb.append("    transactionDetails: ").append(toIndentedString(transactionDetails)).append("\n");
    sb.append("    paymentLabels: ").append(toIndentedString(paymentLabels)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `paymentId` to the URL query string
    if (getPaymentId() != null) {
      try {
        joiner.add(String.format("%spaymentId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPaymentId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `cryptoTransactionHash` to the URL query string
    if (getCryptoTransactionHash() != null) {
      try {
        joiner.add(String.format("%scryptoTransactionHash%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCryptoTransactionHash()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `initiatedAt` to the URL query string
    if (getInitiatedAt() != null) {
      try {
        joiner.add(String.format("%sinitiatedAt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInitiatedAt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `expiresAt` to the URL query string
    if (getExpiresAt() != null) {
      try {
        joiner.add(String.format("%sexpiresAt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getExpiresAt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `lastStateUpdatedAt` to the URL query string
    if (getLastStateUpdatedAt() != null) {
      try {
        joiner.add(String.format("%slastStateUpdatedAt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLastStateUpdatedAt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `paymentState` to the URL query string
    if (getPaymentState() != null) {
      try {
        joiner.add(String.format("%spaymentState%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPaymentState()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `originator` to the URL query string
    if (getOriginator() != null) {
      joiner.add(getOriginator().toUrlQueryString(prefix + "originator" + suffix));
    }

    // add `destination` to the URL query string
    if (getDestination() != null) {
      joiner.add(getDestination().toUrlQueryString(prefix + "destination" + suffix));
    }

    // add `adjustedExchangeRate` to the URL query string
    if (getAdjustedExchangeRate() != null) {
      joiner.add(getAdjustedExchangeRate().toUrlQueryString(prefix + "adjustedExchangeRate" + suffix));
    }

    // add `fees` to the URL query string
    if (getFees() != null) {
      for (int i = 0; i < getFees().size(); i++) {
        if (getFees().get(i) != null) {
          joiner.add(getFees().get(i).toUrlQueryString(String.format("%sfees%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `sourceOfCash` to the URL query string
    if (getSourceOfCash() != null) {
      try {
        joiner.add(String.format("%ssourceOfCash%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSourceOfCash()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `purposeCode` to the URL query string
    if (getPurposeCode() != null) {
      try {
        joiner.add(String.format("%spurposeCode%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPurposeCode()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `transactionDetails` to the URL query string
    if (getTransactionDetails() != null) {
      joiner.add(getTransactionDetails().toUrlQueryString(prefix + "transactionDetails" + suffix));
    }

    // add `paymentLabels` to the URL query string
    if (getPaymentLabels() != null) {
      for (int i = 0; i < getPaymentLabels().size(); i++) {
        try {
          joiner.add(String.format("%spaymentLabels%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getPaymentLabels().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    return joiner.toString();
  }

}

