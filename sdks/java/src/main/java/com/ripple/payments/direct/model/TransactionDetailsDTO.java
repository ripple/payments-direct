/*
 * Payments Direct API
 * Use the Payments Direct API to get quotes, create and manage payments, and manage originator and beneficiary identities.  ## API environments  The Payments Direct API offers the following environments:  | <div style=\"width:90px\">Environment</div>  | Base URL                      | Description                               | | ------------------------------------------ | ----------------------------- | ----------------------------------------- | | Test                                       | `https://api.test.ripple.com` | Test environment with simulated currency. | | Production                                 | `https://api.ripple.com`      | Production environment                    |  ## API authentication  All {{process.env.VAR_RPD}} API operations require a Bearer access token specific to the environment you're using. Ripple provides a secure model for authentication and authorization by providing access tokens scoped for a set of credentials.  ### Generate client ID and client secret  You will need your _client ID_ and _client secret_ to obtain an access token.  If you do not already have your client ID and client secret, do the following:  1. Log into the Ripple Payments UI. 2. In the left navigation menu, click **Settings**. 3. Under **Administration**, click **API Credentials**. 4. In the dropdown list next to the page title, select the access environment. For example, to provision credentials for the test environment, select **Test** from the dropdown list. 5. In the upper right corner of the page, click **New Credential**. 6. Click **Save and Generate Key**.  **Caution:** The *client secret* is displayed only once when you are creating new credentials. You cannot retrieve the secret after exiting this page. Copy and store the client secret securely and share it with authorized individuals in accordance with your organization's security policy.  You can now use the client ID and client secret to generate access tokens using the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation.  ### Request an access token  To get an access token, use the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation with your `client_id` and `client_secret`. The response contains a token in the `access_token` field.  We recommend rotating your API credentials at regular intervals according to your organization's security policy.  **Note**: Authentication tokens are not a fixed length and can vary, avoid validating tokens based on character length. 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ripple.payments.direct.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * A summary of the payment category.
 */
@JsonPropertyOrder({
  TransactionDetailsDTO.JSON_PROPERTY_PAYMENT_PRODUCT,
  TransactionDetailsDTO.JSON_PROPERTY_FLOW_TYPE,
  TransactionDetailsDTO.JSON_PROPERTY_THIRD_PARTY_PAYMENT,
  TransactionDetailsDTO.JSON_PROPERTY_BUSINESS_USE_CASE
})
@JsonTypeName("TransactionDetails")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0")
public class TransactionDetailsDTO {
  public static final String JSON_PROPERTY_PAYMENT_PRODUCT = "paymentProduct";
  @javax.annotation.Nullable
  private JsonNullable<String> paymentProduct = JsonNullable.<String>undefined();

  /**
   * Specifies the type of payment you&#39;re making as categorized by the identity type of the payment originator and beneficiary.
   */
  public enum FlowTypeEnum {
    B2_B(String.valueOf("B2B")),
    
    B2_C(String.valueOf("B2C")),
    
    C2_B(String.valueOf("C2B")),
    
    C2_C(String.valueOf("C2C"));

    private String value;

    FlowTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static FlowTypeEnum fromValue(String value) {
      for (FlowTypeEnum b : FlowTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }
  }

  public static final String JSON_PROPERTY_FLOW_TYPE = "flowType";
  @javax.annotation.Nullable
  private JsonNullable<FlowTypeEnum> flowType = JsonNullable.<FlowTypeEnum>undefined();

  public static final String JSON_PROPERTY_THIRD_PARTY_PAYMENT = "thirdPartyPayment";
  @javax.annotation.Nullable
  private JsonNullable<Boolean> thirdPartyPayment = JsonNullable.<Boolean>undefined();

  /**
   * Indicates the type of payment you&#39;re making.
   */
  public enum BusinessUseCaseEnum {
    ON_RAMP(String.valueOf("ON_RAMP")),
    
    OFF_RAMP(String.valueOf("OFF_RAMP")),
    
    FIAT_TRANSFER(String.valueOf("FIAT_TRANSFER")),
    
    CRYPTO_TRANSFER(String.valueOf("CRYPTO_TRANSFER"));

    private String value;

    BusinessUseCaseEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static BusinessUseCaseEnum fromValue(String value) {
      for (BusinessUseCaseEnum b : BusinessUseCaseEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }
  }

  public static final String JSON_PROPERTY_BUSINESS_USE_CASE = "businessUseCase";
  @javax.annotation.Nullable
  private JsonNullable<BusinessUseCaseEnum> businessUseCase = JsonNullable.<BusinessUseCaseEnum>undefined();

  public TransactionDetailsDTO() {
  }

  public TransactionDetailsDTO paymentProduct(@javax.annotation.Nullable String paymentProduct) {
    this.paymentProduct = JsonNullable.<String>of(paymentProduct);
    
    return this;
  }

  /**
   * The Ripple payments product used to make this payment.
   * @return paymentProduct
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public String getPaymentProduct() {
        return paymentProduct.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PAYMENT_PRODUCT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getPaymentProduct_JsonNullable() {
    return paymentProduct;
  }
  
  @JsonProperty(JSON_PROPERTY_PAYMENT_PRODUCT)
  public void setPaymentProduct_JsonNullable(JsonNullable<String> paymentProduct) {
    this.paymentProduct = paymentProduct;
  }

  public void setPaymentProduct(@javax.annotation.Nullable String paymentProduct) {
    this.paymentProduct = JsonNullable.<String>of(paymentProduct);
  }

  public TransactionDetailsDTO flowType(@javax.annotation.Nullable FlowTypeEnum flowType) {
    this.flowType = JsonNullable.<FlowTypeEnum>of(flowType);
    
    return this;
  }

  /**
   * Specifies the type of payment you&#39;re making as categorized by the identity type of the payment originator and beneficiary.
   * @return flowType
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public FlowTypeEnum getFlowType() {
        return flowType.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FLOW_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<FlowTypeEnum> getFlowType_JsonNullable() {
    return flowType;
  }
  
  @JsonProperty(JSON_PROPERTY_FLOW_TYPE)
  public void setFlowType_JsonNullable(JsonNullable<FlowTypeEnum> flowType) {
    this.flowType = flowType;
  }

  public void setFlowType(@javax.annotation.Nullable FlowTypeEnum flowType) {
    this.flowType = JsonNullable.<FlowTypeEnum>of(flowType);
  }

  public TransactionDetailsDTO thirdPartyPayment(@javax.annotation.Nullable Boolean thirdPartyPayment) {
    this.thirdPartyPayment = JsonNullable.<Boolean>of(thirdPartyPayment);
    
    return this;
  }

  /**
   * Flag to indicate if this payment is initiated on behalf of a third-party originator.
   * @return thirdPartyPayment
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public Boolean getThirdPartyPayment() {
        return thirdPartyPayment.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_THIRD_PARTY_PAYMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getThirdPartyPayment_JsonNullable() {
    return thirdPartyPayment;
  }
  
  @JsonProperty(JSON_PROPERTY_THIRD_PARTY_PAYMENT)
  public void setThirdPartyPayment_JsonNullable(JsonNullable<Boolean> thirdPartyPayment) {
    this.thirdPartyPayment = thirdPartyPayment;
  }

  public void setThirdPartyPayment(@javax.annotation.Nullable Boolean thirdPartyPayment) {
    this.thirdPartyPayment = JsonNullable.<Boolean>of(thirdPartyPayment);
  }

  public TransactionDetailsDTO businessUseCase(@javax.annotation.Nullable BusinessUseCaseEnum businessUseCase) {
    this.businessUseCase = JsonNullable.<BusinessUseCaseEnum>of(businessUseCase);
    
    return this;
  }

  /**
   * Indicates the type of payment you&#39;re making.
   * @return businessUseCase
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public BusinessUseCaseEnum getBusinessUseCase() {
        return businessUseCase.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_BUSINESS_USE_CASE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BusinessUseCaseEnum> getBusinessUseCase_JsonNullable() {
    return businessUseCase;
  }
  
  @JsonProperty(JSON_PROPERTY_BUSINESS_USE_CASE)
  public void setBusinessUseCase_JsonNullable(JsonNullable<BusinessUseCaseEnum> businessUseCase) {
    this.businessUseCase = businessUseCase;
  }

  public void setBusinessUseCase(@javax.annotation.Nullable BusinessUseCaseEnum businessUseCase) {
    this.businessUseCase = JsonNullable.<BusinessUseCaseEnum>of(businessUseCase);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionDetailsDTO transactionDetails = (TransactionDetailsDTO) o;
    return equalsNullable(this.paymentProduct, transactionDetails.paymentProduct) &&
        equalsNullable(this.flowType, transactionDetails.flowType) &&
        equalsNullable(this.thirdPartyPayment, transactionDetails.thirdPartyPayment) &&
        equalsNullable(this.businessUseCase, transactionDetails.businessUseCase);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(paymentProduct), hashCodeNullable(flowType), hashCodeNullable(thirdPartyPayment), hashCodeNullable(businessUseCase));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionDetailsDTO {\n");
    sb.append("    paymentProduct: ").append(toIndentedString(paymentProduct)).append("\n");
    sb.append("    flowType: ").append(toIndentedString(flowType)).append("\n");
    sb.append("    thirdPartyPayment: ").append(toIndentedString(thirdPartyPayment)).append("\n");
    sb.append("    businessUseCase: ").append(toIndentedString(businessUseCase)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `paymentProduct` to the URL query string
    if (getPaymentProduct() != null) {
      try {
        joiner.add(String.format("%spaymentProduct%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPaymentProduct()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `flowType` to the URL query string
    if (getFlowType() != null) {
      try {
        joiner.add(String.format("%sflowType%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFlowType()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `thirdPartyPayment` to the URL query string
    if (getThirdPartyPayment() != null) {
      try {
        joiner.add(String.format("%sthirdPartyPayment%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getThirdPartyPayment()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `businessUseCase` to the URL query string
    if (getBusinessUseCase() != null) {
      try {
        joiner.add(String.format("%sbusinessUseCase%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBusinessUseCase()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

