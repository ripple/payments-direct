/*
 * Payments Direct API
 * Use the Payments Direct API to get quotes, create and manage payments, and manage originator and beneficiary identities.  ## API environments  The Payments Direct API offers the following environments:  | <div style=\"width:90px\">Environment</div>  | Base URL                      | Description                               | | ------------------------------------------ | ----------------------------- | ----------------------------------------- | | Test                                       | `https://api.test.ripple.com` | Test environment with simulated currency. | | Production                                 | `https://api.ripple.com`      | Production environment                    |  ## API authentication  All {{process.env.VAR_RPD}} API operations require a Bearer access token specific to the environment you're using. Ripple provides a secure model for authentication and authorization by providing access tokens scoped for a set of credentials.  ### Generate client ID and client secret  You will need your _client ID_ and _client secret_ to obtain an access token.  If you do not already have your client ID and client secret, do the following:  1. Log into the Ripple Payments UI. 2. In the left navigation menu, click **Settings**. 3. Under **Administration**, click **API Credentials**. 4. In the dropdown list next to the page title, select the access environment. For example, to provision credentials for the test environment, select **Test** from the dropdown list. 5. In the upper right corner of the page, click **New Credential**. 6. Click **Save and Generate Key**.  **Caution:** The *client secret* is displayed only once when you are creating new credentials. You cannot retrieve the secret after exiting this page. Copy and store the client secret securely and share it with authorized individuals in accordance with your organization's security policy.  You can now use the client ID and client secret to generate access tokens using the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation.  ### Request an access token  To get an access token, use the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation with your `client_id` and `client_secret`. The response contains a token in the `access_token` field.  We recommend rotating your API credentials at regular intervals according to your organization's security policy.  **Note**: Authentication tokens are not a fixed length and can vary, avoid validating tokens based on character length. 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ripple.payments.direct.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Payment originator and source details.
 */
@JsonPropertyOrder({
  OriginatorDTO.JSON_PROPERTY_ORIGINATOR_IDENTITY_ID,
  OriginatorDTO.JSON_PROPERTY_ORIGINATOR_IDENTITY_ID_VERSION,
  OriginatorDTO.JSON_PROPERTY_ORIGINATOR_IDENTITY_NICK_NAME,
  OriginatorDTO.JSON_PROPERTY_INTERNAL_ID,
  OriginatorDTO.JSON_PROPERTY_SOURCE_COUNTRY,
  OriginatorDTO.JSON_PROPERTY_SOURCE_CURRENCY,
  OriginatorDTO.JSON_PROPERTY_SOURCE_AMOUNT,
  OriginatorDTO.JSON_PROPERTY_PAYIN
})
@JsonTypeName("Originator")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0")
public class OriginatorDTO {
  public static final String JSON_PROPERTY_ORIGINATOR_IDENTITY_ID = "originatorIdentityId";
  @javax.annotation.Nullable
  private UUID originatorIdentityId;

  public static final String JSON_PROPERTY_ORIGINATOR_IDENTITY_ID_VERSION = "originatorIdentityIdVersion";
  @javax.annotation.Nullable
  private Integer originatorIdentityIdVersion;

  public static final String JSON_PROPERTY_ORIGINATOR_IDENTITY_NICK_NAME = "originatorIdentityNickName";
  @javax.annotation.Nullable
  private String originatorIdentityNickName;

  public static final String JSON_PROPERTY_INTERNAL_ID = "internalId";
  @javax.annotation.Nullable
  private String internalId;

  public static final String JSON_PROPERTY_SOURCE_COUNTRY = "sourceCountry";
  @javax.annotation.Nullable
  private String sourceCountry;

  public static final String JSON_PROPERTY_SOURCE_CURRENCY = "sourceCurrency";
  @javax.annotation.Nullable
  private String sourceCurrency;

  public static final String JSON_PROPERTY_SOURCE_AMOUNT = "sourceAmount";
  @javax.annotation.Nullable
  private Double sourceAmount;

  public static final String JSON_PROPERTY_PAYIN = "payin";
  @javax.annotation.Nullable
  private String payin;

  public OriginatorDTO() {
  }

  public OriginatorDTO originatorIdentityId(@javax.annotation.Nullable UUID originatorIdentityId) {
    
    this.originatorIdentityId = originatorIdentityId;
    return this;
  }

  /**
   * The unique ID associated with the payment originator&#39;s identity record.
   * @return originatorIdentityId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ORIGINATOR_IDENTITY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UUID getOriginatorIdentityId() {
    return originatorIdentityId;
  }


  @JsonProperty(JSON_PROPERTY_ORIGINATOR_IDENTITY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOriginatorIdentityId(@javax.annotation.Nullable UUID originatorIdentityId) {
    this.originatorIdentityId = originatorIdentityId;
  }

  public OriginatorDTO originatorIdentityIdVersion(@javax.annotation.Nullable Integer originatorIdentityIdVersion) {
    
    this.originatorIdentityIdVersion = originatorIdentityIdVersion;
    return this;
  }

  /**
   * The current version of the originator&#39;s identity record.
   * @return originatorIdentityIdVersion
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ORIGINATOR_IDENTITY_ID_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getOriginatorIdentityIdVersion() {
    return originatorIdentityIdVersion;
  }


  @JsonProperty(JSON_PROPERTY_ORIGINATOR_IDENTITY_ID_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOriginatorIdentityIdVersion(@javax.annotation.Nullable Integer originatorIdentityIdVersion) {
    this.originatorIdentityIdVersion = originatorIdentityIdVersion;
  }

  public OriginatorDTO originatorIdentityNickName(@javax.annotation.Nullable String originatorIdentityNickName) {
    
    this.originatorIdentityNickName = originatorIdentityNickName;
    return this;
  }

  /**
   * Nickname associated with the originator&#39;s identity record.
   * @return originatorIdentityNickName
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ORIGINATOR_IDENTITY_NICK_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOriginatorIdentityNickName() {
    return originatorIdentityNickName;
  }


  @JsonProperty(JSON_PROPERTY_ORIGINATOR_IDENTITY_NICK_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOriginatorIdentityNickName(@javax.annotation.Nullable String originatorIdentityNickName) {
    this.originatorIdentityNickName = originatorIdentityNickName;
  }

  public OriginatorDTO internalId(@javax.annotation.Nullable String internalId) {
    
    this.internalId = internalId;
    return this;
  }

  /**
   * An ID associated with this payment, if provided by the customer during payment initiation.
   * @return internalId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INTERNAL_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getInternalId() {
    return internalId;
  }


  @JsonProperty(JSON_PROPERTY_INTERNAL_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInternalId(@javax.annotation.Nullable String internalId) {
    this.internalId = internalId;
  }

  public OriginatorDTO sourceCountry(@javax.annotation.Nullable String sourceCountry) {
    
    this.sourceCountry = sourceCountry;
    return this;
  }

  /**
   * The country where the payment originator is located or incorporated, specified in Alpha-2 Code format as defined in the ISO CountryCode ISO 3166-1 list.
   * @return sourceCountry
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOURCE_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSourceCountry() {
    return sourceCountry;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSourceCountry(@javax.annotation.Nullable String sourceCountry) {
    this.sourceCountry = sourceCountry;
  }

  public OriginatorDTO sourceCurrency(@javax.annotation.Nullable String sourceCurrency) {
    
    this.sourceCurrency = sourceCurrency;
    return this;
  }

  /**
   * originator&#39;s currency
   * @return sourceCurrency
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOURCE_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSourceCurrency() {
    return sourceCurrency;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSourceCurrency(@javax.annotation.Nullable String sourceCurrency) {
    this.sourceCurrency = sourceCurrency;
  }

  public OriginatorDTO sourceAmount(@javax.annotation.Nullable Double sourceAmount) {
    
    this.sourceAmount = sourceAmount;
    return this;
  }

  /**
   * The amount sent by the originator in this payment. This field can hold a value with up to 6 decimal places.
   * @return sourceAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOURCE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getSourceAmount() {
    return sourceAmount;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSourceAmount(@javax.annotation.Nullable Double sourceAmount) {
    this.sourceAmount = sourceAmount;
  }

  public OriginatorDTO payin(@javax.annotation.Nullable String payin) {
    
    this.payin = payin;
    return this;
  }

  /**
   * Details about how this payment is funded.
   * @return payin
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAYIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPayin() {
    return payin;
  }


  @JsonProperty(JSON_PROPERTY_PAYIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPayin(@javax.annotation.Nullable String payin) {
    this.payin = payin;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OriginatorDTO originator = (OriginatorDTO) o;
    return Objects.equals(this.originatorIdentityId, originator.originatorIdentityId) &&
        Objects.equals(this.originatorIdentityIdVersion, originator.originatorIdentityIdVersion) &&
        Objects.equals(this.originatorIdentityNickName, originator.originatorIdentityNickName) &&
        Objects.equals(this.internalId, originator.internalId) &&
        Objects.equals(this.sourceCountry, originator.sourceCountry) &&
        Objects.equals(this.sourceCurrency, originator.sourceCurrency) &&
        Objects.equals(this.sourceAmount, originator.sourceAmount) &&
        Objects.equals(this.payin, originator.payin);
  }

  @Override
  public int hashCode() {
    return Objects.hash(originatorIdentityId, originatorIdentityIdVersion, originatorIdentityNickName, internalId, sourceCountry, sourceCurrency, sourceAmount, payin);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OriginatorDTO {\n");
    sb.append("    originatorIdentityId: ").append(toIndentedString(originatorIdentityId)).append("\n");
    sb.append("    originatorIdentityIdVersion: ").append(toIndentedString(originatorIdentityIdVersion)).append("\n");
    sb.append("    originatorIdentityNickName: ").append(toIndentedString(originatorIdentityNickName)).append("\n");
    sb.append("    internalId: ").append(toIndentedString(internalId)).append("\n");
    sb.append("    sourceCountry: ").append(toIndentedString(sourceCountry)).append("\n");
    sb.append("    sourceCurrency: ").append(toIndentedString(sourceCurrency)).append("\n");
    sb.append("    sourceAmount: ").append(toIndentedString(sourceAmount)).append("\n");
    sb.append("    payin: ").append(toIndentedString(payin)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `originatorIdentityId` to the URL query string
    if (getOriginatorIdentityId() != null) {
      try {
        joiner.add(String.format("%soriginatorIdentityId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOriginatorIdentityId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `originatorIdentityIdVersion` to the URL query string
    if (getOriginatorIdentityIdVersion() != null) {
      try {
        joiner.add(String.format("%soriginatorIdentityIdVersion%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOriginatorIdentityIdVersion()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `originatorIdentityNickName` to the URL query string
    if (getOriginatorIdentityNickName() != null) {
      try {
        joiner.add(String.format("%soriginatorIdentityNickName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOriginatorIdentityNickName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `internalId` to the URL query string
    if (getInternalId() != null) {
      try {
        joiner.add(String.format("%sinternalId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInternalId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `sourceCountry` to the URL query string
    if (getSourceCountry() != null) {
      try {
        joiner.add(String.format("%ssourceCountry%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSourceCountry()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `sourceCurrency` to the URL query string
    if (getSourceCurrency() != null) {
      try {
        joiner.add(String.format("%ssourceCurrency%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSourceCurrency()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `sourceAmount` to the URL query string
    if (getSourceAmount() != null) {
      try {
        joiner.add(String.format("%ssourceAmount%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSourceAmount()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `payin` to the URL query string
    if (getPayin() != null) {
      try {
        joiner.add(String.format("%spayin%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPayin()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

