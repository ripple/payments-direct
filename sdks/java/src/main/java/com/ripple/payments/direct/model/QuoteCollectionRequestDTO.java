/*
 * Payments Direct API
 * Use the Payments Direct API to get quotes, create and manage payments, and manage originator and beneficiary identities.  ## API environments  The Payments Direct API offers the following environments:  | <div style=\"width:90px\">Environment</div>  | Base URL                      | Description                               | | ------------------------------------------ | ----------------------------- | ----------------------------------------- | | Test                                       | `https://api.test.ripple.com` | Test environment with simulated currency. | | Production                                 | `https://api.ripple.com`      | Production environment                    |  ## API authentication  All {{process.env.VAR_RPD}} API operations require a Bearer access token specific to the environment you're using. Ripple provides a secure model for authentication and authorization by providing access tokens scoped for a set of credentials.  ### Generate client ID and client secret  You will need your _client ID_ and _client secret_ to obtain an access token.  If you do not already have your client ID and client secret, do the following:  1. Log into the Ripple Payments UI. 2. In the left navigation menu, click **Settings**. 3. Under **Administration**, click **API Credentials**. 4. In the dropdown list next to the page title, select the access environment. For example, to provision credentials for the test environment, select **Test** from the dropdown list. 5. In the upper right corner of the page, click **New Credential**. 6. Click **Save and Generate Key**.  **Caution:** The *client secret* is displayed only once when you are creating new credentials. You cannot retrieve the secret after exiting this page. Copy and store the client secret securely and share it with authorized individuals in accordance with your organization's security policy.  You can now use the client ID and client secret to generate access tokens using the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation.  ### Request an access token  To get an access token, use the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation with your `client_id` and `client_secret`. The response contains a token in the `access_token` field.  We recommend rotating your API credentials at regular intervals according to your organization's security policy.  **Note**: Authentication tokens are not a fixed length and can vary, avoid validating tokens based on character length. 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ripple.payments.direct.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.ripple.payments.direct.model.QuoteAmountTypeDTO;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Request to create a quote collection
 */
@JsonPropertyOrder({
  QuoteCollectionRequestDTO.JSON_PROPERTY_QUOTE_AMOUNT,
  QuoteCollectionRequestDTO.JSON_PROPERTY_QUOTE_AMOUNT_TYPE,
  QuoteCollectionRequestDTO.JSON_PROPERTY_SOURCE_CURRENCY,
  QuoteCollectionRequestDTO.JSON_PROPERTY_DESTINATION_CURRENCY,
  QuoteCollectionRequestDTO.JSON_PROPERTY_SOURCE_COUNTRY,
  QuoteCollectionRequestDTO.JSON_PROPERTY_DESTINATION_COUNTRY,
  QuoteCollectionRequestDTO.JSON_PROPERTY_PAYOUT_CATEGORY,
  QuoteCollectionRequestDTO.JSON_PROPERTY_PAYIN_CATEGORY,
  QuoteCollectionRequestDTO.JSON_PROPERTY_DESTINATION_BLOCKCHAIN_NETWORK
})
@JsonTypeName("QuoteCollectionRequest")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0")
public class QuoteCollectionRequestDTO {
  public static final String JSON_PROPERTY_QUOTE_AMOUNT = "quoteAmount";
  @javax.annotation.Nonnull
  private Double quoteAmount;

  public static final String JSON_PROPERTY_QUOTE_AMOUNT_TYPE = "quoteAmountType";
  @javax.annotation.Nonnull
  private QuoteAmountTypeDTO quoteAmountType = QuoteAmountTypeDTO.SOURCE_AMOUNT;

  public static final String JSON_PROPERTY_SOURCE_CURRENCY = "sourceCurrency";
  @javax.annotation.Nonnull
  private String sourceCurrency;

  public static final String JSON_PROPERTY_DESTINATION_CURRENCY = "destinationCurrency";
  @javax.annotation.Nonnull
  private String destinationCurrency;

  public static final String JSON_PROPERTY_SOURCE_COUNTRY = "sourceCountry";
  @javax.annotation.Nullable
  private String sourceCountry;

  public static final String JSON_PROPERTY_DESTINATION_COUNTRY = "destinationCountry";
  @javax.annotation.Nullable
  private String destinationCountry;

  public static final String JSON_PROPERTY_PAYOUT_CATEGORY = "payoutCategory";
  @javax.annotation.Nonnull
  private String payoutCategory;

  public static final String JSON_PROPERTY_PAYIN_CATEGORY = "payinCategory";
  @javax.annotation.Nonnull
  private String payinCategory;

  public static final String JSON_PROPERTY_DESTINATION_BLOCKCHAIN_NETWORK = "destinationBlockchainNetwork";
  @javax.annotation.Nullable
  private String destinationBlockchainNetwork;

  public QuoteCollectionRequestDTO() {
  }

  public QuoteCollectionRequestDTO quoteAmount(@javax.annotation.Nonnull Double quoteAmount) {
    
    this.quoteAmount = quoteAmount;
    return this;
  }

  /**
   * The amount for which you wish to receive a collection of quotes.
   * minimum: 1
   * maximum: 100000000
   * @return quoteAmount
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_QUOTE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Double getQuoteAmount() {
    return quoteAmount;
  }


  @JsonProperty(JSON_PROPERTY_QUOTE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setQuoteAmount(@javax.annotation.Nonnull Double quoteAmount) {
    this.quoteAmount = quoteAmount;
  }

  public QuoteCollectionRequestDTO quoteAmountType(@javax.annotation.Nonnull QuoteAmountTypeDTO quoteAmountType) {
    
    this.quoteAmountType = quoteAmountType;
    return this;
  }

  /**
   * Get quoteAmountType
   * @return quoteAmountType
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_QUOTE_AMOUNT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public QuoteAmountTypeDTO getQuoteAmountType() {
    return quoteAmountType;
  }


  @JsonProperty(JSON_PROPERTY_QUOTE_AMOUNT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setQuoteAmountType(@javax.annotation.Nonnull QuoteAmountTypeDTO quoteAmountType) {
    this.quoteAmountType = quoteAmountType;
  }

  public QuoteCollectionRequestDTO sourceCurrency(@javax.annotation.Nonnull String sourceCurrency) {
    
    this.sourceCurrency = sourceCurrency;
    return this;
  }

  /**
   * The currency code of the currency that you are sending.
   * @return sourceCurrency
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SOURCE_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSourceCurrency() {
    return sourceCurrency;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSourceCurrency(@javax.annotation.Nonnull String sourceCurrency) {
    this.sourceCurrency = sourceCurrency;
  }

  public QuoteCollectionRequestDTO destinationCurrency(@javax.annotation.Nonnull String destinationCurrency) {
    
    this.destinationCurrency = destinationCurrency;
    return this;
  }

  /**
   * The currency code of the currency in which your beneficiary will receive this payment.
   * @return destinationCurrency
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DESTINATION_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDestinationCurrency() {
    return destinationCurrency;
  }


  @JsonProperty(JSON_PROPERTY_DESTINATION_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDestinationCurrency(@javax.annotation.Nonnull String destinationCurrency) {
    this.destinationCurrency = destinationCurrency;
  }

  public QuoteCollectionRequestDTO sourceCountry(@javax.annotation.Nullable String sourceCountry) {
    
    this.sourceCountry = sourceCountry;
    return this;
  }

  /**
   * The country code of the country from where you are sending the funds. This is an ISO 3166-1 alpha-2 code.
   * @return sourceCountry
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOURCE_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSourceCountry() {
    return sourceCountry;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSourceCountry(@javax.annotation.Nullable String sourceCountry) {
    this.sourceCountry = sourceCountry;
  }

  public QuoteCollectionRequestDTO destinationCountry(@javax.annotation.Nullable String destinationCountry) {
    
    this.destinationCountry = destinationCountry;
    return this;
  }

  /**
   * The country where the beneficiary is located specified in Alpha-2 Code format as defined in the ISO CountryCode ISO 3166-1 list. If the beneficiary is an individual, then this value is their country of residence. If the beneficiary is an institution, then this value is their the country of incorporation.
   * @return destinationCountry
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESTINATION_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDestinationCountry() {
    return destinationCountry;
  }


  @JsonProperty(JSON_PROPERTY_DESTINATION_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDestinationCountry(@javax.annotation.Nullable String destinationCountry) {
    this.destinationCountry = destinationCountry;
  }

  public QuoteCollectionRequestDTO payoutCategory(@javax.annotation.Nonnull String payoutCategory) {
    
    this.payoutCategory = payoutCategory;
    return this;
  }

  /**
   * The name of the payout category.
   * @return payoutCategory
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PAYOUT_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPayoutCategory() {
    return payoutCategory;
  }


  @JsonProperty(JSON_PROPERTY_PAYOUT_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPayoutCategory(@javax.annotation.Nonnull String payoutCategory) {
    this.payoutCategory = payoutCategory;
  }

  public QuoteCollectionRequestDTO payinCategory(@javax.annotation.Nonnull String payinCategory) {
    
    this.payinCategory = payinCategory;
    return this;
  }

  /**
   * The name of the pay in category indicating how this payment will be funded.
   * @return payinCategory
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PAYIN_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPayinCategory() {
    return payinCategory;
  }


  @JsonProperty(JSON_PROPERTY_PAYIN_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPayinCategory(@javax.annotation.Nonnull String payinCategory) {
    this.payinCategory = payinCategory;
  }

  public QuoteCollectionRequestDTO destinationBlockchainNetwork(@javax.annotation.Nullable String destinationBlockchainNetwork) {
    
    this.destinationBlockchainNetwork = destinationBlockchainNetwork;
    return this;
  }

  /**
   * The name of the blockchain network on which the beneficiary will receive this payment.
   * @return destinationBlockchainNetwork
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESTINATION_BLOCKCHAIN_NETWORK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDestinationBlockchainNetwork() {
    return destinationBlockchainNetwork;
  }


  @JsonProperty(JSON_PROPERTY_DESTINATION_BLOCKCHAIN_NETWORK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDestinationBlockchainNetwork(@javax.annotation.Nullable String destinationBlockchainNetwork) {
    this.destinationBlockchainNetwork = destinationBlockchainNetwork;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuoteCollectionRequestDTO quoteCollectionRequest = (QuoteCollectionRequestDTO) o;
    return Objects.equals(this.quoteAmount, quoteCollectionRequest.quoteAmount) &&
        Objects.equals(this.quoteAmountType, quoteCollectionRequest.quoteAmountType) &&
        Objects.equals(this.sourceCurrency, quoteCollectionRequest.sourceCurrency) &&
        Objects.equals(this.destinationCurrency, quoteCollectionRequest.destinationCurrency) &&
        Objects.equals(this.sourceCountry, quoteCollectionRequest.sourceCountry) &&
        Objects.equals(this.destinationCountry, quoteCollectionRequest.destinationCountry) &&
        Objects.equals(this.payoutCategory, quoteCollectionRequest.payoutCategory) &&
        Objects.equals(this.payinCategory, quoteCollectionRequest.payinCategory) &&
        Objects.equals(this.destinationBlockchainNetwork, quoteCollectionRequest.destinationBlockchainNetwork);
  }

  @Override
  public int hashCode() {
    return Objects.hash(quoteAmount, quoteAmountType, sourceCurrency, destinationCurrency, sourceCountry, destinationCountry, payoutCategory, payinCategory, destinationBlockchainNetwork);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuoteCollectionRequestDTO {\n");
    sb.append("    quoteAmount: ").append(toIndentedString(quoteAmount)).append("\n");
    sb.append("    quoteAmountType: ").append(toIndentedString(quoteAmountType)).append("\n");
    sb.append("    sourceCurrency: ").append(toIndentedString(sourceCurrency)).append("\n");
    sb.append("    destinationCurrency: ").append(toIndentedString(destinationCurrency)).append("\n");
    sb.append("    sourceCountry: ").append(toIndentedString(sourceCountry)).append("\n");
    sb.append("    destinationCountry: ").append(toIndentedString(destinationCountry)).append("\n");
    sb.append("    payoutCategory: ").append(toIndentedString(payoutCategory)).append("\n");
    sb.append("    payinCategory: ").append(toIndentedString(payinCategory)).append("\n");
    sb.append("    destinationBlockchainNetwork: ").append(toIndentedString(destinationBlockchainNetwork)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `quoteAmount` to the URL query string
    if (getQuoteAmount() != null) {
      try {
        joiner.add(String.format("%squoteAmount%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getQuoteAmount()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `quoteAmountType` to the URL query string
    if (getQuoteAmountType() != null) {
      try {
        joiner.add(String.format("%squoteAmountType%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getQuoteAmountType()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `sourceCurrency` to the URL query string
    if (getSourceCurrency() != null) {
      try {
        joiner.add(String.format("%ssourceCurrency%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSourceCurrency()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `destinationCurrency` to the URL query string
    if (getDestinationCurrency() != null) {
      try {
        joiner.add(String.format("%sdestinationCurrency%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDestinationCurrency()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `sourceCountry` to the URL query string
    if (getSourceCountry() != null) {
      try {
        joiner.add(String.format("%ssourceCountry%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSourceCountry()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `destinationCountry` to the URL query string
    if (getDestinationCountry() != null) {
      try {
        joiner.add(String.format("%sdestinationCountry%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDestinationCountry()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `payoutCategory` to the URL query string
    if (getPayoutCategory() != null) {
      try {
        joiner.add(String.format("%spayoutCategory%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPayoutCategory()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `payinCategory` to the URL query string
    if (getPayinCategory() != null) {
      try {
        joiner.add(String.format("%spayinCategory%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPayinCategory()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `destinationBlockchainNetwork` to the URL query string
    if (getDestinationBlockchainNetwork() != null) {
      try {
        joiner.add(String.format("%sdestinationBlockchainNetwork%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDestinationBlockchainNetwork()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

