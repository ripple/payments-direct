/*
 * Payments Direct API
 * Use the Payments Direct API to get quotes, create and manage payments, and manage originator and beneficiary identities.  ## API environments  The Payments Direct API offers the following environments:  | <div style=\"width:90px\">Environment</div>  | Base URL                      | Description                               | | ------------------------------------------ | ----------------------------- | ----------------------------------------- | | Test                                       | `https://api.test.ripple.com` | Test environment with simulated currency. | | Production                                 | `https://api.ripple.com`      | Production environment                    |  ## API authentication  All {{process.env.VAR_RPD}} API operations require a Bearer access token specific to the environment you're using. Ripple provides a secure model for authentication and authorization by providing access tokens scoped for a set of credentials.  ### Generate client ID and client secret  You will need your _client ID_ and _client secret_ to obtain an access token.  If you do not already have your client ID and client secret, do the following:  1. Log into the Ripple Payments UI. 2. In the left navigation menu, click **Settings**. 3. Under **Administration**, click **API Credentials**. 4. In the dropdown list next to the page title, select the access environment. For example, to provision credentials for the test environment, select **Test** from the dropdown list. 5. In the upper right corner of the page, click **New Credential**. 6. Click **Save and Generate Key**.  **Caution:** The *client secret* is displayed only once when you are creating new credentials. You cannot retrieve the secret after exiting this page. Copy and store the client secret securely and share it with authorized individuals in accordance with your organization's security policy.  You can now use the client ID and client secret to generate access tokens using the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation.  ### Request an access token  To get an access token, use the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation with your `client_id` and `client_secret`. The response contains a token in the `access_token` field.  We recommend rotating your API credentials at regular intervals according to your organization's security policy.  **Note**: Authentication tokens are not a fixed length and can vary, avoid validating tokens based on character length. 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ripple.payments.direct.api;

import com.fasterxml.jackson.core.type.TypeReference;

import com.ripple.payments.direct.ApiException;
import com.ripple.payments.direct.ApiClient;
import com.ripple.payments.direct.BaseApi;
import com.ripple.payments.direct.Configuration;
import com.ripple.payments.direct.Pair;

import com.ripple.payments.direct.model.PaymentDTO;
import com.ripple.payments.direct.model.PaymentErrorResponseDTO;
import com.ripple.payments.direct.model.PaymentRequestDTO;
import com.ripple.payments.direct.model.PaymentWithDetailsDTO;
import com.ripple.payments.direct.model.PaymentsResponseDTO;
import com.ripple.payments.direct.model.SearchPaymentsRequestDTO;
import com.ripple.payments.direct.model.StateTransitionsResponseDTO;
import java.util.UUID;
import com.ripple.payments.direct.model.UpdatePaymentLabelsRequestDTO;
import com.ripple.payments.direct.model.UpdatePaymentLabelsResponseDTO;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0")
public class PaymentsApi extends BaseApi {

  public PaymentsApi() {
    super(Configuration.getDefaultApiClient());
  }

  public PaymentsApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * Create payment
   * Create a payment  **Tutorials**  * Learn how to [Create a payment](../../tutorials/create-a-payment/). * Learn how to [Create a third-party payment](../../tutorials/create-a-third-party-payment/). 
   * @param paymentRequestDTO create payment request (required)
   * @return PaymentDTO
   * @throws ApiException if fails to make API call
   */
  public PaymentDTO createPayment(@javax.annotation.Nonnull PaymentRequestDTO paymentRequestDTO) throws ApiException {
    return this.createPayment(paymentRequestDTO, Collections.emptyMap());
  }


  /**
   * Create payment
   * Create a payment  **Tutorials**  * Learn how to [Create a payment](../../tutorials/create-a-payment/). * Learn how to [Create a third-party payment](../../tutorials/create-a-third-party-payment/). 
   * @param paymentRequestDTO create payment request (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return PaymentDTO
   * @throws ApiException if fails to make API call
   */
  public PaymentDTO createPayment(@javax.annotation.Nonnull PaymentRequestDTO paymentRequestDTO, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = paymentRequestDTO;
    
    // verify the required parameter 'paymentRequestDTO' is set
    if (paymentRequestDTO == null) {
      throw new ApiException(400, "Missing the required parameter 'paymentRequestDTO' when calling createPayment");
    }
    
    // create path and map variables
    String localVarPath = "/v2/payments";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "Bearer" };

    TypeReference<PaymentDTO> localVarReturnType = new TypeReference<PaymentDTO>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get a payment by ID
   * Gets a payment by ID.
   * @param paymentId Unique identifier of the payment to get. (required)
   * @return PaymentWithDetailsDTO
   * @throws ApiException if fails to make API call
   */
  public PaymentWithDetailsDTO getPaymentById(@javax.annotation.Nonnull UUID paymentId) throws ApiException {
    return this.getPaymentById(paymentId, Collections.emptyMap());
  }


  /**
   * Get a payment by ID
   * Gets a payment by ID.
   * @param paymentId Unique identifier of the payment to get. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return PaymentWithDetailsDTO
   * @throws ApiException if fails to make API call
   */
  public PaymentWithDetailsDTO getPaymentById(@javax.annotation.Nonnull UUID paymentId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'paymentId' is set
    if (paymentId == null) {
      throw new ApiException(400, "Missing the required parameter 'paymentId' when calling getPaymentById");
    }
    
    // create path and map variables
    String localVarPath = "/v2/payments/{paymentId}"
      .replaceAll("\\{" + "paymentId" + "\\}", apiClient.escapeString(apiClient.parameterToString(paymentId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "Bearer" };

    TypeReference<PaymentWithDetailsDTO> localVarReturnType = new TypeReference<PaymentWithDetailsDTO>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get state transitions by payment ID
   * Gets the state transitions for a payment by ID.
   * @param paymentId Unique identifier of the payment for which you want to get state transition information. (required)
   * @return StateTransitionsResponseDTO
   * @throws ApiException if fails to make API call
   */
  public StateTransitionsResponseDTO getPaymentStateTransitionsById(@javax.annotation.Nonnull UUID paymentId) throws ApiException {
    return this.getPaymentStateTransitionsById(paymentId, Collections.emptyMap());
  }


  /**
   * Get state transitions by payment ID
   * Gets the state transitions for a payment by ID.
   * @param paymentId Unique identifier of the payment for which you want to get state transition information. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return StateTransitionsResponseDTO
   * @throws ApiException if fails to make API call
   */
  public StateTransitionsResponseDTO getPaymentStateTransitionsById(@javax.annotation.Nonnull UUID paymentId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'paymentId' is set
    if (paymentId == null) {
      throw new ApiException(400, "Missing the required parameter 'paymentId' when calling getPaymentStateTransitionsById");
    }
    
    // create path and map variables
    String localVarPath = "/v2/payments/{paymentId}/states"
      .replaceAll("\\{" + "paymentId" + "\\}", apiClient.escapeString(apiClient.parameterToString(paymentId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "Bearer" };

    TypeReference<StateTransitionsResponseDTO> localVarReturnType = new TypeReference<StateTransitionsResponseDTO>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Search payments
   * Search for payments based on filtering criteria.
   * @param searchPaymentsRequestDTO Search payments request (required)
   * @return PaymentsResponseDTO
   * @throws ApiException if fails to make API call
   */
  public PaymentsResponseDTO searchPayments(@javax.annotation.Nonnull SearchPaymentsRequestDTO searchPaymentsRequestDTO) throws ApiException {
    return this.searchPayments(searchPaymentsRequestDTO, Collections.emptyMap());
  }


  /**
   * Search payments
   * Search for payments based on filtering criteria.
   * @param searchPaymentsRequestDTO Search payments request (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return PaymentsResponseDTO
   * @throws ApiException if fails to make API call
   */
  public PaymentsResponseDTO searchPayments(@javax.annotation.Nonnull SearchPaymentsRequestDTO searchPaymentsRequestDTO, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = searchPaymentsRequestDTO;
    
    // verify the required parameter 'searchPaymentsRequestDTO' is set
    if (searchPaymentsRequestDTO == null) {
      throw new ApiException(400, "Missing the required parameter 'searchPaymentsRequestDTO' when calling searchPayments");
    }
    
    // create path and map variables
    String localVarPath = "/v2/payments/filter";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "Bearer" };

    TypeReference<PaymentsResponseDTO> localVarReturnType = new TypeReference<PaymentsResponseDTO>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Update payment labels
   * Add or remove labels for a payment.
   * @param paymentId The unique ID that identifies the payment for which you want to update labels. (required)
   * @param updatePaymentLabelsRequestDTO Labels to add to or remove from the payment. (required)
   * @return UpdatePaymentLabelsResponseDTO
   * @throws ApiException if fails to make API call
   */
  public UpdatePaymentLabelsResponseDTO updatePaymentLabels(@javax.annotation.Nonnull UUID paymentId, @javax.annotation.Nonnull UpdatePaymentLabelsRequestDTO updatePaymentLabelsRequestDTO) throws ApiException {
    return this.updatePaymentLabels(paymentId, updatePaymentLabelsRequestDTO, Collections.emptyMap());
  }


  /**
   * Update payment labels
   * Add or remove labels for a payment.
   * @param paymentId The unique ID that identifies the payment for which you want to update labels. (required)
   * @param updatePaymentLabelsRequestDTO Labels to add to or remove from the payment. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return UpdatePaymentLabelsResponseDTO
   * @throws ApiException if fails to make API call
   */
  public UpdatePaymentLabelsResponseDTO updatePaymentLabels(@javax.annotation.Nonnull UUID paymentId, @javax.annotation.Nonnull UpdatePaymentLabelsRequestDTO updatePaymentLabelsRequestDTO, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = updatePaymentLabelsRequestDTO;
    
    // verify the required parameter 'paymentId' is set
    if (paymentId == null) {
      throw new ApiException(400, "Missing the required parameter 'paymentId' when calling updatePaymentLabels");
    }
    
    // verify the required parameter 'updatePaymentLabelsRequestDTO' is set
    if (updatePaymentLabelsRequestDTO == null) {
      throw new ApiException(400, "Missing the required parameter 'updatePaymentLabelsRequestDTO' when calling updatePaymentLabels");
    }
    
    // create path and map variables
    String localVarPath = "/v2/payments/{paymentId}/labels"
      .replaceAll("\\{" + "paymentId" + "\\}", apiClient.escapeString(apiClient.parameterToString(paymentId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "Bearer" };

    TypeReference<UpdatePaymentLabelsResponseDTO> localVarReturnType = new TypeReference<UpdatePaymentLabelsResponseDTO>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PATCH",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "Bearer" };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
