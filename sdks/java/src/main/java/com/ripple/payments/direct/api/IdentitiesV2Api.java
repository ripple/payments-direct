/*
 * Payments Direct API
 * Use the Payments Direct API to get quotes, create and manage payments, and manage originator and beneficiary identities.  ## API environments  The Payments Direct API offers the following environments:  | <div style=\"width:90px\">Environment</div>  | Base URL                      | Description                               | | ------------------------------------------ | ----------------------------- | ----------------------------------------- | | Test                                       | `https://api.test.ripple.com` | Test environment with simulated currency. | | Production                                 | `https://api.ripple.com`      | Production environment                    |  ## API authentication  All {{process.env.VAR_RPD}} API operations require a Bearer access token specific to the environment you're using. Ripple provides a secure model for authentication and authorization by providing access tokens scoped for a set of credentials.  ### Generate client ID and client secret  You will need your _client ID_ and _client secret_ to obtain an access token.  If you do not already have your client ID and client secret, do the following:  1. Log into the Ripple Payments UI. 2. In the left navigation menu, click **Settings**. 3. Under **Administration**, click **API Credentials**. 4. In the dropdown list next to the page title, select the access environment. For example, to provision credentials for the test environment, select **Test** from the dropdown list. 5. In the upper right corner of the page, click **New Credential**. 6. Click **Save and Generate Key**.  **Caution:** The *client secret* is displayed only once when you are creating new credentials. You cannot retrieve the secret after exiting this page. Copy and store the client secret securely and share it with authorized individuals in accordance with your organization's security policy.  You can now use the client ID and client secret to generate access tokens using the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation.  ### Request an access token  To get an access token, use the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation with your `client_id` and `client_secret`. The response contains a token in the `access_token` field.  We recommend rotating your API credentials at regular intervals according to your organization's security policy.  **Note**: Authentication tokens are not a fixed length and can vary, avoid validating tokens based on character length. 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ripple.payments.direct.api;

import com.fasterxml.jackson.core.type.TypeReference;

import com.ripple.payments.direct.ApiException;
import com.ripple.payments.direct.ApiClient;
import com.ripple.payments.direct.BaseApi;
import com.ripple.payments.direct.Configuration;
import com.ripple.payments.direct.Pair;

import com.ripple.payments.direct.model.CreateIdentityRequestV2DTO;
import com.ripple.payments.direct.model.CreateIdentityResponseDTO;
import com.ripple.payments.direct.model.ErrorResponseDTO;
import com.ripple.payments.direct.model.IdentityResponseV2DTO;
import com.ripple.payments.direct.model.IdentityTypeV2DTO;
import com.ripple.payments.direct.model.ListIdentitiesResponseV2DTO;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0")
public class IdentitiesV2Api extends BaseApi {

  public IdentitiesV2Api() {
    super(Configuration.getDefaultApiClient());
  }

  public IdentitiesV2Api(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * Create a new identity
   * Create a new identity.  &lt;!-- **Tutorials**  * Learn how to [Create an identity](../../tutorials/create-an-identity/). --&gt; 
   * @param createIdentityRequestV2DTO  (required)
   * @return CreateIdentityResponseDTO
   * @throws ApiException if fails to make API call
   */
  public CreateIdentityResponseDTO createIdentityV2(@javax.annotation.Nonnull CreateIdentityRequestV2DTO createIdentityRequestV2DTO) throws ApiException {
    return this.createIdentityV2(createIdentityRequestV2DTO, Collections.emptyMap());
  }


  /**
   * Create a new identity
   * Create a new identity.  &lt;!-- **Tutorials**  * Learn how to [Create an identity](../../tutorials/create-an-identity/). --&gt; 
   * @param createIdentityRequestV2DTO  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return CreateIdentityResponseDTO
   * @throws ApiException if fails to make API call
   */
  public CreateIdentityResponseDTO createIdentityV2(@javax.annotation.Nonnull CreateIdentityRequestV2DTO createIdentityRequestV2DTO, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = createIdentityRequestV2DTO;
    
    // verify the required parameter 'createIdentityRequestV2DTO' is set
    if (createIdentityRequestV2DTO == null) {
      throw new ApiException(400, "Missing the required parameter 'createIdentityRequestV2DTO' when calling createIdentityV2");
    }
    
    // create path and map variables
    String localVarPath = "/v2/identities";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "Bearer" };

    TypeReference<CreateIdentityResponseDTO> localVarReturnType = new TypeReference<CreateIdentityResponseDTO>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete an identity
   * Delete an identity
   * @param identityId Unique UUID string that maps to the identity to be deleted. (required)
   * @throws ApiException if fails to make API call
   */
  public void deactivateIdentityV2(@javax.annotation.Nonnull String identityId) throws ApiException {
    this.deactivateIdentityV2(identityId, Collections.emptyMap());
  }


  /**
   * Delete an identity
   * Delete an identity
   * @param identityId Unique UUID string that maps to the identity to be deleted. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void deactivateIdentityV2(@javax.annotation.Nonnull String identityId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'identityId' is set
    if (identityId == null) {
      throw new ApiException(400, "Missing the required parameter 'identityId' when calling deactivateIdentityV2");
    }
    
    // create path and map variables
    String localVarPath = "/v2/identities/{identity-id}"
      .replaceAll("\\{" + "identity-id" + "\\}", apiClient.escapeString(apiClient.parameterToString(identityId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "Bearer" };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Get a list of identities
   * Get a list of identities that match the query parameters.  **Note**: Depending on the number of identities in your account, not all of them may be returned even if they match your query parameters. 
   * @param identityType The type of identities you want to retrieve (optional)
   * @param nickName The nickname for the identity provided at the time of identity creation (optional)
   * @return ListIdentitiesResponseV2DTO
   * @throws ApiException if fails to make API call
   */
  public ListIdentitiesResponseV2DTO getIdentitiesV2(@javax.annotation.Nullable IdentityTypeV2DTO identityType, @javax.annotation.Nullable String nickName) throws ApiException {
    return this.getIdentitiesV2(identityType, nickName, Collections.emptyMap());
  }


  /**
   * Get a list of identities
   * Get a list of identities that match the query parameters.  **Note**: Depending on the number of identities in your account, not all of them may be returned even if they match your query parameters. 
   * @param identityType The type of identities you want to retrieve (optional)
   * @param nickName The nickname for the identity provided at the time of identity creation (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return ListIdentitiesResponseV2DTO
   * @throws ApiException if fails to make API call
   */
  public ListIdentitiesResponseV2DTO getIdentitiesV2(@javax.annotation.Nullable IdentityTypeV2DTO identityType, @javax.annotation.Nullable String nickName, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/v2/identities";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("identityType", identityType));
    localVarQueryParams.addAll(apiClient.parameterToPair("nickName", nickName));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "Bearer" };

    TypeReference<ListIdentitiesResponseV2DTO> localVarReturnType = new TypeReference<ListIdentitiesResponseV2DTO>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get an identity by ID
   * Get an identity by its unique ID
   * @param identityId The ID of the identity to get. (required)
   * @param version Version of the identity you want to retrieve.  **Note**: If you don&#39;t specify a version, the latest version of the identity is returned.  (optional)
   * @return IdentityResponseV2DTO
   * @throws ApiException if fails to make API call
   */
  public IdentityResponseV2DTO getIdentityByIdV2(@javax.annotation.Nonnull String identityId, @javax.annotation.Nullable Integer version) throws ApiException {
    return this.getIdentityByIdV2(identityId, version, Collections.emptyMap());
  }


  /**
   * Get an identity by ID
   * Get an identity by its unique ID
   * @param identityId The ID of the identity to get. (required)
   * @param version Version of the identity you want to retrieve.  **Note**: If you don&#39;t specify a version, the latest version of the identity is returned.  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return IdentityResponseV2DTO
   * @throws ApiException if fails to make API call
   */
  public IdentityResponseV2DTO getIdentityByIdV2(@javax.annotation.Nonnull String identityId, @javax.annotation.Nullable Integer version, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'identityId' is set
    if (identityId == null) {
      throw new ApiException(400, "Missing the required parameter 'identityId' when calling getIdentityByIdV2");
    }
    
    // create path and map variables
    String localVarPath = "/v2/identities/{identity-id}"
      .replaceAll("\\{" + "identity-id" + "\\}", apiClient.escapeString(apiClient.parameterToString(identityId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("version", version));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "Bearer" };

    TypeReference<IdentityResponseV2DTO> localVarReturnType = new TypeReference<IdentityResponseV2DTO>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "Bearer" };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
