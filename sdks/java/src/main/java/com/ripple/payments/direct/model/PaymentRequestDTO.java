/*
 * Payments Direct API
 * Use the Payments Direct API to get quotes, create and manage payments, and manage originator and beneficiary identities.  ## API environments  The Payments Direct API offers the following environments:  | <div style=\"width:90px\">Environment</div>  | Base URL                      | Description                               | | ------------------------------------------ | ----------------------------- | ----------------------------------------- | | Test                                       | `https://api.test.ripple.com` | Test environment with simulated currency. | | Production                                 | `https://api.ripple.com`      | Production environment                    |  ## API authentication  All {{process.env.VAR_RPD}} API operations require a Bearer access token specific to the environment you're using. Ripple provides a secure model for authentication and authorization by providing access tokens scoped for a set of credentials.  ### Generate client ID and client secret  You will need your _client ID_ and _client secret_ to obtain an access token.  If you do not already have your client ID and client secret, do the following:  1. Log into the Ripple Payments UI. 2. In the left navigation menu, click **Settings**. 3. Under **Administration**, click **API Credentials**. 4. In the dropdown list next to the page title, select the access environment. For example, to provision credentials for the test environment, select **Test** from the dropdown list. 5. In the upper right corner of the page, click **New Credential**. 6. Click **Save and Generate Key**.  **Caution:** The *client secret* is displayed only once when you are creating new credentials. You cannot retrieve the secret after exiting this page. Copy and store the client secret securely and share it with authorized individuals in accordance with your organization's security policy.  You can now use the client ID and client secret to generate access tokens using the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation.  ### Request an access token  To get an access token, use the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation with your `client_id` and `client_secret`. The response contains a token in the `access_token` field.  We recommend rotating your API credentials at regular intervals according to your organization's security policy.  **Note**: Authentication tokens are not a fixed length and can vary, avoid validating tokens based on character length. 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ripple.payments.direct.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Information required to initiate a payment.
 */
@JsonPropertyOrder({
  PaymentRequestDTO.JSON_PROPERTY_QUOTE_ID,
  PaymentRequestDTO.JSON_PROPERTY_ORIGINATOR_IDENTITY_ID,
  PaymentRequestDTO.JSON_PROPERTY_BENEFICIARY_IDENTITY_ID,
  PaymentRequestDTO.JSON_PROPERTY_INTERNAL_ID,
  PaymentRequestDTO.JSON_PROPERTY_PURPOSE_CODE,
  PaymentRequestDTO.JSON_PROPERTY_SOURCE_OF_CASH,
  PaymentRequestDTO.JSON_PROPERTY_PAYMENT_LABELS
})
@JsonTypeName("PaymentRequest")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0")
public class PaymentRequestDTO {
  public static final String JSON_PROPERTY_QUOTE_ID = "quoteId";
  @javax.annotation.Nonnull
  private UUID quoteId;

  public static final String JSON_PROPERTY_ORIGINATOR_IDENTITY_ID = "originatorIdentityId";
  @javax.annotation.Nullable
  private UUID originatorIdentityId;

  public static final String JSON_PROPERTY_BENEFICIARY_IDENTITY_ID = "beneficiaryIdentityId";
  @javax.annotation.Nonnull
  private UUID beneficiaryIdentityId;

  public static final String JSON_PROPERTY_INTERNAL_ID = "internalId";
  @javax.annotation.Nullable
  private String internalId;

  public static final String JSON_PROPERTY_PURPOSE_CODE = "purposeCode";
  @javax.annotation.Nullable
  private String purposeCode;

  public static final String JSON_PROPERTY_SOURCE_OF_CASH = "sourceOfCash";
  @javax.annotation.Nullable
  private String sourceOfCash;

  public static final String JSON_PROPERTY_PAYMENT_LABELS = "paymentLabels";
  @javax.annotation.Nullable
  private List<String> paymentLabels = new ArrayList<>();

  public PaymentRequestDTO() {
  }

  public PaymentRequestDTO quoteId(@javax.annotation.Nonnull UUID quoteId) {
    
    this.quoteId = quoteId;
    return this;
  }

  /**
   * ID of the quote you want to accept to initiate this payment. Must be in UUID format. This will be used as paymentId.
   * @return quoteId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_QUOTE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getQuoteId() {
    return quoteId;
  }


  @JsonProperty(JSON_PROPERTY_QUOTE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setQuoteId(@javax.annotation.Nonnull UUID quoteId) {
    this.quoteId = quoteId;
  }

  public PaymentRequestDTO originatorIdentityId(@javax.annotation.Nullable UUID originatorIdentityId) {
    
    this.originatorIdentityId = originatorIdentityId;
    return this;
  }

  /**
   * The identity ID of the payment originator in UUID format. You can find the identity ID using the &#x60;GET /identities&#x60; operation.
   * @return originatorIdentityId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ORIGINATOR_IDENTITY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UUID getOriginatorIdentityId() {
    return originatorIdentityId;
  }


  @JsonProperty(JSON_PROPERTY_ORIGINATOR_IDENTITY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOriginatorIdentityId(@javax.annotation.Nullable UUID originatorIdentityId) {
    this.originatorIdentityId = originatorIdentityId;
  }

  public PaymentRequestDTO beneficiaryIdentityId(@javax.annotation.Nonnull UUID beneficiaryIdentityId) {
    
    this.beneficiaryIdentityId = beneficiaryIdentityId;
    return this;
  }

  /**
   * The identity ID of the payment beneficiary in UUID format. You can find the identity ID using the &#x60;GET /identities&#x60; operation.
   * @return beneficiaryIdentityId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BENEFICIARY_IDENTITY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getBeneficiaryIdentityId() {
    return beneficiaryIdentityId;
  }


  @JsonProperty(JSON_PROPERTY_BENEFICIARY_IDENTITY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBeneficiaryIdentityId(@javax.annotation.Nonnull UUID beneficiaryIdentityId) {
    this.beneficiaryIdentityId = beneficiaryIdentityId;
  }

  public PaymentRequestDTO internalId(@javax.annotation.Nullable String internalId) {
    
    this.internalId = internalId;
    return this;
  }

  /**
   * Customer defined value, such as an invoice number.
   * @return internalId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INTERNAL_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getInternalId() {
    return internalId;
  }


  @JsonProperty(JSON_PROPERTY_INTERNAL_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInternalId(@javax.annotation.Nullable String internalId) {
    this.internalId = internalId;
  }

  public PaymentRequestDTO purposeCode(@javax.annotation.Nullable String purposeCode) {
    
    this.purposeCode = purposeCode;
    return this;
  }

  /**
   * Indicates the purpose of the payment  For more information about the &#x60;purposeCode&#x60; options, see [purposeCode](../../building-payment-request-body/#purposecode). 
   * @return purposeCode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PURPOSE_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPurposeCode() {
    return purposeCode;
  }


  @JsonProperty(JSON_PROPERTY_PURPOSE_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPurposeCode(@javax.annotation.Nullable String purposeCode) {
    this.purposeCode = purposeCode;
  }

  public PaymentRequestDTO sourceOfCash(@javax.annotation.Nullable String sourceOfCash) {
    
    this.sourceOfCash = sourceOfCash;
    return this;
  }

  /**
   * Source of cash for payout.
   * @return sourceOfCash
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOURCE_OF_CASH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSourceOfCash() {
    return sourceOfCash;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE_OF_CASH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSourceOfCash(@javax.annotation.Nullable String sourceOfCash) {
    this.sourceOfCash = sourceOfCash;
  }

  public PaymentRequestDTO paymentLabels(@javax.annotation.Nullable List<String> paymentLabels) {
    
    this.paymentLabels = paymentLabels;
    return this;
  }

  public PaymentRequestDTO addPaymentLabelsItem(String paymentLabelsItem) {
    if (this.paymentLabels == null) {
      this.paymentLabels = new ArrayList<>();
    }
    this.paymentLabels.add(paymentLabelsItem);
    return this;
  }

  /**
   * List of labels associated with the payment. A label typically contains a UUID of your choice, designated as the batchId.
   * @return paymentLabels
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAYMENT_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getPaymentLabels() {
    return paymentLabels;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENT_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaymentLabels(@javax.annotation.Nullable List<String> paymentLabels) {
    this.paymentLabels = paymentLabels;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentRequestDTO paymentRequest = (PaymentRequestDTO) o;
    return Objects.equals(this.quoteId, paymentRequest.quoteId) &&
        Objects.equals(this.originatorIdentityId, paymentRequest.originatorIdentityId) &&
        Objects.equals(this.beneficiaryIdentityId, paymentRequest.beneficiaryIdentityId) &&
        Objects.equals(this.internalId, paymentRequest.internalId) &&
        Objects.equals(this.purposeCode, paymentRequest.purposeCode) &&
        Objects.equals(this.sourceOfCash, paymentRequest.sourceOfCash) &&
        Objects.equals(this.paymentLabels, paymentRequest.paymentLabels);
  }

  @Override
  public int hashCode() {
    return Objects.hash(quoteId, originatorIdentityId, beneficiaryIdentityId, internalId, purposeCode, sourceOfCash, paymentLabels);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentRequestDTO {\n");
    sb.append("    quoteId: ").append(toIndentedString(quoteId)).append("\n");
    sb.append("    originatorIdentityId: ").append(toIndentedString(originatorIdentityId)).append("\n");
    sb.append("    beneficiaryIdentityId: ").append(toIndentedString(beneficiaryIdentityId)).append("\n");
    sb.append("    internalId: ").append(toIndentedString(internalId)).append("\n");
    sb.append("    purposeCode: ").append(toIndentedString(purposeCode)).append("\n");
    sb.append("    sourceOfCash: ").append(toIndentedString(sourceOfCash)).append("\n");
    sb.append("    paymentLabels: ").append(toIndentedString(paymentLabels)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `quoteId` to the URL query string
    if (getQuoteId() != null) {
      try {
        joiner.add(String.format("%squoteId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getQuoteId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `originatorIdentityId` to the URL query string
    if (getOriginatorIdentityId() != null) {
      try {
        joiner.add(String.format("%soriginatorIdentityId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOriginatorIdentityId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `beneficiaryIdentityId` to the URL query string
    if (getBeneficiaryIdentityId() != null) {
      try {
        joiner.add(String.format("%sbeneficiaryIdentityId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBeneficiaryIdentityId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `internalId` to the URL query string
    if (getInternalId() != null) {
      try {
        joiner.add(String.format("%sinternalId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInternalId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `purposeCode` to the URL query string
    if (getPurposeCode() != null) {
      try {
        joiner.add(String.format("%spurposeCode%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPurposeCode()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `sourceOfCash` to the URL query string
    if (getSourceOfCash() != null) {
      try {
        joiner.add(String.format("%ssourceOfCash%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSourceOfCash()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `paymentLabels` to the URL query string
    if (getPaymentLabels() != null) {
      for (int i = 0; i < getPaymentLabels().size(); i++) {
        try {
          joiner.add(String.format("%spaymentLabels%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getPaymentLabels().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    return joiner.toString();
  }

}

