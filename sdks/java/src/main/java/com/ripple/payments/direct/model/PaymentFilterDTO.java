/*
 * Payments Direct API
 * Use the Payments Direct API to get quotes, create and manage payments, and manage originator and beneficiary identities.  ## API environments  The Payments Direct API offers the following environments:  | <div style=\"width:90px\">Environment</div>  | Base URL                      | Description                               | | ------------------------------------------ | ----------------------------- | ----------------------------------------- | | Test                                       | `https://api.test.ripple.com` | Test environment with simulated currency. | | Production                                 | `https://api.ripple.com`      | Production environment                    |  ## API authentication  All {{process.env.VAR_RPD}} API operations require a Bearer access token specific to the environment you're using. Ripple provides a secure model for authentication and authorization by providing access tokens scoped for a set of credentials.  ### Generate client ID and client secret  You will need your _client ID_ and _client secret_ to obtain an access token.  If you do not already have your client ID and client secret, do the following:  1. Log into the Ripple Payments UI. 2. In the left navigation menu, click **Settings**. 3. Under **Administration**, click **API Credentials**. 4. In the dropdown list next to the page title, select the access environment. For example, to provision credentials for the test environment, select **Test** from the dropdown list. 5. In the upper right corner of the page, click **New Credential**. 6. Click **Save and Generate Key**.  **Caution:** The *client secret* is displayed only once when you are creating new credentials. You cannot retrieve the secret after exiting this page. Copy and store the client secret securely and share it with authorized individuals in accordance with your organization's security policy.  You can now use the client ID and client secret to generate access tokens using the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation.  ### Request an access token  To get an access token, use the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation with your `client_id` and `client_secret`. The response contains a token in the `access_token` field.  We recommend rotating your API credentials at regular intervals according to your organization's security policy.  **Note**: Authentication tokens are not a fixed length and can vary, avoid validating tokens based on character length. 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ripple.payments.direct.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.ripple.payments.direct.model.PaymentFilterRangeTypeDTO;
import com.ripple.payments.direct.model.PaymentStateDTO;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Filter criteria to return desired payment search results.
 */
@JsonPropertyOrder({
  PaymentFilterDTO.JSON_PROPERTY_PAYMENT_IDS,
  PaymentFilterDTO.JSON_PROPERTY_PAYMENT_STATES,
  PaymentFilterDTO.JSON_PROPERTY_FILTER_RANGE_TYPE,
  PaymentFilterDTO.JSON_PROPERTY_BEFORE_TIMESTAMP,
  PaymentFilterDTO.JSON_PROPERTY_AFTER_TIMESTAMP,
  PaymentFilterDTO.JSON_PROPERTY_BENEFICIARY_IDENTITY_IDS,
  PaymentFilterDTO.JSON_PROPERTY_INTERNAL_ID,
  PaymentFilterDTO.JSON_PROPERTY_BENEFICIARY_IDENTITY_NICKNAME,
  PaymentFilterDTO.JSON_PROPERTY_DESTINATION_CURRENCIES,
  PaymentFilterDTO.JSON_PROPERTY_PAYMENT_LABELS
})
@JsonTypeName("PaymentFilter")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0")
public class PaymentFilterDTO {
  public static final String JSON_PROPERTY_PAYMENT_IDS = "paymentIds";
  @javax.annotation.Nullable
  private List<UUID> paymentIds = new ArrayList<>();

  public static final String JSON_PROPERTY_PAYMENT_STATES = "paymentStates";
  @javax.annotation.Nullable
  private List<PaymentStateDTO> paymentStates = new ArrayList<>();

  public static final String JSON_PROPERTY_FILTER_RANGE_TYPE = "filterRangeType";
  @javax.annotation.Nullable
  private PaymentFilterRangeTypeDTO filterRangeType;

  public static final String JSON_PROPERTY_BEFORE_TIMESTAMP = "beforeTimestamp";
  @javax.annotation.Nullable
  private OffsetDateTime beforeTimestamp;

  public static final String JSON_PROPERTY_AFTER_TIMESTAMP = "afterTimestamp";
  @javax.annotation.Nullable
  private OffsetDateTime afterTimestamp;

  public static final String JSON_PROPERTY_BENEFICIARY_IDENTITY_IDS = "beneficiaryIdentityIds";
  @javax.annotation.Nullable
  private List<UUID> beneficiaryIdentityIds = new ArrayList<>();

  public static final String JSON_PROPERTY_INTERNAL_ID = "internalId";
  @javax.annotation.Nullable
  private String internalId;

  public static final String JSON_PROPERTY_BENEFICIARY_IDENTITY_NICKNAME = "beneficiaryIdentityNickname";
  @javax.annotation.Nullable
  private String beneficiaryIdentityNickname;

  public static final String JSON_PROPERTY_DESTINATION_CURRENCIES = "destinationCurrencies";
  @javax.annotation.Nullable
  private List<String> destinationCurrencies = new ArrayList<>();

  public static final String JSON_PROPERTY_PAYMENT_LABELS = "paymentLabels";
  @javax.annotation.Nullable
  private List<String> paymentLabels = new ArrayList<>();

  public PaymentFilterDTO() {
  }

  public PaymentFilterDTO paymentIds(@javax.annotation.Nullable List<UUID> paymentIds) {
    
    this.paymentIds = paymentIds;
    return this;
  }

  public PaymentFilterDTO addPaymentIdsItem(UUID paymentIdsItem) {
    if (this.paymentIds == null) {
      this.paymentIds = new ArrayList<>();
    }
    this.paymentIds.add(paymentIdsItem);
    return this;
  }

  /**
   * Specify a list of uuids to search for payment with payment ids equals one from the list
   * @return paymentIds
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAYMENT_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<UUID> getPaymentIds() {
    return paymentIds;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENT_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaymentIds(@javax.annotation.Nullable List<UUID> paymentIds) {
    this.paymentIds = paymentIds;
  }

  public PaymentFilterDTO paymentStates(@javax.annotation.Nullable List<PaymentStateDTO> paymentStates) {
    
    this.paymentStates = paymentStates;
    return this;
  }

  public PaymentFilterDTO addPaymentStatesItem(PaymentStateDTO paymentStatesItem) {
    if (this.paymentStates == null) {
      this.paymentStates = new ArrayList<>();
    }
    this.paymentStates.add(paymentStatesItem);
    return this;
  }

  /**
   * Array of payment states like &#x60;EXECUTING&#x60; or &#x60;COMPLETED&#x60;.
   * @return paymentStates
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAYMENT_STATES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<PaymentStateDTO> getPaymentStates() {
    return paymentStates;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENT_STATES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaymentStates(@javax.annotation.Nullable List<PaymentStateDTO> paymentStates) {
    this.paymentStates = paymentStates;
  }

  public PaymentFilterDTO filterRangeType(@javax.annotation.Nullable PaymentFilterRangeTypeDTO filterRangeType) {
    
    this.filterRangeType = filterRangeType;
    return this;
  }

  /**
   * Get filterRangeType
   * @return filterRangeType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FILTER_RANGE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PaymentFilterRangeTypeDTO getFilterRangeType() {
    return filterRangeType;
  }


  @JsonProperty(JSON_PROPERTY_FILTER_RANGE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFilterRangeType(@javax.annotation.Nullable PaymentFilterRangeTypeDTO filterRangeType) {
    this.filterRangeType = filterRangeType;
  }

  public PaymentFilterDTO beforeTimestamp(@javax.annotation.Nullable OffsetDateTime beforeTimestamp) {
    
    this.beforeTimestamp = beforeTimestamp;
    return this;
  }

  /**
   * Depending on the value of the &#x60;filterRangeType&#x60; field, this timestamp returns a list of payments that were created/modified/expired at or before the specified time.
   * @return beforeTimestamp
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BEFORE_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getBeforeTimestamp() {
    return beforeTimestamp;
  }


  @JsonProperty(JSON_PROPERTY_BEFORE_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBeforeTimestamp(@javax.annotation.Nullable OffsetDateTime beforeTimestamp) {
    this.beforeTimestamp = beforeTimestamp;
  }

  public PaymentFilterDTO afterTimestamp(@javax.annotation.Nullable OffsetDateTime afterTimestamp) {
    
    this.afterTimestamp = afterTimestamp;
    return this;
  }

  /**
   * Depending on the value of the &#x60;filterRangeType&#x60; field, this timestamp returns a list of payments that were created/modified/expired at or after the specified time.
   * @return afterTimestamp
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AFTER_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getAfterTimestamp() {
    return afterTimestamp;
  }


  @JsonProperty(JSON_PROPERTY_AFTER_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAfterTimestamp(@javax.annotation.Nullable OffsetDateTime afterTimestamp) {
    this.afterTimestamp = afterTimestamp;
  }

  public PaymentFilterDTO beneficiaryIdentityIds(@javax.annotation.Nullable List<UUID> beneficiaryIdentityIds) {
    
    this.beneficiaryIdentityIds = beneficiaryIdentityIds;
    return this;
  }

  public PaymentFilterDTO addBeneficiaryIdentityIdsItem(UUID beneficiaryIdentityIdsItem) {
    if (this.beneficiaryIdentityIds == null) {
      this.beneficiaryIdentityIds = new ArrayList<>();
    }
    this.beneficiaryIdentityIds.add(beneficiaryIdentityIdsItem);
    return this;
  }

  /**
   * To get all payments made to one or more beneficiaries, specify the identity ID(s) of those beneficiaries in this field. You can find the identity ID using the &#x60;GET /identities&#x60; operation.
   * @return beneficiaryIdentityIds
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BENEFICIARY_IDENTITY_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<UUID> getBeneficiaryIdentityIds() {
    return beneficiaryIdentityIds;
  }


  @JsonProperty(JSON_PROPERTY_BENEFICIARY_IDENTITY_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBeneficiaryIdentityIds(@javax.annotation.Nullable List<UUID> beneficiaryIdentityIds) {
    this.beneficiaryIdentityIds = beneficiaryIdentityIds;
  }

  public PaymentFilterDTO internalId(@javax.annotation.Nullable String internalId) {
    
    this.internalId = internalId;
    return this;
  }

  /**
   * Specify an &#x60;internalId&#x60; to get payments associated with them. A prefix match will be executed.
   * @return internalId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INTERNAL_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getInternalId() {
    return internalId;
  }


  @JsonProperty(JSON_PROPERTY_INTERNAL_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInternalId(@javax.annotation.Nullable String internalId) {
    this.internalId = internalId;
  }

  public PaymentFilterDTO beneficiaryIdentityNickname(@javax.annotation.Nullable String beneficiaryIdentityNickname) {
    
    this.beneficiaryIdentityNickname = beneficiaryIdentityNickname;
    return this;
  }

  /**
   * To get all payments made to a beneficiary, specify the nickname of that beneficiary in this field. You can find the nickname using the &#x60;GET /identities&#x60; operation.
   * @return beneficiaryIdentityNickname
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BENEFICIARY_IDENTITY_NICKNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBeneficiaryIdentityNickname() {
    return beneficiaryIdentityNickname;
  }


  @JsonProperty(JSON_PROPERTY_BENEFICIARY_IDENTITY_NICKNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBeneficiaryIdentityNickname(@javax.annotation.Nullable String beneficiaryIdentityNickname) {
    this.beneficiaryIdentityNickname = beneficiaryIdentityNickname;
  }

  public PaymentFilterDTO destinationCurrencies(@javax.annotation.Nullable List<String> destinationCurrencies) {
    
    this.destinationCurrencies = destinationCurrencies;
    return this;
  }

  public PaymentFilterDTO addDestinationCurrenciesItem(String destinationCurrenciesItem) {
    if (this.destinationCurrencies == null) {
      this.destinationCurrencies = new ArrayList<>();
    }
    this.destinationCurrencies.add(destinationCurrenciesItem);
    return this;
  }

  /**
   * Specify one or more currency codes to get payments where the beneficiary received funds in these currencies.
   * @return destinationCurrencies
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESTINATION_CURRENCIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getDestinationCurrencies() {
    return destinationCurrencies;
  }


  @JsonProperty(JSON_PROPERTY_DESTINATION_CURRENCIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDestinationCurrencies(@javax.annotation.Nullable List<String> destinationCurrencies) {
    this.destinationCurrencies = destinationCurrencies;
  }

  public PaymentFilterDTO paymentLabels(@javax.annotation.Nullable List<String> paymentLabels) {
    
    this.paymentLabels = paymentLabels;
    return this;
  }

  public PaymentFilterDTO addPaymentLabelsItem(String paymentLabelsItem) {
    if (this.paymentLabels == null) {
      this.paymentLabels = new ArrayList<>();
    }
    this.paymentLabels.add(paymentLabelsItem);
    return this;
  }

  /**
   * List of labels associated with the payment. A label typically contains a UUID of your choice, designated as the batchId.
   * @return paymentLabels
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAYMENT_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getPaymentLabels() {
    return paymentLabels;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENT_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaymentLabels(@javax.annotation.Nullable List<String> paymentLabels) {
    this.paymentLabels = paymentLabels;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentFilterDTO paymentFilter = (PaymentFilterDTO) o;
    return Objects.equals(this.paymentIds, paymentFilter.paymentIds) &&
        Objects.equals(this.paymentStates, paymentFilter.paymentStates) &&
        Objects.equals(this.filterRangeType, paymentFilter.filterRangeType) &&
        Objects.equals(this.beforeTimestamp, paymentFilter.beforeTimestamp) &&
        Objects.equals(this.afterTimestamp, paymentFilter.afterTimestamp) &&
        Objects.equals(this.beneficiaryIdentityIds, paymentFilter.beneficiaryIdentityIds) &&
        Objects.equals(this.internalId, paymentFilter.internalId) &&
        Objects.equals(this.beneficiaryIdentityNickname, paymentFilter.beneficiaryIdentityNickname) &&
        Objects.equals(this.destinationCurrencies, paymentFilter.destinationCurrencies) &&
        Objects.equals(this.paymentLabels, paymentFilter.paymentLabels);
  }

  @Override
  public int hashCode() {
    return Objects.hash(paymentIds, paymentStates, filterRangeType, beforeTimestamp, afterTimestamp, beneficiaryIdentityIds, internalId, beneficiaryIdentityNickname, destinationCurrencies, paymentLabels);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentFilterDTO {\n");
    sb.append("    paymentIds: ").append(toIndentedString(paymentIds)).append("\n");
    sb.append("    paymentStates: ").append(toIndentedString(paymentStates)).append("\n");
    sb.append("    filterRangeType: ").append(toIndentedString(filterRangeType)).append("\n");
    sb.append("    beforeTimestamp: ").append(toIndentedString(beforeTimestamp)).append("\n");
    sb.append("    afterTimestamp: ").append(toIndentedString(afterTimestamp)).append("\n");
    sb.append("    beneficiaryIdentityIds: ").append(toIndentedString(beneficiaryIdentityIds)).append("\n");
    sb.append("    internalId: ").append(toIndentedString(internalId)).append("\n");
    sb.append("    beneficiaryIdentityNickname: ").append(toIndentedString(beneficiaryIdentityNickname)).append("\n");
    sb.append("    destinationCurrencies: ").append(toIndentedString(destinationCurrencies)).append("\n");
    sb.append("    paymentLabels: ").append(toIndentedString(paymentLabels)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `paymentIds` to the URL query string
    if (getPaymentIds() != null) {
      for (int i = 0; i < getPaymentIds().size(); i++) {
        if (getPaymentIds().get(i) != null) {
          try {
            joiner.add(String.format("%spaymentIds%s%s=%s", prefix, suffix,
                "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
                URLEncoder.encode(String.valueOf(getPaymentIds().get(i)), "UTF-8").replaceAll("\\+", "%20")));
          } catch (UnsupportedEncodingException e) {
            // Should never happen, UTF-8 is always supported
            throw new RuntimeException(e);
          }
        }
      }
    }

    // add `paymentStates` to the URL query string
    if (getPaymentStates() != null) {
      for (int i = 0; i < getPaymentStates().size(); i++) {
        if (getPaymentStates().get(i) != null) {
          try {
            joiner.add(String.format("%spaymentStates%s%s=%s", prefix, suffix,
                "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
                URLEncoder.encode(String.valueOf(getPaymentStates().get(i)), "UTF-8").replaceAll("\\+", "%20")));
          } catch (UnsupportedEncodingException e) {
            // Should never happen, UTF-8 is always supported
            throw new RuntimeException(e);
          }
        }
      }
    }

    // add `filterRangeType` to the URL query string
    if (getFilterRangeType() != null) {
      try {
        joiner.add(String.format("%sfilterRangeType%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFilterRangeType()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `beforeTimestamp` to the URL query string
    if (getBeforeTimestamp() != null) {
      try {
        joiner.add(String.format("%sbeforeTimestamp%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBeforeTimestamp()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `afterTimestamp` to the URL query string
    if (getAfterTimestamp() != null) {
      try {
        joiner.add(String.format("%safterTimestamp%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAfterTimestamp()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `beneficiaryIdentityIds` to the URL query string
    if (getBeneficiaryIdentityIds() != null) {
      for (int i = 0; i < getBeneficiaryIdentityIds().size(); i++) {
        if (getBeneficiaryIdentityIds().get(i) != null) {
          try {
            joiner.add(String.format("%sbeneficiaryIdentityIds%s%s=%s", prefix, suffix,
                "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
                URLEncoder.encode(String.valueOf(getBeneficiaryIdentityIds().get(i)), "UTF-8").replaceAll("\\+", "%20")));
          } catch (UnsupportedEncodingException e) {
            // Should never happen, UTF-8 is always supported
            throw new RuntimeException(e);
          }
        }
      }
    }

    // add `internalId` to the URL query string
    if (getInternalId() != null) {
      try {
        joiner.add(String.format("%sinternalId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInternalId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `beneficiaryIdentityNickname` to the URL query string
    if (getBeneficiaryIdentityNickname() != null) {
      try {
        joiner.add(String.format("%sbeneficiaryIdentityNickname%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBeneficiaryIdentityNickname()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `destinationCurrencies` to the URL query string
    if (getDestinationCurrencies() != null) {
      for (int i = 0; i < getDestinationCurrencies().size(); i++) {
        try {
          joiner.add(String.format("%sdestinationCurrencies%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getDestinationCurrencies().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `paymentLabels` to the URL query string
    if (getPaymentLabels() != null) {
      for (int i = 0; i < getPaymentLabels().size(); i++) {
        try {
          joiner.add(String.format("%spaymentLabels%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getPaymentLabels().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    return joiner.toString();
  }

}

