openapi: 3.0.3
info:
  description: |
    Use the Payments Direct API to get quotes, create and manage payments, and manage originator and beneficiary identities.

    ## API environments

    The Payments Direct API offers the following environments:

    | <div style="width:90px">Environment</div>  | Base URL                      | Description                               |
    | ------------------------------------------ | ----------------------------- | ----------------------------------------- |
    | Test                                       | `https://api.test.ripple.com` | Test environment with simulated currency. |
    | Production                                 | `https://api.ripple.com`      | Production environment                    |

    ## API authentication

    All {{process.env.VAR_RPD}} API operations require a Bearer access token specific to the environment you're using. Ripple provides a secure model for authentication and authorization by providing access tokens scoped for a set of credentials.

    ### Generate client ID and client secret

    You will need your _client ID_ and _client secret_ to obtain an access token.

    If you do not already have your client ID and client secret, do the following:

    1. Log into the Ripple Payments UI.
    2. In the left navigation menu, click **Settings**.
    3. Under **Administration**, click **API Credentials**.
    4. In the dropdown list next to the page title, select the access environment. For example, to provision credentials for the test environment, select **Test** from the dropdown list.
    5. In the upper right corner of the page, click **New Credential**.
    6. Click **Save and Generate Key**.

    **Caution:** The *client secret* is displayed only once when you are creating new credentials. You cannot retrieve the secret after exiting this page. Copy and store the client secret securely and share it with authorized individuals in accordance with your organization's security policy.

    You can now use the client ID and client secret to generate access tokens using the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation.

    ### Request an access token

    To get an access token, use the [Request an access token](/api-docs/payments-direct-api/reference/#operation/authenticate) operation with your `client_id` and `client_secret`. The response contains a token in the `access_token` field.

    We recommend rotating your API credentials at regular intervals according to your organization's security policy.

    **Note**: Authentication tokens are not a fixed length and can vary, avoid validating tokens based on character length.
  license:
    name: Apache 2.0
    url: http://apache.org
  title: Payments Direct API
  version: 0.0.1
servers:
- description: Test environment with simulated currency
  url: https://api.test.ripple.com
- description: Production environment
  url: https://api.ripple.com
tags:
- description: |
    Use these API operations to manage your authentication tokens.

    | Operation | Method | Description |
    | --- | --- | --- |
    | [Request an access token](#operation/authenticate) | POST | Request an access token for authentication with Ripple APIs. |
    | [Test access token](#operation/testAuthToken) | GET | Test if an access token can be used for authentication. |
  name: Authentication
  x-displayName: Authentication
- description: |
    Use these API operations to manage your identities.

    | Operation | Method | Description |
    | --- | --- | --- |
    | [Create an identity](./#operation/createIdentityV2) | POST | Create a new identity. |
    | [List identities](./#operation/getIdentitiesV2) | GET | Get a list of existing identities. |
    | [Get an identity by ID](./#operation/getIdentityByIdV2) | GET | Get an identity by its unique ID. |
    | [Deactivate an identity](./#operation/deactivateIdentityV2) | DELETE | Deactivate an identity. |
  name: IdentitiesV2
  x-displayName: Identities
- description: |
    Use these API operations to manage your payments.

    | Operation | Method | Description |
    | --- | --- | --- |
    | [Search payments](./#operation/searchPayments) | POST | Search for payments based on filtering criteria. |
    | [Create a payment](./#operation/createPayment) | POST | Create a payment by accepting a quote. |
    | [Get payment by payment ID](./#operation/getPaymentById) | GET | Get a specific payment by payment ID.  |
  name: Payments
  x-displayName: Payments
- description: |
    Use these API operations to manage your quotes.

    | Operation | Method | Description |
    | --- | --- | --- |
    | [Create quote collection](./#operation/createQuoteCollection) | POST | Create a collection of quotes.  |
    | [Get quote collection](./#operation/getQuoteCollection) | GET | Get a quote collection by ID. |
    | [Get a quote](./#operation/getQuote) | GET | Get a specific quote by ID.  |
  name: Quote
  x-displayName: Quotes
- description: |
    Use this API operation to view your balances.

    | Operation | Method | Description |
    | --- | --- | --- |
    | [Get balances](./#operation/getBalances) | GET | View your existing
    balances  |
  name: ledger-public
  x-displayName: Balances
paths:
  /v2/oauth/token:
    post:
      description: |
        Request an access token for authentication with Ripple APIs.

        You need to request a token for the environment you want to authenticate with.

        **Note**: The length of the access token isn't fixed, hence it can vary. Avoid validating tokens based on character length.

        **Tutorials**

        * Learn how to [Request an access token](../../tutorials/request-an-access-token/).

        #### Environments

        | Environment | Domain | Description |
        | --- | --- | --- |
        | Test | `api.test.ripple.com` | Test environment with simulated currency. |
        | Production | `api.ripple.com` | Production environment for Ripple Payments Direct |
      operationId: authenticate
      parameters:
      - explode: false
        in: header
        name: Authorization
        required: false
        schema:
          description: "Optional [base64-encoded](https://datatracker.ietf.org/doc/html/rfc7617)\
            \ `client_id:client_secret`. If provided here they aren't required in\
            \ the request body."
          example: Basic ZGVtbzpwQDU1dzByZA==
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthenticationRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/AuthenticationRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationResponse"
          description: "Returns the authentication response object that includes the\
            \ token, type, scopes, and expiry."
        "400":
          content:
            application/json:
              example:
                error_description: "Missing required parameter: grant_type"
                error: invalid_request
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error_description: Unauthorized
                error: access_denied
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error_description: "Service not enabled within domain: <wrong:domain>"
                error: access_denied
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Forbidden
      security:
      - BasicAuth: []
      summary: Request an access token
      tags:
      - Authentication
      x-content-type: application/json
      x-accepts:
      - application/json
  /v2/oauth/token/test:
    get:
      description: Test if an access token can be used for authentication with Ripple
        APIs and how much time remains on it.
      operationId: testAuthToken
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ValidateTokenResponse"
                type: array
          description: "If a valid bearer token is supplied, the time remaining before\
            \ the token expires is returned."
        "400":
          content:
            text/plain:
              example: "Invalid Request parameters [Invalid bearer authentication\
                \ token]"
              schema:
                type: string
          description: Bad Request
        "401":
          description: Unauthorized
      security:
      - Bearer: []
      summary: Test access token
      tags:
      - Authentication
      x-accepts:
      - application/json
      - text/plain
  /v2/payments/filter:
    post:
      description: Search for payments based on filtering criteria.
      operationId: searchPayments
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchPaymentsRequest"
        description: Search payments request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentsResponse"
          description: Payments matching the specified filtering criteria.
        "400":
          content:
            application/json:
              example:
                status: 400
                errors:
                  code: USR_001
                  type: USER_VALIDATION_ERROR
                  title: Bad Request
                  description: Invalid request. Check your request parameters and
                    try again.
                  timestamp: 2024-12-01T12:00:00Z
              schema:
                $ref: "#/components/schemas/PaymentErrorResponse"
          description: Invalid input variables for the request.
        "500":
          content:
            application/json:
              example:
                status: 500
                errors:
                  code: SYS_001
                  type: SYSTEM_ERROR
                  title: Internal Server Error
                  description: Unable to process the request due to an internal server
                    error.
                  timestamp: 2024-12-01T12:00:00Z
              schema:
                $ref: "#/components/schemas/PaymentErrorResponse"
          description: Internal processing error
      security:
      - Bearer: []
      summary: Search payments
      tags:
      - Payments
      x-content-type: application/json
      x-accepts:
      - application/json
  /v2/payments:
    post:
      description: |
        Create a payment

        **Tutorials**

        * Learn how to [Create a payment](../../tutorials/create-a-payment/).
        * Learn how to [Create a third-party payment](../../tutorials/create-a-third-party-payment/).
      operationId: createPayment
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PaymentRequest"
        description: create payment request
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Payment"
          description: Valid payment
        "400":
          content:
            application/json:
              example:
                status: 400
                errors:
                  code: USR_001
                  type: USER_VALIDATION_ERROR
                  title: Bad Request
                  description: Invalid request. Check your request parameters and
                    try again.
                  timestamp: 2024-12-01T12:00:00Z
              schema:
                $ref: "#/components/schemas/PaymentErrorResponse"
          description: Invalid input variables for the payment.
        "402":
          content:
            application/json:
              example:
                status: 402
                errors:
                  code: USR_067
                  type: INSUFFICIENT_BALANCE_ERROR
                  title: Insufficient balance
                  description: "Payment failed due to insufficient balance. Required\
                    \ amount: 10, Available balance: 0. Add funds to your account\
                    \ and try again."
                  timestamp: 2024-12-01T12:00:00Z
              schema:
                $ref: "#/components/schemas/PaymentErrorResponse"
          description: Problems related to payment limits.
        "500":
          content:
            application/json:
              example:
                status: 500
                errors:
                  code: SYS_001
                  type: SYSTEM_ERROR
                  title: Internal Server Error
                  description: Unable to process the request due to an internal server
                    error.
                  timestamp: 2024-12-01T12:00:00Z
              schema:
                $ref: "#/components/schemas/PaymentErrorResponse"
          description: Internal processing error
      security:
      - Bearer: []
      summary: Create payment
      tags:
      - Payments
      x-content-type: application/json
      x-accepts:
      - application/json
  /v2/payments/{paymentId}:
    get:
      description: Gets a payment by ID.
      operationId: getPaymentById
      parameters:
      - description: Unique identifier of the payment to get.
        example: 7ea3399c-1234-5678-8d8f-d320ea406630
        explode: false
        in: path
        name: paymentId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentWithDetails"
          description: Successfully fetched payment details.
        "400":
          content:
            application/json:
              example:
                status: 400
                errors:
                  code: USR_001
                  type: USER_VALIDATION_ERROR
                  title: Bad Request
                  description: Invalid request. Check your request parameters and
                    try again.
                  timestamp: 2024-12-01T12:00:00Z
              schema:
                $ref: "#/components/schemas/PaymentErrorResponse"
          description: Invalid input variables for the payment.
        "404":
          content:
            application/json:
              example:
                status: 404
                errors:
                  code: USR_002
                  type: NOT_FOUND
                  title: Resource Not Found
                  description: The requested resource could not be found.
                  timestamp: 2024-12-01T12:00:00Z
              schema:
                $ref: "#/components/schemas/PaymentErrorResponse"
          description: Payment not found.
        "500":
          content:
            application/json:
              example:
                status: 500
                errors:
                  code: SYS_001
                  type: SYSTEM_ERROR
                  title: Internal Server Error
                  description: Unable to process the request due to an internal server
                    error.
                  timestamp: 2024-12-01T12:00:00Z
              schema:
                $ref: "#/components/schemas/PaymentErrorResponse"
          description: Internal processing error
      security:
      - Bearer: []
      summary: Get a payment by ID
      tags:
      - Payments
      x-accepts:
      - application/json
  /v2/payments/{paymentId}/states:
    get:
      description: Gets the state transitions for a payment by ID.
      operationId: getPaymentStateTransitionsById
      parameters:
      - description: Unique identifier of the payment for which you want to get state
          transition information.
        example: 7ea3399c-1234-5678-8d8f-d320ea406630
        explode: false
        in: path
        name: paymentId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateTransitionsResponse"
          description: Successfully fetched payment state transitions.
        "400":
          content:
            application/json:
              example:
                status: 400
                errors:
                  code: USR_001
                  type: USER_VALIDATION_ERROR
                  title: Bad Request
                  description: Invalid request. Check your request parameters and
                    try again.
                  timestamp: 2024-12-01T12:00:00Z
              schema:
                $ref: "#/components/schemas/PaymentErrorResponse"
          description: Invalid input variables for the payment.
        "404":
          content:
            application/json:
              example:
                status: 404
                errors:
                  code: USR_002
                  type: NOT_FOUND
                  title: Resource Not Found
                  description: The requested resource could not be found.
                  timestamp: 2024-12-01T12:00:00Z
              schema:
                $ref: "#/components/schemas/PaymentErrorResponse"
          description: Payment not found.
        "500":
          content:
            application/json:
              example:
                status: 500
                errors:
                  code: SYS_001
                  type: SYSTEM_ERROR
                  title: Internal Server Error
                  description: Unable to process the request due to an internal server
                    error.
                  timestamp: 2024-12-01T12:00:00Z
              schema:
                $ref: "#/components/schemas/PaymentErrorResponse"
          description: Internal processing error
      security:
      - Bearer: []
      summary: Get state transitions by payment ID
      tags:
      - Payments
      x-accepts:
      - application/json
  /v2/payments/{paymentId}/labels:
    patch:
      description: Add or remove labels for a payment.
      operationId: updatePaymentLabels
      parameters:
      - description: The unique ID that identifies the payment for which you want
          to update labels.
        example: 7ea3399c-1234-5678-8d8f-d320ea406630
        explode: false
        in: path
        name: paymentId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePaymentLabelsRequest"
        description: Labels to add to or remove from the payment.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdatePaymentLabelsResponse"
          description: Successfully updated the payment labels.
        "400":
          content:
            application/json:
              example:
                status: 400
                errors:
                  code: USR_001
                  type: USER_VALIDATION_ERROR
                  title: Bad Request
                  description: Invalid request. Check your request parameters and
                    try again.
                  timestamp: 2024-12-01T12:00:00Z
              schema:
                $ref: "#/components/schemas/PaymentErrorResponse"
          description: Invalid input variables for the request.
        "404":
          content:
            application/json:
              example:
                status: 404
                errors:
                  code: USR_002
                  type: NOT_FOUND
                  title: Resource Not Found
                  description: The requested resource could not be found.
                  timestamp: 2024-12-01T12:00:00Z
              schema:
                $ref: "#/components/schemas/PaymentErrorResponse"
          description: Payment not found.
        "500":
          content:
            application/json:
              example:
                status: 500
                errors:
                  code: SYS_001
                  type: SYSTEM_ERROR
                  title: Internal Server Error
                  description: Unable to process the request due to an internal server
                    error.
                  timestamp: 2024-12-01T12:00:00Z
              schema:
                $ref: "#/components/schemas/PaymentErrorResponse"
          description: Internal processing error
      security:
      - Bearer: []
      summary: Update payment labels
      tags:
      - Payments
      x-content-type: application/json
      x-accepts:
      - application/json
  /v2/identities:
    get:
      description: |
        Get a list of identities that match the query parameters.

        **Note**: Depending on the number of identities in your account, not all of them may be returned even if they match your query parameters.
      operationId: getIdentitiesV2
      parameters:
      - description: The type of identities you want to retrieve
        example: BENEFICIARY
        explode: true
        in: query
        name: identityType
        required: false
        schema:
          $ref: "#/components/schemas/identity-type-v2"
        style: form
      - description: The nickname for the identity provided at the time of identity
          creation
        example: Successful Beneficiary
        explode: true
        in: query
        name: nickName
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/list-identities-response-v2"
          description: Requested identity info in JSON format
        "400":
          content:
            application/json:
              example:
                status: 400
                errors:
                - code: USR_102
                  title: Bad request
                  type: USER_ERROR
                  description: Unable to get identity. Identity ID should be in UUID
                    format.
                  timestamp: 2025-05-23T15:02:56.516Z
              schema:
                $ref: "#/components/schemas/error-response"
          description: Invalid request
        "404":
          content:
            application/json:
              example:
                status: 404
                errors:
                - code: USR_103
                  title: Identities not found
                  type: NOT_FOUND
                  description: No identities exist
                  timestamp: 2025-05-23T15:02:56.516Z
              schema:
                $ref: "#/components/schemas/error-response"
          description: No identities found
        "500":
          content:
            application/json:
              example:
                status: 500
                errors:
                - code: SYS_001
                  title: Internal server error
                  type: SYSTEM_ERROR
                  description: Unable to process the request due to an internal server
                    error.
                  timestamp: 2025-05-23T15:02:56.516Z
              schema:
                $ref: "#/components/schemas/error-response"
          description: Internal Processing Error
      security:
      - Bearer: []
      summary: Get a list of identities
      tags:
      - IdentitiesV2
      x-accepts:
      - application/json
    post:
      description: |
        Create a new identity.

        <!-- **Tutorials**

        * Learn how to [Create an identity](../../tutorials/create-an-identity/). -->
      operationId: createIdentityV2
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/create-identity-request-v2"
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/create-identity-response"
          description: successful operation
        "400":
          content:
            application/json:
              example:
                status: 400
                errors:
                - code: USR_101
                  title: Bad Request
                  type: USER_ERROR
                  description: Invalid request. Check your request body and try again.
                  timestamp: 2025-05-23T15:02:56.516Z
              schema:
                $ref: "#/components/schemas/error-response"
          description: Invalid Request
        "500":
          content:
            application/json:
              example:
                status: 500
                errors:
                - code: SYS_001
                  title: Internal server error
                  type: SYSTEM_ERROR
                  description: Unable to process the request due to an internal server
                    error.
                  timestamp: 2025-05-23T15:02:56.516Z
              schema:
                $ref: "#/components/schemas/error-response"
          description: Internal Processing Error
      security:
      - Bearer: []
      summary: Create a new identity
      tags:
      - IdentitiesV2
      x-content-type: application/json
      x-accepts:
      - application/json
  /v2/identities/{identity-id}:
    delete:
      description: Delete an identity
      operationId: deactivateIdentityV2
      parameters:
      - description: Unique UUID string that maps to the identity to be deleted.
        example: 146f3c51-c313-47ce-b6f2-691c5a238b3e
        explode: false
        in: path
        name: identity-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The identity was deleted successfully
        "400":
          content:
            application/json:
              example:
                status: 400
                errors:
                - code: USR_102
                  title: Bad request
                  type: USER_ERROR
                  description: Unable to get identity. Identity ID should be in UUID
                    format.
                  timestamp: 2025-05-23T15:02:56.516Z
              schema:
                $ref: "#/components/schemas/error-response"
          description: Identity id is not of UUID format
        "404":
          content:
            application/json:
              example:
                status: 404
                errors:
                - code: USR_103
                  title: Identity not found
                  type: NOT_FOUND
                  description: No identity exists for identityId
                  timestamp: 2025-05-23T15:02:56.516Z
              schema:
                $ref: "#/components/schemas/error-response"
          description: Invalid Identity id does not exist
        "422":
          content:
            application/json:
              example:
                status: 422
                errors:
                - code: USR_104
                  title: Invalid request
                  type: USER_ERROR
                  description: The identity has already been deactivated.
                  timestamp: 2025-05-23T15:02:56.516Z
              schema:
                $ref: "#/components/schemas/error-response"
          description: Unprocessable Identity Id
        "500":
          content:
            application/json:
              example:
                status: 500
                errors:
                - code: SYS_001
                  title: Internal server error
                  type: SYSTEM_ERROR
                  description: Unable to process the request due to an internal server
                    error.
                  timestamp: 2025-05-23T15:02:56.516Z
              schema:
                $ref: "#/components/schemas/error-response"
          description: Internal Processing Error
      security:
      - Bearer: []
      summary: Delete an identity
      tags:
      - IdentitiesV2
      x-accepts:
      - application/json
    get:
      description: Get an identity by its unique ID
      operationId: getIdentityByIdV2
      parameters:
      - description: The ID of the identity to get.
        example: 146f3c51-c313-47ce-b6f2-691c5a238b3e
        explode: false
        in: path
        name: identity-id
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Version of the identity you want to retrieve.

          **Note**: If you don't specify a version, the latest version of the identity is returned.
        example: 2
        explode: true
        in: query
        name: version
        required: false
        schema:
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/identity-response-v2"
          description: Requested identity info in JSON format
        "400":
          content:
            application/json:
              example:
                status: 400
                errors:
                - code: USR_102
                  title: Bad request
                  type: USER_ERROR
                  description: Unable to get identity. Identity ID should be in UUID
                    format.
                  timestamp: 2025-05-23T15:02:56.516Z
              schema:
                $ref: "#/components/schemas/error-response"
          description: Identity ID is not in UUID format
        "404":
          content:
            application/json:
              example:
                status: 404
                errors:
                - code: USR_103
                  title: Identity not found
                  type: NOT_FOUND
                  description: No identity exists for identityId
                  timestamp: 2025-05-23T15:02:56.516Z
              schema:
                $ref: "#/components/schemas/error-response"
          description: Invalid - identity ID does not exist
      security:
      - Bearer: []
      summary: Get an identity by ID
      tags:
      - IdentitiesV2
      x-accepts:
      - application/json
  /v2/quotes/quote-collection:
    post:
      description: |
        Creates a collection of quotes for a proposed payment.

        **Tutorials**

        * Learn how to [Create a quote](../../tutorials/create-a-payment/#create-a-quote-collection).
      operationId: createQuoteCollection
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuoteCollectionRequest"
        description: Create quote collection request
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuoteCollection"
          description: Creates a collection of quotes
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuoteErrorResponse"
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuoteErrorResponse"
          description: Unauthorized request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuoteErrorResponse"
          description: The principal identified by the authorization header doesn't
            have enough scopes to perform this operation
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuoteErrorResponse"
          description: Internal server error
      security:
      - Bearer: []
      summary: Create quote collection
      tags:
      - Quote
      x-content-type: application/json
      x-accepts:
      - application/json
  /v2/quotes/quote-collection/{quote-collection-id}:
    get:
      operationId: getQuoteCollection
      parameters:
      - description: The unique identifier of the quote collection you want to retrieve
        explode: false
        in: path
        name: quote-collection-id
        required: true
        schema:
          example: 11111111-aaaa-2222-bbbb-222222222222
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuoteCollection"
          description: Valid quote collection found
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuoteErrorResponse"
          description: Unauthorized request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuoteErrorResponse"
          description: The principal identified by the authorization header doesn't
            have enough scopes to perform this operation
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuoteErrorResponse"
          description: Quote collection not found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuoteErrorResponse"
          description: Internal server error
      security:
      - Bearer: []
      summary: Get quote collection
      tags:
      - Quote
      x-accepts:
      - application/json
  /v2/quotes/{quote-id}:
    get:
      operationId: getQuote
      parameters:
      - description: The unique identifier of the quote to retrieve
        explode: false
        in: path
        name: quote-id
        required: true
        schema:
          example: 22222222-aaaa-2222-bbbb-222222222222
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Quote"
          description: Valid quote found
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuoteErrorResponse"
          description: Unauthorized request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuoteErrorResponse"
          description: The principal identified by the authorization header doesn't
            have enough scopes to perform this operation
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuoteErrorResponse"
          description: Quote not found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuoteErrorResponse"
          description: Internal server error
      security:
      - Bearer: []
      summary: Get quote
      tags:
      - Quote
      x-accepts:
      - application/json
  /v2/balances:
    get:
      operationId: getBalances
      parameters:
      - description: The currency for which you want to get the balance.
        explode: true
        in: query
        name: currency
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getBalances_200_response"
          description: Successful response containing balance details.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getBalances_400_response"
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getBalances_400_response"
          description: Unauthorized access
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getBalances_400_response"
          description: Internal server error
      security:
      - Bearer: []
      summary: Get available balances
      tags:
      - ledger-public
      x-accepts:
      - application/json
components:
  schemas:
    AuthenticationRequest:
      description: The authentication request.
      properties:
        client_id:
          description: The client ID associated with a specific set of API credentials.
          example: "{YOUR_CLIENT_ID}"
          type: string
        client_secret:
          description: The client secret associated with a specific set of API credentials.
          example: "{YOUR_CLIENT_SECRET}"
          type: string
        audience:
          description: |
            The value of the `audience` field is based on [URN](https://en.wikipedia.org/wiki/Uniform_Resource_Name) syntax.

            **Format**: `urn:ripplexcurrent-{ENVIRONMENT_STRING}:{YOUR_TENANT_ID}`

            * The first component is `urn:ripplenetxcurrent-`.
            * The second component refers to the environment you want to access.
            * The third component is your tenant ID. Ripple integration engineers provide this component during training.

            | Environment | Environment string | Description |
            | --- | --- | --- |
            | Test | `test` | Test environment with simulated partners and simulated currency. |
            | Production | `prod` | Production environment for Ripple's internal services. |

            **Example**: `urn:ripplexcurrent-test:{YOUR_TENANT_ID}`
          example: "urn:ripplexcurrent-test:{YOUR_TENANT_ID}"
          type: string
        grant_type:
          description: Set the grant-type for this client credentials request. This
            must be set to `client_credentials`.
          enum:
          - client_credentials
          example: client_credentials
          type: string
      required:
      - audience
      - client_id
      - client_secret
      - grant_type
      type: object
    AuthenticationResponse:
      description: "The authentication response object that includes the token, type,\
        \ scopes, and expiry."
      example:
        access_token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJ
        scope: pos:payments:create quote_collection:quote:create quote:quote:read
          pos:payments:read pcs_config:external_read data_requirements:read identities:create
          identities:read identities:write ledger:balance:read ledger:read
        token_type: Bearer
        expires_in: 3600
      properties:
        access_token:
          description: The bearer token you use when authenticating with a Ripple
            API.
          example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJ
          type: string
        scope:
          description: List of scopes applied to your `access_token`.
          example: pos:payments:create quote_collection:quote:create quote:quote:read
            pos:payments:read pcs_config:external_read data_requirements:read identities:create
            identities:read identities:write ledger:balance:read ledger:read
          type: string
        expires_in:
          description: How long your `access_token` is valid. You need to request
            a new token when it expires.
          example: 3600
          format: int64
          type: integer
        token_type:
          description: The type of token. Ripple APIs use `Bearer` auth tokens.
          example: Bearer
          type: string
      type: object
    ErrorResponse:
      description: The response object containing the error and its description if
        the authentication call fails.
      example:
        error_description: Unauthorized
        error: access_denied
      properties:
        error_description:
          description: Summary of the returned problem.
          example: Unauthorized
          type: string
        error:
          description: Error status.
          example: access_denied
          type: string
    ValidateTokenResponse:
      description: The response object indicating a token's validity and the time
        remaining on it
      example:
        seconds_to_expiry: 3600
        message: token_ok
      properties:
        message:
          example: token_ok
          type: string
        seconds_to_expiry:
          description: Remaining time in seconds before the tested token expires.
          example: 3600
          format: int64
          type: integer
    PaymentErrorResponse:
      example:
        errors:
          code: SYS_003
          description: "The payout category value must be one of BANK, EWALLET, CASH_PICKUP,\
            \ or ATM."
          type: SYSTEM_ERROR
          title: Internal Server Error
          timestamp: 2024-11-21T14:15:22Z
        status: "400"
      properties:
        errors:
          $ref: "#/components/schemas/PaymentError"
        status:
          description: Error Response Status
          example: "400"
          type: string
      required:
      - errors
      - status
      type: object
    PaymentError:
      example:
        code: SYS_003
        description: "The payout category value must be one of BANK, EWALLET, CASH_PICKUP,\
          \ or ATM."
        type: SYSTEM_ERROR
        title: Internal Server Error
        timestamp: 2024-11-21T14:15:22Z
      properties:
        code:
          description: A unique identifier for  the error
          example: SYS_003
          type: string
        type:
          description: "A high-level categorization of the error, indicating the type\
            \ of issue that occurred"
          example: SYSTEM_ERROR
          type: string
        title:
          description: "A brief, user-friendly description of the error"
          example: Internal Server Error
          type: string
        description:
          description: "A more detailed explanation of the error, potentially including\
            \ information about what caused the error and the next steps"
          example: "The payout category value must be one of BANK, EWALLET, CASH_PICKUP,\
            \ or ATM."
          type: string
        timestamp:
          example: 2024-11-21T14:15:22Z
          format: date-time
          type: string
      required:
      - code
      - description
      - timestamp
      - title
      - type
      type: object
    Payment:
      example:
        transactionDetails:
          businessUseCase: ON_RAMP
          thirdPartyPayment: false
          paymentProduct: paymentProduct
          flowType: B2B
        initiatedAt: 2019-08-24T14:15:22Z
        fees:
        - totalFee: 12.23
          feeCurrency: USD
          feeBreakdown:
          - feeDescription: The service fee charged for this transaction.
            calculatedFee: 2.43
            feeName: Service fee
          - feeDescription: The service fee charged for this transaction.
            calculatedFee: 2.43
            feeName: Service fee
        - totalFee: 12.23
          feeCurrency: USD
          feeBreakdown:
          - feeDescription: The service fee charged for this transaction.
            calculatedFee: 2.43
            feeName: Service fee
          - feeDescription: The service fee charged for this transaction.
            calculatedFee: 2.43
            feeName: Service fee
        lastStateUpdatedAt: 2019-08-24T14:15:22Z
        destination:
          beneficiaryIdentityNickName: Successful business beneficiary
          beneficiaryIdentityId: 7ea3399c-1234-5678-8d8f-d320ea406630
          beneficiaryIdentityVersion: 1
          payout: BANK
          destinationCurrency: USD
          destinationCountry: US
          destinationBlockchainNetwork: "Ethereum, TRON"
          destinationAmount: 1234.111223
        cryptoTransactionHash: 0x2b1f8b57dd6008143ff926ea9d9cd2365774cd0c5e6f379558a88c61c52071eb
        originator:
          internalId: Invoice-123
          sourceCountry: US
          payin: FUNDED
          originatorIdentityNickName: Successful Business Sender
          originatorIdentityId: 7ea3399c-1234-5678-8d8f-d320ea406630
          sourceCurrency: USD
          sourceAmount: 100
          originatorIdentityIdVersion: 1
        paymentLabels:
        - batchId=aaaaaaaa-1111-bbbb-abab-123412341234
        - batchId=aaaaaaaa-1111-bbbb-abab-123412341234
        - batchId=aaaaaaaa-1111-bbbb-abab-123412341234
        - batchId=aaaaaaaa-1111-bbbb-abab-123412341234
        - batchId=aaaaaaaa-1111-bbbb-abab-123412341234
        expiresAt: 2019-08-24T14:15:22Z
        sourceOfCash: EMIN
        paymentId: 7ea3399c-1234-5678-8d8f-d320ea406630
        purposeCode: PAYR
        paymentState: INITIATED
        adjustedExchangeRate:
          adjustedRate: 2
      properties:
        paymentId:
          description: The unique ID that identifies this payment. This value is the
            same as the quote ID.
          example: 7ea3399c-1234-5678-8d8f-d320ea406630
          format: uuid
          maxLength: 36
          type: string
        cryptoTransactionHash:
          description: Transaction hash of the crypto payment on the destination blockchain
            network
          example: 0x2b1f8b57dd6008143ff926ea9d9cd2365774cd0c5e6f379558a88c61c52071eb
          type: string
        initiatedAt:
          description: "The time at which the payment was initiated, specified in\
            \ UTC."
          example: 2019-08-24T14:15:22Z
          format: date-time
          type: string
        expiresAt:
          description: "The time at which this payment expires, specified in UTC."
          example: 2019-08-24T14:15:22Z
          format: date-time
          type: string
        lastStateUpdatedAt:
          description: "The time at which the payment state was last updated for this\
            \ payment, specified in UTC."
          example: 2019-08-24T14:15:22Z
          format: date-time
          type: string
        paymentState:
          $ref: "#/components/schemas/PaymentState"
        originator:
          $ref: "#/components/schemas/Originator"
        destination:
          $ref: "#/components/schemas/Destination"
        adjustedExchangeRate:
          $ref: "#/components/schemas/AdjustedExchangeRate"
        fees:
          description: A summary of fees included in payment quote.
          items:
            $ref: "#/components/schemas/FeeSummary"
          type: array
        sourceOfCash:
          description: Indicates the source of funds
          example: EMIN
          type: string
          x-enumDescriptions:
            ALMY: Alimony
            CASH: Cash Proceeds
            COMP: Compensation
            EMIN: Employee Income
            GIFT: Gift
            INHE: Inheritance
            INLQ: Insurance Premium Liquidation
            PACA: Paid Up Capital
            REDM: Redemption
            REPY: Retirement Policy
            REST: Real Estate Sale
            RETA: Retained Earnings
            SALE: Sale Of Goods
            SEAQ: Sale Aquisition Corporation
            SELF: Self Employment Income
            SVGS: Savings
            WINS: Winnings
        purposeCode:
          description: |
            Indicates the purpose of the payment

            For more information about the `purposeCode` options, see  [purposeCode](../../building-payment-request-body/#purposecode).
          example: PAYR
          type: string
        transactionDetails:
          $ref: "#/components/schemas/TransactionDetails"
        paymentLabels:
          description: "List of labels associated with the payment. A label typically\
            \ contains a UUID of your choice, designated as the batchId."
          items:
            example: batchId=aaaaaaaa-1111-bbbb-abab-123412341234
            maxLength: 100
            type: string
          maxItems: 10
          type: array
      required:
      - paymentId
      - paymentState
      type: object
    PaymentWithDetails:
      example:
        transactionDetails:
          businessUseCase: ON_RAMP
          thirdPartyPayment: false
          paymentProduct: paymentProduct
          flowType: B2B
        initiatedAt: 2019-08-24T14:15:22Z
        fees:
        - totalFee: 12.23
          feeCurrency: USD
          feeBreakdown:
          - feeDescription: The service fee charged for this transaction.
            calculatedFee: 2.43
            feeName: Service fee
          - feeDescription: The service fee charged for this transaction.
            calculatedFee: 2.43
            feeName: Service fee
        - totalFee: 12.23
          feeCurrency: USD
          feeBreakdown:
          - feeDescription: The service fee charged for this transaction.
            calculatedFee: 2.43
            feeName: Service fee
          - feeDescription: The service fee charged for this transaction.
            calculatedFee: 2.43
            feeName: Service fee
        lastStateUpdatedAt: 2019-08-24T14:15:22Z
        destination:
          beneficiaryIdentityNickName: Successful business beneficiary
          beneficiaryIdentityId: 7ea3399c-1234-5678-8d8f-d320ea406630
          beneficiaryIdentityVersion: 1
          payout: BANK
          destinationCurrency: USD
          destinationCountry: US
          destinationBlockchainNetwork: "Ethereum, TRON"
          destinationAmount: 1234.111223
        cryptoTransactionHash: 0x2b1f8b57dd6008143ff926ea9d9cd2365774cd0c5e6f379558a88c61c52071eb
        originator:
          internalId: Invoice-123
          sourceCountry: US
          payin: FUNDED
          originatorIdentityNickName: Successful Business Sender
          originatorIdentityId: 7ea3399c-1234-5678-8d8f-d320ea406630
          sourceCurrency: USD
          sourceAmount: 100
          originatorIdentityIdVersion: 1
        paymentLabels:
        - batchId=aaaaaaaa-1111-bbbb-abab-123412341234
        - batchId=aaaaaaaa-1111-bbbb-abab-123412341234
        - batchId=aaaaaaaa-1111-bbbb-abab-123412341234
        - batchId=aaaaaaaa-1111-bbbb-abab-123412341234
        - batchId=aaaaaaaa-1111-bbbb-abab-123412341234
        expiresAt: 2019-08-24T14:15:22Z
        sourceOfCash: EMIN
        paymentId: 7ea3399c-1234-5678-8d8f-d320ea406630
        purposeCode: purposeCode
        paymentState: INITIATED
        errors:
        - code: SYS_003
          description: "The payout category value must be one of BANK, EWALLET, CASH_PICKUP,\
            \ or ATM."
          type: SYSTEM_ERROR
          title: Internal Server Error
          timestamp: 2024-11-21T14:15:22Z
        - code: SYS_003
          description: "The payout category value must be one of BANK, EWALLET, CASH_PICKUP,\
            \ or ATM."
          type: SYSTEM_ERROR
          title: Internal Server Error
          timestamp: 2024-11-21T14:15:22Z
        adjustedExchangeRate:
          adjustedRate: 2
      properties:
        paymentId:
          description: The unique ID that identifies this payment. This value is the
            same as the quote ID.
          example: 7ea3399c-1234-5678-8d8f-d320ea406630
          format: uuid
          maxLength: 36
          type: string
        cryptoTransactionHash:
          description: Transaction hash of the crypto payment on the destination blockchain
            network
          example: 0x2b1f8b57dd6008143ff926ea9d9cd2365774cd0c5e6f379558a88c61c52071eb
          type: string
        initiatedAt:
          description: "The time at which the payment was initiated, specified in\
            \ UTC."
          example: 2019-08-24T14:15:22Z
          format: date-time
          type: string
        expiresAt:
          description: "The time at which this payment expires, specified in UTC."
          example: 2019-08-24T14:15:22Z
          format: date-time
          type: string
        lastStateUpdatedAt:
          description: "The time at which the payment state was last updated for this\
            \ payment, specified in UTC."
          example: 2019-08-24T14:15:22Z
          format: date-time
          type: string
        paymentState:
          $ref: "#/components/schemas/PaymentState"
        originator:
          $ref: "#/components/schemas/Originator"
        destination:
          $ref: "#/components/schemas/Destination"
        adjustedExchangeRate:
          $ref: "#/components/schemas/AdjustedExchangeRate"
        fees:
          description: A summary of fees included in payment quote.
          items:
            $ref: "#/components/schemas/FeeSummary"
          type: array
        sourceOfCash:
          description: Indicates the source of funds
          example: EMIN
          type: string
          x-enumDescriptions:
            ALMY: Alimony
            CASH: Cash Proceeds
            COMP: Compensation
            EMIN: Employee Income
            GIFT: Gift
            INHE: Inheritance
            INLQ: Insurance Premium Liquidation
            PACA: Paid Up Capital
            REDM: Redemption
            REPY: Retirement Policy
            REST: Real Estate Sale
            RETA: Retained Earnings
            SALE: Sale Of Goods
            SEAQ: Sale Aquisition Corporation
            SELF: Self Employment Income
            SVGS: Savings
            WINS: Winnings
        purposeCode:
          description: purposeCode for RPD payments
          type: string
        transactionDetails:
          $ref: "#/components/schemas/TransactionDetails"
        errors:
          items:
            $ref: "#/components/schemas/PaymentError"
          type: array
        paymentLabels:
          description: "List of labels associated with the payment. A label typically\
            \ contains a UUID of your choice, designated as the batchId."
          items:
            example: batchId=aaaaaaaa-1111-bbbb-abab-123412341234
            maxLength: 100
            type: string
          maxItems: 10
          type: array
      required:
      - paymentId
      - paymentState
      type: object
    StateTransitionsResponse:
      example:
        stateTransitions:
        - updatedFrom: INITIATED
          updatedTo: INITIATED
          updatedAt: 2024-08-13T20:15:50.990995Z
        - updatedFrom: INITIATED
          updatedTo: INITIATED
          updatedAt: 2024-08-13T20:15:50.990995Z
      properties:
        stateTransitions:
          items:
            $ref: "#/components/schemas/StateTransition"
          type: array
      required:
      - stateTransitions
      type: object
    StateTransition:
      example:
        updatedFrom: INITIATED
        updatedTo: INITIATED
        updatedAt: 2024-08-13T20:15:50.990995Z
      properties:
        updatedFrom:
          $ref: "#/components/schemas/PaymentState"
        updatedTo:
          $ref: "#/components/schemas/PaymentState"
        updatedAt:
          description: The timestamp when the payment state was updated.
          example: 2024-08-13T20:15:50.990995Z
          format: date-time
          type: string
      required:
      - updatedAt
      - updatedFrom
      - updatedTo
      type: object
    PaymentsResponse:
      example:
        filter:
          paymentIds:
          - aaaaaaaa-1111-bbbb-abab-123412341234
          - aaaaaaaa-1111-bbbb-abab-123412341234
          beforeTimestamp: 2024-04-24T14:15:22Z
          filterRangeType: PAYMENT_CREATION
          internalId: internalId
          beneficiaryIdentityNickname: Successful business beneficiary
          beneficiaryIdentityIds:
          - aaaaaaaa-1111-bbbb-abab-123412341234
          - aaaaaaaa-1111-bbbb-abab-123412341234
          destinationCurrencies:
          - destinationCurrencies
          - destinationCurrencies
          paymentLabels:
          - batchId=aaaaaaaa-1111-bbbb-abab-123412341234
          - batchId=aaaaaaaa-1111-bbbb-abab-123412341234
          - batchId=aaaaaaaa-1111-bbbb-abab-123412341234
          - batchId=aaaaaaaa-1111-bbbb-abab-123412341234
          - batchId=aaaaaaaa-1111-bbbb-abab-123412341234
          afterTimestamp: 2024-03-24T13:15:22Z
          paymentStates:
          - INITIATED
          - INITIATED
        data:
        - transactionDetails:
            businessUseCase: ON_RAMP
            thirdPartyPayment: false
            paymentProduct: paymentProduct
            flowType: B2B
          initiatedAt: 2019-08-24T14:15:22Z
          fees:
          - totalFee: 12.23
            feeCurrency: USD
            feeBreakdown:
            - feeDescription: The service fee charged for this transaction.
              calculatedFee: 2.43
              feeName: Service fee
            - feeDescription: The service fee charged for this transaction.
              calculatedFee: 2.43
              feeName: Service fee
          - totalFee: 12.23
            feeCurrency: USD
            feeBreakdown:
            - feeDescription: The service fee charged for this transaction.
              calculatedFee: 2.43
              feeName: Service fee
            - feeDescription: The service fee charged for this transaction.
              calculatedFee: 2.43
              feeName: Service fee
          lastStateUpdatedAt: 2019-08-24T14:15:22Z
          destination:
            beneficiaryIdentityNickName: Successful business beneficiary
            beneficiaryIdentityId: 7ea3399c-1234-5678-8d8f-d320ea406630
            beneficiaryIdentityVersion: 1
            payout: BANK
            destinationCurrency: USD
            destinationCountry: US
            destinationBlockchainNetwork: "Ethereum, TRON"
            destinationAmount: 1234.111223
          cryptoTransactionHash: 0x2b1f8b57dd6008143ff926ea9d9cd2365774cd0c5e6f379558a88c61c52071eb
          originator:
            internalId: Invoice-123
            sourceCountry: US
            payin: FUNDED
            originatorIdentityNickName: Successful Business Sender
            originatorIdentityId: 7ea3399c-1234-5678-8d8f-d320ea406630
            sourceCurrency: USD
            sourceAmount: 100
            originatorIdentityIdVersion: 1
          paymentLabels:
          - batchId=aaaaaaaa-1111-bbbb-abab-123412341234
          - batchId=aaaaaaaa-1111-bbbb-abab-123412341234
          - batchId=aaaaaaaa-1111-bbbb-abab-123412341234
          - batchId=aaaaaaaa-1111-bbbb-abab-123412341234
          - batchId=aaaaaaaa-1111-bbbb-abab-123412341234
          expiresAt: 2019-08-24T14:15:22Z
          sourceOfCash: EMIN
          paymentId: 7ea3399c-1234-5678-8d8f-d320ea406630
          purposeCode: PAYR
          paymentState: INITIATED
          adjustedExchangeRate:
            adjustedRate: 2
        - transactionDetails:
            businessUseCase: ON_RAMP
            thirdPartyPayment: false
            paymentProduct: paymentProduct
            flowType: B2B
          initiatedAt: 2019-08-24T14:15:22Z
          fees:
          - totalFee: 12.23
            feeCurrency: USD
            feeBreakdown:
            - feeDescription: The service fee charged for this transaction.
              calculatedFee: 2.43
              feeName: Service fee
            - feeDescription: The service fee charged for this transaction.
              calculatedFee: 2.43
              feeName: Service fee
          - totalFee: 12.23
            feeCurrency: USD
            feeBreakdown:
            - feeDescription: The service fee charged for this transaction.
              calculatedFee: 2.43
              feeName: Service fee
            - feeDescription: The service fee charged for this transaction.
              calculatedFee: 2.43
              feeName: Service fee
          lastStateUpdatedAt: 2019-08-24T14:15:22Z
          destination:
            beneficiaryIdentityNickName: Successful business beneficiary
            beneficiaryIdentityId: 7ea3399c-1234-5678-8d8f-d320ea406630
            beneficiaryIdentityVersion: 1
            payout: BANK
            destinationCurrency: USD
            destinationCountry: US
            destinationBlockchainNetwork: "Ethereum, TRON"
            destinationAmount: 1234.111223
          cryptoTransactionHash: 0x2b1f8b57dd6008143ff926ea9d9cd2365774cd0c5e6f379558a88c61c52071eb
          originator:
            internalId: Invoice-123
            sourceCountry: US
            payin: FUNDED
            originatorIdentityNickName: Successful Business Sender
            originatorIdentityId: 7ea3399c-1234-5678-8d8f-d320ea406630
            sourceCurrency: USD
            sourceAmount: 100
            originatorIdentityIdVersion: 1
          paymentLabels:
          - batchId=aaaaaaaa-1111-bbbb-abab-123412341234
          - batchId=aaaaaaaa-1111-bbbb-abab-123412341234
          - batchId=aaaaaaaa-1111-bbbb-abab-123412341234
          - batchId=aaaaaaaa-1111-bbbb-abab-123412341234
          - batchId=aaaaaaaa-1111-bbbb-abab-123412341234
          expiresAt: 2019-08-24T14:15:22Z
          sourceOfCash: EMIN
          paymentId: 7ea3399c-1234-5678-8d8f-d320ea406630
          purposeCode: PAYR
          paymentState: INITIATED
          adjustedExchangeRate:
            adjustedRate: 2
        sort:
          sortDirection: DESC
          sortField: initiatedAt
        page:
          size: 20
          lastPageToken: lastPageToken
      properties:
        data:
          description: Array of Payment objects
          items:
            $ref: "#/components/schemas/Payment"
          type: array
        filter:
          $ref: "#/components/schemas/PaymentFilter"
        sort:
          $ref: "#/components/schemas/Sort"
        page:
          $ref: "#/components/schemas/Page"
      type: object
    PaymentRequest:
      description: Information required to initiate a payment.
      properties:
        quoteId:
          description: ID of the quote you want to accept to initiate this payment.
            Must be in UUID format. This will be used as paymentId.
          example: 7ea3399c-1234-5678-8d8f-d320ea406630
          format: uuid
          type: string
        originatorIdentityId:
          description: The identity ID of the payment originator in UUID format. You
            can find the identity ID using the `GET /identities` operation.
          example: 7ea3399c-1234-5678-8d8f-d320ea406630
          format: uuid
          type: string
        beneficiaryIdentityId:
          description: The identity ID of the payment beneficiary in UUID format.
            You can find the identity ID using the `GET /identities` operation.
          example: 7ea3399c-1234-5678-8d8f-d320ea406630
          format: uuid
          type: string
        internalId:
          description: "Customer defined value, such as an invoice number."
          example: Invoice-123
          maxLength: 36
          type: string
        purposeCode:
          description: |
            Indicates the purpose of the payment

            For more information about the `purposeCode` options, see [purposeCode](../../building-payment-request-body/#purposecode).
          example: PAYR
          type: string
        sourceOfCash:
          description: Source of cash for payout.
          example: EMIN
          type: string
          x-enumDescriptions:
            ALMY: Alimony
            CASH: Cash Proceeds
            COMP: Compensation
            EMIN: Employee Income
            GIFT: Gift
            INHE: Inheritance
            INLQ: Insurance Premium Liquidation
            PACA: Paid Up Capital
            REDM: Redemption
            REPY: Retirement Policy
            REST: Real Estate Sale
            RETA: Retained Earnings
            SALE: Sale Of Goods
            SEAQ: Sale Aquisition Corporation
            SELF: Self Employment Income
            SVGS: Savings
            WINS: Winnings
        paymentLabels:
          description: "List of labels associated with the payment. A label typically\
            \ contains a UUID of your choice, designated as the batchId."
          items:
            example: batchId=aaaaaaaa-1111-bbbb-abab-123412341234
            maxLength: 100
            type: string
          maxItems: 10
          type: array
      required:
      - beneficiaryIdentityId
      - quoteId
      type: object
    PaymentState:
      enum:
      - INITIATED
      - VALIDATING
      - TRANSFERRING
      - COMPLETED
      - FAILED
      - QUOTED
      example: INITIATED
      type: string
      x-enumDescriptions:
        INITIATED: "You, the payment originator, have initiated a payment. The payment\
          \ now has a unique `paymentId` that's the same as the `quoteId` of the quote\
          \ you accepted."
        VALIDATING: Ripple validates the payment details and reserves funds from your
          available balance to complete the payment.
        TRANSFERRING: The payment is moving through the network to the ultimate beneficiary.
          The payment amount is debited from your available balance.
        COMPLETED: The payment is complete and the beneficiary has received the funds.
        FAILED: "The payment failed. The failure reason, if available, is listed in\
          \ the response. Funds that were previously reserved to complete the payment\
          \ are released and added back to the available balance."
        QUOTED: "A quote has been created, but you haven't accepted it yet to initiate\
          \ a payment. Note: This state is not shown as part of the payment detail\
          \ as the payment doesn't exist yet."
    PaymentSortField:
      default: initiatedAt
      description: The field based on which you want to sort the payments in the specified
        sort order.
      enum:
      - internalId
      - paymentState
      - sourceCurrency
      - sourceCountry
      - sourceAmount
      - destinationCurrency
      - destinationCountry
      - destinationAmount
      - initiatedAt
      - expiresAt
      - lastStateUpdatedAt
      - paymentLabel
      example: initiatedAt
      type: string
      x-enum-varnames:
      - INTERNAL_ID
      - PAYMENT_STATE
      - SOURCE_CURRENCY
      - SOURCE_COUNTRY
      - SOURCE_AMOUNT
      - DESTINATION_CURRENCY
      - DESTINATION_COUNTRY
      - DESTINATION_AMOUNT
      - INITIATED_AT
      - EXPIRES_AT
      - LAST_STATE_UPDATED_AT
      - PAYMENT_LABEL
      x-enumDescriptions:
        internalId: Sort by an internalId of payment
        paymentState: Sort by payment state
        sourceCurrency: Sort by source currency of payment
        sourceCountry: Sort by source country of payment
        sourceAmount: Sort by source amount of payment
        destinationCurrency: Sort by destination currency of payment
        destinationCountry: Sort by destination currency of payment
        destinationAmount: Sort by destination amount of payment
        initiatedAt: Sort by payment initiated timestamp
        expiresAt: Sort by payment expiry timestamp
        lastStateUpdatedAt: Sort by last updated timestamp of payment
        paymentLabel: Sort by labels attached to the payment
    Originator:
      description: Payment originator and source details.
      example:
        internalId: Invoice-123
        sourceCountry: US
        payin: FUNDED
        originatorIdentityNickName: Successful Business Sender
        originatorIdentityId: 7ea3399c-1234-5678-8d8f-d320ea406630
        sourceCurrency: USD
        sourceAmount: 100
        originatorIdentityIdVersion: 1
      properties:
        originatorIdentityId:
          description: The unique ID associated with the payment originator's identity
            record.
          example: 7ea3399c-1234-5678-8d8f-d320ea406630
          format: uuid
          maxLength: 36
          type: string
        originatorIdentityIdVersion:
          description: The current version of the originator's identity record.
          example: 1
          type: integer
        originatorIdentityNickName:
          description: Nickname associated with the originator's identity record.
          example: Successful Business Sender
          maxLength: 100
          type: string
        internalId:
          description: "An ID associated with this payment, if provided by the customer\
            \ during payment initiation."
          example: Invoice-123
          maxLength: 35
          type: string
        sourceCountry:
          description: "The country where the payment originator is located or incorporated,\
            \ specified in Alpha-2 Code format as defined in the ISO CountryCode ISO\
            \ 3166-1 list."
          example: US
          maxLength: 2
          pattern: "^[A-Z]{2}$"
          type: string
        sourceCurrency:
          description: originator's currency
          example: USD
          maxLength: 5
          pattern: "^[A-Z]{3,5}$"
          type: string
        sourceAmount:
          description: The amount sent by the originator in this payment. This field
            can hold a value with up to 6 decimal places.
          example: 100
          format: double
          type: number
        payin:
          description: Details about how this payment is funded.
          example: FUNDED
          type: string
      type: object
    Destination:
      description: Payment beneficiary and destination details.
      example:
        beneficiaryIdentityNickName: Successful business beneficiary
        beneficiaryIdentityId: 7ea3399c-1234-5678-8d8f-d320ea406630
        beneficiaryIdentityVersion: 1
        payout: BANK
        destinationCurrency: USD
        destinationCountry: US
        destinationBlockchainNetwork: "Ethereum, TRON"
        destinationAmount: 1234.111223
      properties:
        destinationAmount:
          description: The amount received by the payment beneficiary. This field
            can hold a value with up to 6 decimal places.
          example: 1234.111223
          format: double
          type: number
        destinationCountry:
          description: "The country where the beneficiary is located specified in\
            \ Alpha-2 Code format as defined in the ISO CountryCode ISO 3166-1 list.\
            \ If the beneficiary is an individual, then this value is their country\
            \ of residence. If the beneficiary is an institution, then this value\
            \ is their the country of incorporation."
          example: US
          maxLength: 2
          pattern: "^[A-Z]{2}$"
          type: string
        destinationCurrency:
          description: The currency code of the currency in which the beneficiary
            will receive this payment.
          example: USD
          maxLength: 5
          pattern: "^[A-Z]{3,5}$"
          type: string
        destinationBlockchainNetwork:
          description: The name of the blockchain network on which the beneficiary
            will receive this payment.
          example: "Ethereum, TRON"
          maxLength: 20
          minLength: 1
          type: string
        beneficiaryIdentityId:
          description: The unique ID associated with the payment beneficiary's identity
            record.
          example: 7ea3399c-1234-5678-8d8f-d320ea406630
          format: uuid
          maxLength: 36
          type: string
        beneficiaryIdentityVersion:
          description: The current version of the beneficiary's identity record.
          example: 1
          type: integer
        beneficiaryIdentityNickName:
          description: Nickname associated with the beneficiary's identity record.
          example: Successful business beneficiary
          maxLength: 100
          type: string
        payout:
          description: The payout category for this payment.
          example: BANK
          type: string
      type: object
    TransactionDetails:
      description: A summary of the payment category.
      example:
        businessUseCase: ON_RAMP
        thirdPartyPayment: false
        paymentProduct: paymentProduct
        flowType: B2B
      properties:
        paymentProduct:
          description: The Ripple payments product used to make this payment.
          nullable: true
          type: string
          x-enumDescriptions:
            LICENSED: Identifies a transaction using Ripple Payments Direct.
        flowType:
          description: Specifies the type of payment you're making as categorized
            by the identity type of the payment originator and beneficiary.
          enum:
          - B2B
          - B2C
          - C2B
          - C2C
          nullable: true
          type: string
          x-enumDescriptions:
            B2B: |
              Specifies that this payment is made by a business originator to a business beneficiary.
              </br></br>
              **Identification of third-party payment**:
                * If the `thirdPartyPayment` property is `true`, it indicates that you're making this payment on behalf of a business originator.
                * If the `thirdPartyPayment` property is `false`, it indicates that you are the business originator making this payment.
            B2C: |
              Specifies that this payment is made by a business originator to an individual beneficiary.
              </br></br>
              **Identification of third-party payment**:
                * If the `thirdPartyPayment` property is `true`, it indicates that you're making this payment on behalf of a business originator.
                * If the `thirdPartyPayment` property is `false`, it indicates that you are the business originator making this payment.
        thirdPartyPayment:
          description: Flag to indicate if this payment is initiated on behalf of
            a third-party originator.
          example: false
          nullable: true
          type: boolean
        businessUseCase:
          description: Indicates the type of payment you're making.
          enum:
          - ON_RAMP
          - OFF_RAMP
          - FIAT_TRANSFER
          - CRYPTO_TRANSFER
          nullable: true
          type: string
          x-enumDescriptions:
            FIAT_TRANSFER: Indicates fiat source currency to fiat destination.
      type: object
    Page:
      description: Specify page size and the ID of the last fetched result.
      example:
        size: 20
        lastPageToken: lastPageToken
      properties:
        size:
          default: 20
          description: Size of the page
          example: 20
          maximum: 100
          minimum: 1
          type: integer
        lastPageToken:
          description: "The unique reference ID of the last fetched item. To retrieve\
            \ subsequent item(s) if any, specify this value as the value of the `Page.list`\
            \ field in the  `POST /payments/filter` operation request body."
          type: string
      type: object
    SearchPaymentsRequest:
      description: Request body containing search criteria for payments.
      properties:
        filter:
          $ref: "#/components/schemas/PaymentFilter"
        sort:
          $ref: "#/components/schemas/Sort"
        page:
          $ref: "#/components/schemas/Page"
      type: object
    Sort:
      description: Specify sorting direction and the filtering criterion to sort by.
      example:
        sortDirection: DESC
        sortField: initiatedAt
      properties:
        sortField:
          $ref: "#/components/schemas/PaymentSortField"
        sortDirection:
          default: DESC
          description: Sort results in ascending or descending order.
          enum:
          - ASC
          - DESC
          example: DESC
          type: string
          x-enumDescriptions:
            ASC: Sort results in ascending order.
            DESC: Sort results in descending order.
      type: object
    PaymentFilter:
      description: Filter criteria to return desired payment search results.
      example:
        paymentIds:
        - aaaaaaaa-1111-bbbb-abab-123412341234
        - aaaaaaaa-1111-bbbb-abab-123412341234
        beforeTimestamp: 2024-04-24T14:15:22Z
        filterRangeType: PAYMENT_CREATION
        internalId: internalId
        beneficiaryIdentityNickname: Successful business beneficiary
        beneficiaryIdentityIds:
        - aaaaaaaa-1111-bbbb-abab-123412341234
        - aaaaaaaa-1111-bbbb-abab-123412341234
        destinationCurrencies:
        - destinationCurrencies
        - destinationCurrencies
        paymentLabels:
        - batchId=aaaaaaaa-1111-bbbb-abab-123412341234
        - batchId=aaaaaaaa-1111-bbbb-abab-123412341234
        - batchId=aaaaaaaa-1111-bbbb-abab-123412341234
        - batchId=aaaaaaaa-1111-bbbb-abab-123412341234
        - batchId=aaaaaaaa-1111-bbbb-abab-123412341234
        afterTimestamp: 2024-03-24T13:15:22Z
        paymentStates:
        - INITIATED
        - INITIATED
      properties:
        paymentIds:
          description: Specify a list of uuids to search for payment with payment
            ids equals one from the list
          items:
            example: aaaaaaaa-1111-bbbb-abab-123412341234
            format: uuid
            maxLength: 36
            type: string
          type: array
        paymentStates:
          description: Array of payment states like `EXECUTING` or `COMPLETED`.
          items:
            $ref: "#/components/schemas/PaymentState"
          type: array
        filterRangeType:
          $ref: "#/components/schemas/PaymentFilterRangeType"
        beforeTimestamp:
          description: "Depending on the value of the `filterRangeType` field, this\
            \ timestamp returns a list of payments that were created/modified/expired\
            \ at or before the specified time."
          example: 2024-04-24T14:15:22Z
          format: date-time
          type: string
        afterTimestamp:
          description: "Depending on the value of the `filterRangeType` field, this\
            \ timestamp returns a list of payments that were created/modified/expired\
            \ at or after the specified time."
          example: 2024-03-24T13:15:22Z
          format: date-time
          type: string
        beneficiaryIdentityIds:
          description: "To get all payments made to one or more beneficiaries, specify\
            \ the identity ID(s) of those beneficiaries in this field. You can find\
            \ the identity ID using the `GET /identities` operation."
          items:
            example: aaaaaaaa-1111-bbbb-abab-123412341234
            format: uuid
            maxLength: 36
            type: string
          type: array
        internalId:
          description: Specify an `internalId` to get payments associated with them.
            A prefix match will be executed.
          type: string
        beneficiaryIdentityNickname:
          description: "To get all payments made to a beneficiary, specify the nickname\
            \ of that beneficiary in this field. You can find the nickname using the\
            \ `GET /identities` operation."
          example: Successful business beneficiary
          maxLength: 100
          type: string
        destinationCurrencies:
          description: Specify one or more currency codes to get payments where the
            beneficiary received funds in these currencies.
          items:
            type: string
          pattern: "^[A-Z]{3,5}$"
          type: array
        paymentLabels:
          description: "List of labels associated with the payment. A label typically\
            \ contains a UUID of your choice, designated as the batchId."
          items:
            example: batchId=aaaaaaaa-1111-bbbb-abab-123412341234
            maxLength: 100
            type: string
          maxItems: 10
          type: array
      type: object
    PaymentFilterRangeType:
      description: The range type to filter payments on.
      enum:
      - PAYMENT_CREATION
      - PAYMENT_EXPIRY
      - PAYMENT_STATUS_LAST_UPDATED
      example: PAYMENT_CREATION
      type: string
      x-enum-varnames:
      - PAYMENT_CREATION
      - PAYMENT_EXPIRY
      - PAYMENT_STATUS_LAST_UPDATED
      x-enumDescriptions:
        PAYMENT_CREATION: Filter results to show payments that were created within
          the specified time period.
        PAYMENT_EXPIRY: Filter results to show payments that expired or are set to
          expire within the specified time period.
        PAYMENT_STATUS_LAST_UPDATED: Filter results to show payments whose status
          was last updated within the specified time period.
    PaymentLabels:
      description: "List of labels associated with the payment. A label typically\
        \ contains a UUID of your choice, designated as the batchId."
      items:
        example: batchId=aaaaaaaa-1111-bbbb-abab-123412341234
        maxLength: 100
        type: string
      maxItems: 10
      type: array
    UpdatePaymentLabelsResponse:
      description: Response body for modifying payment labels
      example:
        labels:
        - batchId=aaaaaaaa-1111-bbbb-abab-123412341234
        - batchId=aaaaaaaa-1111-bbbb-abab-123412341234
        - batchId=aaaaaaaa-1111-bbbb-abab-123412341234
        - batchId=aaaaaaaa-1111-bbbb-abab-123412341234
        - batchId=aaaaaaaa-1111-bbbb-abab-123412341234
      properties:
        labels:
          description: "List of labels associated with the payment. A label typically\
            \ contains a UUID of your choice, designated as the batchId."
          items:
            example: batchId=aaaaaaaa-1111-bbbb-abab-123412341234
            maxLength: 100
            type: string
          maxItems: 10
          type: array
      required:
      - labels
      type: object
    UpdatePaymentLabelsRequest:
      description: Request body containing the list of labels you want to add to or
        remove from the payment.
      properties:
        labelsToAdd:
          description: "List of labels associated with the payment. A label typically\
            \ contains a UUID of your choice, designated as the batchId."
          items:
            example: batchId=aaaaaaaa-1111-bbbb-abab-123412341234
            maxLength: 100
            type: string
          maxItems: 10
          type: array
        labelsToRemove:
          description: "List of labels associated with the payment. A label typically\
            \ contains a UUID of your choice, designated as the batchId."
          items:
            example: batchId=aaaaaaaa-1111-bbbb-abab-123412341234
            maxLength: 100
            type: string
          maxItems: 10
          type: array
      type: object
    AdjustedExchangeRate:
      additionalProperties: false
      description: Foreign Exchange (FX) rate used to calculate the quote.
      example:
        adjustedRate: 2
      properties:
        adjustedRate:
          description: Value of the Foreign Exchange (FX) rate.
          example: 2
          format: double
          type: number
      type: object
    TotalFeeBreakdown:
      additionalProperties: false
      description: A breakdown of the total fees included in this quote.
      example:
        feeDescription: The service fee charged for this transaction.
        calculatedFee: 2.43
        feeName: Service fee
      properties:
        calculatedFee:
          description: Value of the fee when the configured fee unit is applied against
            the `value`.
          example: 2.43
          format: double
          type: number
        feeName:
          description: The name of the fee.
          example: Service fee
          maxLength: 128
          minLength: 1
          type: string
        feeDescription:
          description: Description of the fee.
          example: The service fee charged for this transaction.
          maxLength: 256
          minLength: 1
          type: string
      type: object
    FeeSummary:
      description: A summary of fees included in this quote.
      example:
        totalFee: 12.23
        feeCurrency: USD
        feeBreakdown:
        - feeDescription: The service fee charged for this transaction.
          calculatedFee: 2.43
          feeName: Service fee
        - feeDescription: The service fee charged for this transaction.
          calculatedFee: 2.43
          feeName: Service fee
      properties:
        totalFee:
          description: The value of the total fee included in this quote.
          example: 12.23
          format: double
          type: number
        feeCurrency:
          description: The currency in which fees are charged.
          example: USD
          pattern: "^[a-zA-Z]{3,5}$"
          type: string
        feeBreakdown:
          description: An array of fees that provides a breakdown of how the total
            fees is calculated for this quote.
          items:
            $ref: "#/components/schemas/TotalFeeBreakdown"
          type: array
      type: object
    state-type:
      description: The state of the identity
      enum:
      - ACTIVE
      - BLOCKED
      - DEACTIVATED
      example: ACTIVE
      type: string
      x-enumDescriptions:
        ACTIVE: The identity requested exists and is active.
        BLOCKED: "The identity requested exists, but is blocked."
        DEACTIVATED: The identity requested has been deactivated.
    create-identity-response:
      example:
        identityId: 2f4ac57f-c5ba-4051-b51f-b3565778717b
        version: 2
      properties:
        identityId:
          description: The unique ID of the identity
          example: 2f4ac57f-c5ba-4051-b51f-b3565778717b
          type: string
        version:
          description: The version number of the identity
          example: 2
          type: integer
      required:
      - identityId
      - version
      type: object
    error:
      example:
        code: SYS_100
        description: Unable to get identity. Identity ID should be in UUID format
        title: No identity exists for identityId
        type: USER_VALIDATION_ERROR
        timestamp: 2023-11-02T18:26:00.000123Z
      properties:
        code:
          description: Unique identifier of an error
          example: SYS_100
          maxLength: 128
          minLength: 1
          type: string
        title:
          description: Error message providing a brief summary of the error
          example: No identity exists for identityId
          maxLength: 128
          minLength: 1
          type: string
        type:
          description: Identifies the problem type
          example: USER_VALIDATION_ERROR
          maxLength: 128
          minLength: 1
          type: string
        description:
          description: Provides more technical information
          example: Unable to get identity. Identity ID should be in UUID format
          maxLength: 1024
          minLength: 1
          type: string
        timestamp:
          description: "The time when this error occurred, specified in UTC."
          example: 2023-11-02T18:26:00.000123Z
          format: date-time
          maxLength: 128
          minLength: 1
          type: string
      required:
      - code
      - description
      - timestamp
      - title
      - type
      type: object
    error-response:
      example:
        errors:
        - code: SYS_100
          description: Unable to get identity. Identity ID should be in UUID format
          title: No identity exists for identityId
          type: USER_VALIDATION_ERROR
          timestamp: 2023-11-02T18:26:00.000123Z
        - code: SYS_100
          description: Unable to get identity. Identity ID should be in UUID format
          title: No identity exists for identityId
          type: USER_VALIDATION_ERROR
          timestamp: 2023-11-02T18:26:00.000123Z
        status: 404
        timestamp: 2023-11-02T18:26:00.000Z
      properties:
        status:
          description: The HTTP status code of the error
          example: 404
          type: integer
        errors:
          items:
            $ref: "#/components/schemas/error"
          type: array
        timestamp:
          description: The timestamp of the error
          example: 2023-11-02T18:26:00.000Z
          type: string
      required:
      - errors
      - status
      type: object
    identity-v2:
      example:
        createdAt: 2023-11-02T18:26:00Z
        useCaseType: BUSINESS
        identityType: BENEFICIARY
        identityId: 2f4ac57f-c5ba-4051-b51f-b3565778717b
        nickName: MyCompany
      properties:
        identityId:
          description: The unique ID of the identity
          example: 2f4ac57f-c5ba-4051-b51f-b3565778717b
          type: string
        nickName:
          description: The nickname of the identity provided at the time of identity
            creation.
          example: MyCompany
          type: string
        createdAt:
          description: The time at which the identity was created
          example: 2023-11-02T18:26:00Z
          format: date-time
          type: string
        identityType:
          $ref: "#/components/schemas/identity-type-v2"
        useCaseType:
          $ref: "#/components/schemas/useCaseType"
      required:
      - createdAt
      - identityId
      - identityType
      - nickName
      - useCaseType
      type: object
    useCaseType:
      description: The use case type for the identity
      enum:
      - INDIVIDUAL
      - BUSINESS
      example: BUSINESS
      type: string
      x-enumDescriptions:
        INDIVIDUAL: Identity associated with an individual
        BUSINESS: Identity associated with an institution or business
    create-identity-request-v2:
      properties:
        piiData:
          additionalProperties: true
          description: |
            PII data in JSON format.

            You must use the correct `piiData` schema for the type of identity you want to create.

            **Note**: Reach out to your Ripple liaison to get this schema.
          type: object
        identityType:
          $ref: "#/components/schemas/identity-type-v2"
        nickName:
          description: The nickname for the identity provided at the time of identity
            creation
          example: MyCompany
          type: string
        useCaseType:
          $ref: "#/components/schemas/useCaseType"
      required:
      - identityType
      - piiData
      - useCaseType
      type: object
    identity-type-v2:
      description: The type of the identity
      enum:
      - SENDER
      - BENEFICIARY
      - ORIGINATOR
      example: BENEFICIARY
      type: string
      x-enumDescriptions:
        BENEFICIARY: Identity associated with the beneficiary.
        ORIGINATOR: Identity associated with the party originating the payment.
    list-identities-response-v2:
      example:
        data:
        - createdAt: 2023-11-02T18:26:00Z
          useCaseType: BUSINESS
          identityType: BENEFICIARY
          identityId: 2f4ac57f-c5ba-4051-b51f-b3565778717b
          nickName: MyCompany
        - createdAt: 2023-11-02T18:26:00Z
          useCaseType: BUSINESS
          identityType: BENEFICIARY
          identityId: 2f4ac57f-c5ba-4051-b51f-b3565778717b
          nickName: MyCompany
      format: application/json
      properties:
        data:
          description: The list of the identities that match the query parameters
          items:
            $ref: "#/components/schemas/identity-v2"
          type: array
      type: object
    identity-response-v2:
      example:
        createdAt: 2023-11-02T18:26:00Z
        useCaseType: BUSINESS
        piiData:
          key: ""
        identityType: BENEFICIARY
        identityId: 2f4ac57f-c5ba-4051-b51f-b3565778717b
        nickName: MyCompany
        identityState: ACTIVE
        version: 2
      properties:
        identityId:
          description: The unique ID of the identity
          example: 2f4ac57f-c5ba-4051-b51f-b3565778717b
          type: string
        identityType:
          $ref: "#/components/schemas/identity-type-v2"
        createdAt:
          description: The time at which the identity was created
          example: 2023-11-02T18:26:00Z
          format: date-time
          type: string
        identityState:
          $ref: "#/components/schemas/state-type"
        nickName:
          description: The nickname for the identity provided at the time of identity
            creation
          example: MyCompany
          type: string
        piiData:
          additionalProperties: true
          description: PII data in JSON format
          type: object
        version:
          description: The version number of the identity
          example: 2
          type: integer
        useCaseType:
          $ref: "#/components/schemas/useCaseType"
      required:
      - createdAt
      - identityId
      - identityState
      - identityType
      - piiData
      - useCaseType
      - version
      type: object
    QuoteErrorResponse:
      additionalProperties: false
      example:
        errors:
        - code: SYS_100
          description: Customer not found
          title: Unable to process the request due to an internal server error.
          type: USER_VALIDATION_ERROR
          timestamp: 2023-11-02T18:26:00.000123Z
        - code: SYS_100
          description: Customer not found
          title: Unable to process the request due to an internal server error.
          type: USER_VALIDATION_ERROR
          timestamp: 2023-11-02T18:26:00.000123Z
        status: 0
      properties:
        errors:
          description: List of quote errors
          items:
            $ref: "#/components/schemas/QuoteError"
          type: array
        status:
          description: Response status code
          type: integer
      required:
      - errors
      - status
      type: object
    QuoteError:
      additionalProperties: false
      example:
        code: SYS_100
        description: Customer not found
        title: Unable to process the request due to an internal server error.
        type: USER_VALIDATION_ERROR
        timestamp: 2023-11-02T18:26:00.000123Z
      properties:
        code:
          description: Unique identifier of an error
          example: SYS_100
          maxLength: 128
          minLength: 1
          type: string
        title:
          description: Error message providing a brief summary of the error
          example: Unable to process the request due to an internal server error.
          maxLength: 128
          minLength: 1
          type: string
        type:
          description: Identifies the problem type
          example: USER_VALIDATION_ERROR
          maxLength: 128
          minLength: 1
          type: string
        description:
          description: Provides more technical information
          example: Customer not found
          maxLength: 1024
          minLength: 1
          type: string
        timestamp:
          description: "The time when this error occurred, specified in UTC."
          example: 2023-11-02T18:26:00.000123Z
          format: date-time
          maxLength: 128
          minLength: 1
          type: string
      required:
      - code
      - description
      - timestamp
      - title
      - type
      type: object
    QuoteStatus:
      enum:
      - EXPIRED
      - ACTIVE
      example: ACTIVE
      type: string
      x-enumDescriptions:
        EXPIRED: Expired quote
        ACTIVE: Quote that you can accept to create a payment.
    QuoteAmountType:
      default: SOURCE_AMOUNT
      description: The type of amount for which you want to get a quote.
      enum:
      - SOURCE_AMOUNT
      - DESTINATION_AMOUNT
      type: string
      x-enumDescriptions:
        SOURCE_AMOUNT: Specify this value to get a quote for the amount that you want
          to send.
        DESTINATION_AMOUNT: Specify this value to get a quote for the amount that
          the beneficiary should receive.
    QuoteCollectionRequest:
      additionalProperties: false
      description: Request to create a quote collection
      properties:
        quoteAmount:
          description: The amount for which you wish to receive a collection of quotes.
          example: 123.45
          format: double
          maximum: 100000000
          minimum: 1
          type: number
        quoteAmountType:
          $ref: "#/components/schemas/QuoteAmountType"
        sourceCurrency:
          description: The currency code of the currency that you are sending.
          example: USD
          pattern: "^[a-zA-Z]{3,5}$"
          type: string
        destinationCurrency:
          description: The currency code of the currency in which your beneficiary
            will receive this payment.
          example: MXN
          pattern: "^[a-zA-Z]{3,5}$"
          type: string
        sourceCountry:
          description: The country code of the country from where you are sending
            the funds. This is an ISO 3166-1 alpha-2 code.
          example: US
          pattern: "^[a-zA-Z]{2}$"
          type: string
        destinationCountry:
          description: "The country where the beneficiary is located specified in\
            \ Alpha-2 Code format as defined in the ISO CountryCode ISO 3166-1 list.\
            \ If the beneficiary is an individual, then this value is their country\
            \ of residence. If the beneficiary is an institution, then this value\
            \ is their the country of incorporation."
          example: PH
          pattern: "^[a-zA-Z]{2}$"
          type: string
        payoutCategory:
          description: The name of the payout category.
          example: BANK
          maxLength: 128
          minLength: 1
          type: string
          x-enumDescriptions:
            BANK: Indicates that the payout will be made in fiat currency to a recipient’s
              bank account through local banking rails.
            CRYPTO: Indicates that the payout will be made in stablecoin to a recipient’s
              crypto wallet address.
        payinCategory:
          description: The name of the pay in category indicating how this payment
            will be funded.
          example: FUNDED
          maxLength: 128
          minLength: 1
          type: string
          x-enumDescriptions:
            FUNDED: Indicates that the payment is being made from funds you've deposited
              with Ripple.
            T_PLUS_ONE: Indicates the payment is being made and you will pay the outstanding
              invoice.
        destinationBlockchainNetwork:
          description: The name of the blockchain network on which the beneficiary
            will receive this payment.
          example: Ethereum
          maxLength: 20
          minLength: 1
          type: string
      required:
      - destinationCurrency
      - payinCategory
      - payoutCategory
      - quoteAmount
      - quoteAmountType
      - sourceCurrency
      type: object
    Quote:
      additionalProperties: false
      example:
        sourceCountry: US
        fees:
        - totalFee: 12.23
          feeCurrency: USD
          feeBreakdown:
          - feeDescription: The service fee charged for this transaction.
            calculatedFee: 2.43
            feeName: Service fee
          - feeDescription: The service fee charged for this transaction.
            calculatedFee: 2.43
            feeName: Service fee
        - totalFee: 12.23
          feeCurrency: USD
          feeBreakdown:
          - feeDescription: The service fee charged for this transaction.
            calculatedFee: 2.43
            feeName: Service fee
          - feeDescription: The service fee charged for this transaction.
            calculatedFee: 2.43
            feeName: Service fee
        quoteAmountType: SOURCE_AMOUNT
        sourceCurrency: USD
        destinationCountry: MX
        destinationBlockchainNetwork: Ethereum
        quoteId: 7ea3399c-1234-5678-8d8f-d320ea406630
        quoteStatus: ACTIVE
        expiresAt: 2023-11-02T18:26:00.000123Z
        createdAt: 2023-11-02T18:26:00.000123Z
        payinCategory: FUNDED
        destinationCurrency: MXN
        sourceAmount: 123.45
        payoutCategory: BANK
        destinationAmount: 2438.19
        adjustedExchangeRate:
          adjustedRate: 2
      properties:
        quoteId:
          description: Unique ID that represents this quote.
          example: 7ea3399c-1234-5678-8d8f-d320ea406630
          format: uuid
          maxLength: 36
          minLength: 1
          type: string
        quoteStatus:
          $ref: "#/components/schemas/QuoteStatus"
        quoteAmountType:
          $ref: "#/components/schemas/QuoteAmountType"
        sourceAmount:
          description: Amount to be sent by the originator.
          example: 123.45
          format: double
          maximum: 100000000
          minimum: 1
          type: number
        destinationAmount:
          description: Amount to be received by destination
          example: 2438.19
          format: double
          maximum: 100000000
          minimum: 1
          type: number
        sourceCurrency:
          description: The currency code of the currency that you are sending.
          example: USD
          pattern: "^[a-zA-Z]{3,5}$"
          type: string
        destinationCurrency:
          description: The currency code of the currency in which your beneficiary
            will receive this payment.
          example: MXN
          pattern: "^[a-zA-Z]{3,5}$"
          type: string
        sourceCountry:
          description: "The country where the payment originator is located or incorporated,\
            \ specified in Alpha-2 Code format as defined in the ISO CountryCode ISO\
            \ 3166-1 list."
          example: US
          pattern: "^[a-zA-Z]{2}$"
          type: string
        destinationCountry:
          description: The country code to which you wish to send the funds. It follows
            ISO 3166-1 alpha-2 code
          example: MX
          pattern: "^[a-zA-Z]{2}$"
          type: string
        payoutCategory:
          description: Name of the payout category specified in the quote request.
          example: BANK
          maxLength: 128
          minLength: 1
          type: string
        payinCategory:
          description: The name of payin category specified in the quote request.
          example: FUNDED
          maxLength: 128
          minLength: 1
          type: string
        adjustedExchangeRate:
          $ref: "#/components/schemas/AdjustedExchangeRate"
        fees:
          description: A summary of fees included in this quote.
          items:
            $ref: "#/components/schemas/FeeSummary"
          type: array
        createdAt:
          description: "The time when this quote was created, specified in UTC."
          example: 2023-11-02T18:26:00.000123Z
          format: date-time
          maxLength: 128
          minLength: 1
          type: string
        expiresAt:
          description: "The time when this quote expires, specified in UTC."
          example: 2023-11-02T18:26:00.000123Z
          format: date-time
          maxLength: 128
          minLength: 1
          type: string
        destinationBlockchainNetwork:
          description: The name of the blockchain network on which the beneficiary
            will receive this payment.
          example: Ethereum
          maxLength: 20
          minLength: 1
          type: string
      required:
      - destinationCurrency
      - payinCategory
      - payoutCategory
      - quoteId
      - quoteStatus
      - sourceCurrency
      type: object
    QuoteCollection:
      additionalProperties: false
      example:
        quoteCollectionId: 11111111-aaaa-2222-bbbb-222222222222
        quotes:
        - sourceCountry: US
          fees:
          - totalFee: 12.23
            feeCurrency: USD
            feeBreakdown:
            - feeDescription: The service fee charged for this transaction.
              calculatedFee: 2.43
              feeName: Service fee
            - feeDescription: The service fee charged for this transaction.
              calculatedFee: 2.43
              feeName: Service fee
          - totalFee: 12.23
            feeCurrency: USD
            feeBreakdown:
            - feeDescription: The service fee charged for this transaction.
              calculatedFee: 2.43
              feeName: Service fee
            - feeDescription: The service fee charged for this transaction.
              calculatedFee: 2.43
              feeName: Service fee
          quoteAmountType: SOURCE_AMOUNT
          sourceCurrency: USD
          destinationCountry: MX
          destinationBlockchainNetwork: Ethereum
          quoteId: 7ea3399c-1234-5678-8d8f-d320ea406630
          quoteStatus: ACTIVE
          expiresAt: 2023-11-02T18:26:00.000123Z
          createdAt: 2023-11-02T18:26:00.000123Z
          payinCategory: FUNDED
          destinationCurrency: MXN
          sourceAmount: 123.45
          payoutCategory: BANK
          destinationAmount: 2438.19
          adjustedExchangeRate:
            adjustedRate: 2
        - sourceCountry: US
          fees:
          - totalFee: 12.23
            feeCurrency: USD
            feeBreakdown:
            - feeDescription: The service fee charged for this transaction.
              calculatedFee: 2.43
              feeName: Service fee
            - feeDescription: The service fee charged for this transaction.
              calculatedFee: 2.43
              feeName: Service fee
          - totalFee: 12.23
            feeCurrency: USD
            feeBreakdown:
            - feeDescription: The service fee charged for this transaction.
              calculatedFee: 2.43
              feeName: Service fee
            - feeDescription: The service fee charged for this transaction.
              calculatedFee: 2.43
              feeName: Service fee
          quoteAmountType: SOURCE_AMOUNT
          sourceCurrency: USD
          destinationCountry: MX
          destinationBlockchainNetwork: Ethereum
          quoteId: 7ea3399c-1234-5678-8d8f-d320ea406630
          quoteStatus: ACTIVE
          expiresAt: 2023-11-02T18:26:00.000123Z
          createdAt: 2023-11-02T18:26:00.000123Z
          payinCategory: FUNDED
          destinationCurrency: MXN
          sourceAmount: 123.45
          payoutCategory: BANK
          destinationAmount: 2438.19
          adjustedExchangeRate:
            adjustedRate: 2
      properties:
        quoteCollectionId:
          description: Unique ID that represents this quote collection.
          example: 11111111-aaaa-2222-bbbb-222222222222
          format: uuid
          maxLength: 36
          minLength: 1
          type: string
        quotes:
          description: List of quotes
          items:
            $ref: "#/components/schemas/Quote"
          minItems: 0
          type: array
      required:
      - quoteCollectionId
      - quotes
      type: object
    getBalances_200_response_balances_inner:
      description: Customer available prefund balance for specific currency
      example:
        fundingType: FUNDED
        reservedBalance: 100
        currency: USD
        availableBalance: 1000
      properties:
        fundingType:
          description: The funding method associated with your account.
          enum:
          - FUNDED
          type: string
          x-enumDescriptions:
            FUNDED: Indicates that you initiate payments using the funds you added
              to your account.
        currency:
          description: Currency code.
          example: USD
          type: string
        availableBalance:
          description: Available funded balance that you can use to initiate payments.
          example: 1000
          type: number
        reservedBalance:
          description: Amount reserved to complete in-progress transactions. You can't
            use this amount to initiate new payments.
          example: 100
          type: number
      required:
      - availableBalance
      - currency
      - fundingType
      - reservedBalance
      type: object
    getBalances_200_response:
      description: Customer available prefund balance details.
      example:
        balances:
        - fundingType: FUNDED
          reservedBalance: 100
          currency: USD
          availableBalance: 1000
        - fundingType: FUNDED
          reservedBalance: 100
          currency: USD
          availableBalance: 1000
        timestamp: 2025-01-10T00:00:00Z
      properties:
        timestamp:
          description: Timestamp of the balance response.
          example: 2025-01-10T00:00:00Z
          format: date-time
          type: string
        balances:
          description: List of available prefund balances.
          items:
            $ref: "#/components/schemas/getBalances_200_response_balances_inner"
          type: array
      required:
      - balances
      - timestamp
      type: object
    getBalances_400_response_errors_inner:
      example:
        code: SYS_003
        description: "The payout category value must be one of BANK, EWALLET, CASH_PICKUP,\
          \ or ATM."
        type: SYSTEM_ERROR
        title: Internal Server Error
        timestamp: 2024-01-02T14:16:00Z
      properties:
        code:
          description: A unique error code that identifies the specific error
          example: SYS_003
          type: string
        type:
          description: "A high-level categorization of the error, indicating the type\
            \ of issue that occurred"
          example: SYSTEM_ERROR
          type: string
        title:
          description: "A brief, user-friendly description of the error"
          example: Internal Server Error
          type: string
        description:
          description: "A more detailed explanation of the error, including potential\
            \ causes and next steps"
          example: "The payout category value must be one of BANK, EWALLET, CASH_PICKUP,\
            \ or ATM."
          type: string
        timestamp:
          description: The timestamp of the error occurrence
          example: 2024-01-02T14:16:00Z
          format: date-time
          type: string
      required:
      - code
      - description
      - timestamp
      - title
      - type
      type: object
    getBalances_400_response:
      example:
        errors:
        - code: SYS_003
          description: "The payout category value must be one of BANK, EWALLET, CASH_PICKUP,\
            \ or ATM."
          type: SYSTEM_ERROR
          title: Internal Server Error
          timestamp: 2024-01-02T14:16:00Z
        - code: SYS_003
          description: "The payout category value must be one of BANK, EWALLET, CASH_PICKUP,\
            \ or ATM."
          type: SYSTEM_ERROR
          title: Internal Server Error
          timestamp: 2024-01-02T14:16:00Z
        status: 400
      properties:
        status:
          description: The HTTP status code representing the error response
          example: 400
          type: integer
        errors:
          description: An array containing details about the errors encountered
          items:
            $ref: "#/components/schemas/getBalances_400_response_errors_inner"
          type: array
      required:
      - errors
      - status
      type: object
  securitySchemes:
    Bearer:
      bearerFormat: JWT
      scheme: bearer
      type: http
    BasicAuth:
      scheme: basic
      type: http

